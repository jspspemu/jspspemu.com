var MediaEngine = (function() { // MediaEngine.pre.js
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 300440;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 300480;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(301147);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([0,0,0,0,0,126,63,63,0,204,229,62,0,36,164,62,0,230,80,62,0,50,25,62,0,66,148,61,0,230,17,61,0,42,228,60,0,188,15,61,0,24,53,61,0,42,100,61,0,188,143,61,0,24,181,61,0,42,228,61,0,188,15,62,0,24,53,62,0,42,100,62,0,188,143,62,0,24,181,62,0,42,228,62,0,188,15,63,0,24,53,63,0,42,100,63,0,188,143,63,0,24,181,63,0,42,228,63,0,188,15,64,0,24,53,64,0,42,100,64,0,188,143,64,0,24,181,64,0,42,228,64,0,188,15,65,0,24,53,65,0,42,100,65,0,188,143,65,0,24,181,65,0,42,228,65,0,188,15,66,0,24,53,66,0,42,100,66,0,188,143,66,0,24,181,66,0,42,228,66,0,188,15,67,0,24,53,67,0,42,100,67,0,188,143,67,0,24,181,67,0,42,228,67,0,188,15,68,0,24,53,68,0,42,100,68,0,188,143,68,0,24,181,68,0,42,228,68,0,188,15,69,0,24,53,69,0,42,100,69,0,188,143,69,0,24,181,69,0,42,228,69,0,188,15,70,0,24,53,70,0,42,100,70,0,188,143,70,0,24,181,70,0,42,228,70,0,188,15,71,0,24,53,71,0,42,100,71,0,0,0,0,16,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,32,1,0,0,64,1,0,0,96,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,64,2,0,0,128,2,0,0,192,2,0,0,0,3,0,0,128,3,0,0,0,4,0,0,128,4,0,0,0,5,0,0,128,5,0,0,0,6,0,0,128,6,0,0,0,7,0,0,128,7,0,0,0,8,0,0,0,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,0,0,126,64,0,0,74,64,0,0,32,64,0,0,0,64,0,0,204,63,0,0,160,63,0,0,128,63,0,0,72,63,0,0,32,63,0,0,0,63,0,0,208,62,0,0,160,62,0,0,128,62,0,0,64,62,0,0,32,62,0,0,0,0,2,8,12,16,18,20,22,23,24,25,26,27,28,29,30,31,8,12,16,18,20,22,23,24,25,26,27,28,29,30,31,32,0,8,12,16,18,20,22,23,24,25,26,27,28,29,30,31,32,0,0,0,0,0,0,0,0,56,24,63,0,4,53,63,0,68,87,63,0,0,128,63,0,56,152,63,0,4,181,63,0,68,215,63,0,0,0,64,0,56,24,64,0,4,53,64,0,68,87,64,0,0,128,64,0,56,152,64,0,4,181,64,0,68,215,64,0,0,0,65,0,56,24,65,0,4,53,65,0,68,87,65,0,0,128,65,0,56,152,65,0,4,181,65,0,68,215,65,0,0,0,66,0,56,24,66,0,4,53,66,0,68,87,66,0,0,128,66,0,56,152,66,0,4,181,66,0,68,215,66,0,0,0,67,0,56,24,67,0,4,53,67,0,68,87,67,0,0,128,67,0,56,152,67,0,4,181,67,0,68,215,67,0,0,0,68,0,56,24,68,0,4,53,68,0,68,87,68,0,0,128,68,0,56,152,68,0,4,181,68,0,68,215,68,0,0,0,69,0,56,24,69,0,4,53,69,0,68,87,69,0,0,128,69,0,56,152,69,0,4,181,69,0,68,215,69,0,0,0,70,0,56,24,70,0,4,53,70,0,68,87,70,0,0,128,70,0,56,152,70,0,4,181,70,0,68,215,70,0,0,0,71,0,92,135,61,0,92,7,62,0,10,75,62,0,92,135,62,0,52,169,62,0,10,203,62,0,226,236,62,0,92,7,63,0,72,24,63,0,52,41,63,0,30,58,63,0,10,75,63,0,246,91,63,0,226,108,63,0,204,125,63,0,92,135,63,3,0,67,0,99,0,35,0,51,0,115,0,83,0,19,0,27,0,91,0,123,0,59,0,43,0,107,0,75,0,11,0,15,0,79,0,111,0,47,0,63,0,127,0,95,0,31,0,23,0,87,0,119,0,55,0,39,0,103,0,71,0,7,0,5,0,69,0,101,0,37,0,53,0,117,0,85,0,21,0,29,0,93,0,125,0,61,0,45,0,109,0,77,0,13,0,9,0,73,0,105,0,41,0,57,0,121,0,89,0,25,0,17,0,81,0,113,0,49,0,33,0,97,0,65,0,1,0,0,0,64,0,96,0,32,0,48,0,112,0,80,0,16,0,24,0,88,0,120,0,56,0,40,0,104,0,72,0,8,0,12,0,76,0,108,0,44,0,60,0,124,0,92,0,28,0,20,0,84,0,116,0,52,0,36,0,100,0,68,0,4,0,6,0,70,0,102,0,38,0,54,0,118,0,86,0,22,0,30,0,94,0,126,0,62,0,46,0,110,0,78,0,14,0,10,0,74,0,106,0,42,0,58,0,122,0,90,0,26,0,18,0,82,0,114,0,50,0,34,0,98,0,66,0,2,0,0,0,64,0,96,0,32,0,48,0,112,0,80,0,16,0,24,0,88,0,120,0,56,0,40,0,104,0,72,0,8,0,12,0,76,0,108,0,44,0,60,0,124,0,92,0,28,0,20,0,84,0,116,0,52,0,36,0,100,0,68,0,4,0,6,0,70,0,102,0,38,0,54,0,118,0,86,0,22,0,30,0,94,0,126,0,62,0,46,0,110,0,78,0,14,0,10,0,74,0,106,0,42,0,58,0,122,0,90,0,26,0,18,0,82,0,114,0,50,0,34,0,98,0,66,0,2,0,3,0,67,0,99,0,35,0,51,0,115,0,83,0,19,0,27,0,91,0,123,0,59,0,43,0,107,0,75,0,11,0,15,0,79,0,111,0,47,0,63,0,127,0,95,0,31,0,23,0,87,0,119,0,55,0,39,0,103,0,71,0,7,0,5,0,69,0,101,0,37,0,53,0,117,0,85,0,21,0,29,0,93,0,125,0,61,0,45,0,109,0,77,0,13,0,9,0,73,0,105,0,41,0,57,0,121,0,89,0,25,0,17,0,81,0,113,0,49,0,33,0,97,0,65,0,1,0,250,255,255,255,251,255,255,255,252,255,255,255,253,255,255,255,254,255,255,255,255,255,255,255,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,67,2,215,0,44,2,247,0,49,2,86,3,237,0,146,2,10,0,59,3,148,2,140,1,9,0,19,0,146,0,221,0,16,177,255,63,172,58,253,63,252,83,248,63,7,9,241,63,219,107,231,63,24,148,219,63,2,159,205,63,247,174,189,63,74,235,171,63,195,127,152,63,65,156,131,63,129,232,90,63,212,124,44,63,205,207,248,62,133,64,150,62,48,251,200,61,0,0,0,0,16,0,0,0,32,0,0,0,8,0,0,0,24,0,0,0,40,0,0,0,24,0,0,0,40,0,0,0,8,0,0,0,7,0,0,0,23,0,0,0,39,0,0,0,31,0,0,0,47,0,0,0,15,0,0,0,15,0,0,0,31,0,0,0,47,0,0,0,32,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,4,4,5,5,6,7,8,9,10,11,12,13,14,15,0,0,0,0,0,0,0,0,0,1,1,2,2,2,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,112,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,32,1,0,0,64,1,0,0,96,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,64,2,0,0,128,2,0,0,192,2,0,0,0,3,0,0,128,3,0,0,0,4,0,0,128,4,0,0,0,5,0,0,128,5,0,0,0,6,0,0,128,6,0,0,0,7,0,0,128,7,0,0,0,8,0,0,0,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,64,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,5,4,1,0,1,2,3,3,0,4,2,4,0,1,2,1,0,4,3,3,0,2,1,0,3,1,2,4,0,1,2,0,3,2,1,0,1,2,3,0,1,2,4,0,1,2,3,1,4,2,0,0,1,2,3,0,0,1,0,18,0,5,0,0,0,0,0,19,0,5,0,20,0,5,0,100,0,7,0,0,0,0,0,101,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,5,0,102,0,7,0,0,0,0,0,103,0,7,0,22,0,5,0,238,0,8,0,0,0,0,0,104,0,7,0,105,0,7,0,230,1,9,0,0,0,0,0,230,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,0,7,0,231,1,9,0,0,0,0,0,231,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,5,0,0,0,1,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,0,0,1,7,0,0,0,0,0,0,1,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,7,0,3,0,0,0,0,0,1,2,6,7,0,0,1,0,4,0,3,0,12,0,4,0,30,0,5,0,31,0,5,0,13,0,4,0,14,0,4,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,7,7,7,2,2,5,5,6,6,3,4,0,0,1,0,4,0,3,0,12,0,4,0,13,0,4,0,30,0,5,0,31,0,5,0,14,0,4,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,7,7,7,7,2,2,3,3,6,6,4,5,56,9,0,0,88,9,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,96,9,0,0,128,9,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,136,9,0,0,168,9,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,200,9,0,0,232,9,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,2,0,2,0,3,0,12,0,4,0,224,0,8,0,225,0,8,0,226,0,8,0,227,0,8,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,228,0,8,0,229,0,8,0,230,0,8,0,13,0,4,0,3,0,3,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,3,3,4,4,5,5,6,6,57,57,58,58,59,59,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,0,0,2,0,2,0,3,0,3,0,3,0,12,0,4,0,224,0,8,0,225,0,8,0,226,0,8,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,227,0,8,0,228,0,8,0,229,0,8,0,230,0,8,0,13,0,4,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,4,4,5,5,6,6,57,57,58,58,59,59,60,60,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,0,0,1,0,4,0,3,0,24,0,5,0,25,0,5,0,112,0,7,0,202,1,9,0,203,1,9,0,204,1,9,0,205,1,9,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,228,0,8,0,113,0,7,0,26,0,5,0,27,0,5,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,4,4,4,4,60,60,60,60,59,59,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,0,0,2,0,2,0,3,0,3,0,3,0,24,0,5,0,25,0,5,0,112,0,7,0,204,1,9,0,205,1,9,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,113,0,7,0,114,0,7,0,26,0,5,0,27,0,5,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,5,5,5,5,58,58,58,58,59,59,59,59,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,2,2,2,2,12,12,12,12,3,4,5,6,7,9,10,11,0,0,2,0,2,0,3,0,12,0,4,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,60,0,6,0,0,0,0,0,61,0,6,0,62,0,6,0,63,0,6,0,13,0,4,0,3,0,3,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,3,3,3,3,13,13,13,13,4,5,6,7,9,10,11,12,0,0,2,0,2,0,3,0,3,0,3,0,12,0,4,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,0,0,0,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,13,0,4,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,3,3,3,3,13,13,13,13,4,5,6,7,9,10,11,12,0,0,1,0,4,0,3,0,12,0,4,0,28,0,5,0,120,0,7,0,121,0,7,0,122,0,7,0,123,0,7,0,0,0,0,0,124,0,7,0,125,0,7,0,126,0,7,0,127,0,7,0,29,0,5,0,13,0,4,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,3,3,3,3,3,3,3,3,13,13,13,13,13,13,13,13,4,4,4,4,12,12,12,12,5,5,11,11,6,7,9,10,0,0,2,0,2,0,3,0,3,0,3,0,12,0,4,0,28,0,5,0,60,0,6,0,124,0,7,0,125,0,7,0,0,0,0,0,126,0,7,0,127,0,7,0,61,0,6,0,29,0,5,0,13,0,4,0,4,0,3,0,5,0,3,0,104,10,0,0,104,11,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,104,13,0,0,104,14,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,104,16,0,0,104,17,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,104,19,0,0,104,20,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,168,22,0,0,104,22,0,0,0,0,0,0,16,0,64,0,6,0,0,0,0,0,0,0,40,23,0,0,232,22,0,0,0,0,0,0,16,0,64,0,6,0,0,0,0,0,0,0,232,23,0,0,104,23,0,0,0,0,0,0,16,0,128,0,7,0,0,0,0,0,0,0,168,24,0,0,40,24,0,0,0,0,0,0,16,0,128,0,7,0,0,0,0,0,0,0,0,0,1,0,2,0,2,0,6,0,3,0,7,0,3,0,0,0,0,0,1,1,2,3,0,0,2,0,2,0,3,0,3,0,3,0,4,0,3,0,5,0,3,0,6,0,3,0,14,0,4,0,15,0,4,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,7,0,0,0,0,1,1,2,2,3,3,6,6,7,7,4,5,0,0,2,0,2,0,3,0,3,0,3,0,4,0,3,0,14,0,4,0,15,0,4,0,5,0,3,0,6,0,3,0,0,0,1,0,4,0,3,0,10,0,4,0,11,0,4,0,12,0,4,0,13,0,4,0,14,0,4,0,15,0,4,0,0,0,0,0,0,0,0,0,1,1,2,3,4,5,6,7,168,25,0,0,184,25,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,192,25,0,0,224,25,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,7,0,0,26,0,0,240,25,0,0,0,0,0,0,8,0,16,0,4,0,0,0,0,0,7,0,168,25,0,0,184,25,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,3,0,32,26,0,0,64,26,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,7], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+8912);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+13008);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+23248);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+25120);
/* memory initializer */ allocate([158,0,8,0,138,1,9,0,139,1,9,0,140,1,9,0,0,0,0,0,141,1,9,0,142,1,9,0,143,1,9,0,159,0,8,0,63,0,7,0,21,0,6,0,5,0,5,0,22,0,6,0,23,0,6,0,64,0,7,0,160,0,8,0,161,0,8,0,144,1,9,0,145,1,9,0,146,1,9,0,0,0,0,0,147,1,9,0,148,1,9,0,149,1,9,0,162,0,8,0,163,0,8,0,65,0,7,0,24,0,6,0,66,0,7,0,67,0,7,0,164,0,8,0,165,0,8,0,150,1,9,0,151,1,9,0,152,1,9,0,153,1,9,0,0,0,0,0,154,1,9,0,155,1,9,0,212,3,10,0,156,1,9,0,166,0,8,0,167,0,8,0,68,0,7,0,168,0,8,0,169,0,8,0,170,0,8,0,157,1,9,0,158,1,9,0,213,3,10,0,159,1,9,0,214,3,10,0,0,0,0,0,215,3,10,0,160,1,9,0,216,3,10,0,161,1,9,0,162,1,9,0,171,0,8,0,172,0,8,0,163,1,9,0,164,1,9,0,165,1,9,0,166,1,9,0,217,3,10,0,218,3,10,0,219,3,10,0,220,3,10,0,0,0,0,0,221,3,10,0,222,3,10,0,223,3,10,0,224,3,10,0,167,1,9,0,168,1,9,0,169,1,9,0,173,0,8,0,174,0,8,0,170,1,9,0,171,1,9,0,172,1,9,0,225,3,10,0,226,3,10,0,227,3,10,0,0,0,0,0,228,3,10,0,229,3,10,0,230,3,10,0,173,1,9,0,174,1,9,0,175,1,9,0,175,0,8,0,176,0,8,0,176,1,9,0,177,1,9,0,178,1,9,0,231,3,10,0,232,3,10,0,233,3,10,0,252,7,11,0,0,0,0,0,253,7,11,0,234,3,10,0,235,3,10,0,179,1,9,0,180,1,9,0,181,1,9,0,182,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,0,8,0,183,1,9,0,184,1,9,0,185,1,9,0,236,3,10,0,237,3,10,0,238,3,10,0,254,7,11,0,0,0,0,0,255,7,11,0,239,3,10,0,240,3,10,0,186,1,9,0,187,1,9,0,188,1,9,0,189,1,9,0,178,0,8,0,179,0,8,0,190,1,9,0,191,1,9,0,192,1,9,0,193,1,9,0,241,3,10,0,242,3,10,0,0,0,0,0,243,3,10,0,244,3,10,0,245,3,10,0,194,1,9,0,195,1,9,0,196,1,9,0,180,0,8,0,197,1,9,0,198,1,9,0,199,1,9,0,200,1,9,0,246,3,10,0,247,3,10,0,248,3,10,0,249,3,10,0,0,0,0,0,250,3,10,0,251,3,10,0,252,3,10,0,201,1,9,0,202,1,9,0,203,1,9,0,204,1,9,0,181,0,8,0,182,0,8,0,183,0,8,0,205,1,9,0,206,1,9,0,253,3,10,0,207,1,9,0,208,1,9,0,0,0,0,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,184,0,8,0,185,0,8,0,69,0,7,0,70,0,7,0,186,0,8,0,187,0,8,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,0,0,0,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,188,0,8,0,189,0,8,0,71,0,7,0,25,0,6,0,26,0,6,0,72,0,7,0,190,0,8,0,191,0,8,0,222,1,9,0,223,1,9,0,224,1,9,0,0,0,0,0,225,1,9,0,226,1,9,0,227,1,9,0,192,0,8,0,193,0,8,0,73,0,7,0,27,0,6,0,6,0,5,0,7,0,5,0,28,0,6,0,74,0,7,0,194,0,8,0,228,1,9,0,229,1,9,0,230,1,9,0,0,0,0,0,231,1,9,0,232,1,9,0,233,1,9,0,195,0,8,0,75,0,7,0,29,0,6,0,8,0,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+35360);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+37328);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+44240);
/* memory initializer */ allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,10,10,10,10,10,10,10,10,18,18,18,18,18,18,18,18,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,33,33,33,33,33,33,33,33,37,37,37,37,37,37,37,37,40,40,40,40,40,40,40,40,69,69,69,69,69,69,69,69,72,72,72,72,72,72,72,72,81,81,81,81,81,81,81,81,85,85,85,85,85,85,85,85,88,88,88,88,88,88,88,88,100,100,100,100,100,100,100,100,132,132,132,132,132,132,132,132,148,148,148,148,148,148,148,148,160,160,160,160,160,160,160,160,164,164,164,164,164,164,164,164,41,41,41,41,42,42,42,42,66,66,66,66,70,70,70,70,73,73,73,73,74,74,74,74,82,82,82,82,86,86,86,86,89,89,89,89,90,90,90,90,97,97,97,97,101,101,101,101,104,104,104,104,105,105,105,105,129,129,129,129,133,133,133,133,145,145,145,145,149,149,149,149,168,168,168,168,34,34,38,38,98,98,102,102,106,106,130,130,134,134,136,136,137,137,146,146,152,152,153,153,161,161,165,165,169,169,138,150,154,162,166,170,0,0,1,0,8,0,4,0,44,0,6,0,0,0,0,0,20,0,5,0,45,0,6,0,100,0,7,0,0,0,0,0,46,0,6,0,101,0,7,0,224,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,5,0,102,0,7,0,225,0,8,0,0,0,0,0,47,0,6,0,103,0,7,0,226,0,8,0,0,0,0,0,104,0,7,0,227,0,8,0,228,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,0,7,0,229,0,8,0,238,3,10,0,0,0,0,0,106,0,7,0,230,0,8,0,239,3,10,0,0,0,0,0,231,0,8,0,228,1,9,0,229,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,4,0,107,0,7,0,230,1,9,0,0,0,0,0,108,0,7,0,232,0,8,0,231,1,9,0,0,0,0,0,233,0,8,0,232,1,9,0,233,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,6,0,234,0,8,0,234,1,9,0,0,0,0,0,109,0,7,0,235,0,8,0,235,1,9,0,0,0,0,0,236,0,8,0,236,1,9,0,237,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,110,0,7,0,238,1,9,0,240,3,10,0,0,0,0,0,237,0,8,0,239,1,9,0,241,3,10,0,0,0,0,0,240,1,9,0,241,1,9,0,242,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,6,0,242,1,9,0,243,3,10,0,0,0,0,0,238,0,8,0,243,1,9,0,244,3,10,0,0,0,0,0,245,3,10,0,246,3,10,0,250,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,7,0,244,1,9,0,247,3,10,0,0,0,0,0,239,0,8,0,245,1,9,0,251,7,11,0,0,0,0,0,248,3,10,0,249,3,10,0,252,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,8,0,250,3,10,0,253,7,11,0,0,0,0,0,241,0,8,0,251,3,10,0,254,7,11,0,0,0,0,0,246,1,9,0,252,3,10,0,255,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,7,7,7,7,7,7,7,7,19,19,19,19,19,19,19,19,29,29,29,29,29,29,29,29,31,31,31,31,31,31,31,31,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,40,40,40,40,40,40,40,40,74,74,74,74,74,74,74,74,77,77,77,77,77,77,77,77,83,83,83,83,83,83,83,83,87,87,87,87,87,87,87,87,93,93,93,93,93,93,93,93,102,102,102,102,102,102,102,102,110,110,110,110,110,110,110,110,113,113,113,113,113,113,113,113,116,116,116,116,116,116,116,116,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,153,153,153,153,153,153,153,153,161,161,161,161,161,161,161,161,164,164,164,164,164,164,164,164,166,166,166,166,166,166,166,166,169,169,169,169,169,169,169,169,178,178,178,178,178,178,178,178,181,181,181,181,181,181,181,181,193,193,193,193,193,193,193,193,200,200,200,200,200,200,200,200,208,208,208,208,208,208,208,208,209,209,209,209,209,209,209,209,213,213,213,213,213,213,213,213,233,233,233,233,233,233,233,233,3,3,3,3,10,10,10,10,11,11,11,11,13,13,13,13,14,14,14,14,26,26,26,26,27,27,27,27,28,28,28,28,30,30,30,30,38,38,38,38,39,39,39,39,42,42,42,42,44,44,44,44,45,45,45,45,48,48,48,48,49,49,49,49,52,52,52,52,53,53,53,53,54,54,54,54,57,57,57,57,61,61,61,61,67,67,67,67,71,71,71,71,75,75,75,75,76,76,76,76,91,91,91,91,92,92,92,92,94,94,94,94,95,95,95,95,98,98,98,98,106,106,106,106,109,109,109,109,111,111,111,111,112,112,112,112,115,115,115,115,118,118,118,118,119,119,119,119,122,122,122,122,124,124,124,124,125,125,125,125,130,130,130,130,131,131,131,131,134,134,134,134,135,135,135,135,139,139,139,139,141,141,141,141,143,143,143,143,146,146,146,146,151,151,151,151,155,155,155,155,157,157,157,157,158,158,158,158,162,162,162,162,165,165,165,165,167,167,167,167,171,171,171,171,175,175,175,175,177,177,177,177,180,180,180,180,182,182,182,182,187,187,187,187,192,192,192,192,196,196,196,196,197,197,197,197,214,214,214,214,222,222,222,222,224,224,224,224,225,225,225,225,226,226,226,226,229,229,229,229,230,230,230,230,235,235,235,235,237,237,237,237,240,240,240,240,241,241,241,241,244,244,244,244,245,245,245,245,246,246,246,246,248,248,248,248,252,252,252,252,254,254,254,254,43,43,46,46,47,47,50,50,56,56,60,60,63,63,78,78,99,99,103,103,107,107,108,108,117,117,123,123,126,126,138,138,140,140,152,152,156,156,168,168,170,170,174,174,176,176,184,184,185,185,194,194,195,195,198,198,201,201,206,206,218,218,220,220,12,15,51,55,58,59,62,79,114,127,142,147,159,163,172,173,179,183,186,188,189,190,191,199,202,203,204,205,207,210,211,215,216,217,219,221,223,227,231,232,234,236,238,239,242,243,247,249,250,251,253,255,0,0,3,0,6,0,5,0,184,0,8,0,146,3,10,0,2,0,4,0,7,0,5,0,78,0,7,0,168,1,9,0,79,0,7,0,185,0,8,0,147,3,10,0,148,3,10,0,204,15,12,0,149,3,10,0,150,3,10,0,205,15,12,0,8,0,5,0,9,0,5,0,186,0,8,0,169,1,9,0,10,0,5,0,11,0,5,0,80,0,7,0,187,0,8,0,188,0,8,0,81,0,7,0,151,3,10,0,152,3,10,0,153,3,10,0,170,1,9,0,154,3,10,0,171,1,9,0,189,0,8,0,190,0,8,0,172,1,9,0,173,1,9,0,82,0,7,0,191,0,8,0,155,3,10,0,156,3,10,0,174,1,9,0,192,0,8,0,157,3,10,0,198,7,11,0,158,3,10,0,159,3,10,0,199,7,11,0,200,7,11,0,160,3,10,0,161,3,10,0,201,7,11,0,206,15,12,0,162,3,10,0,163,3,10,0,164,3,10,0,207,15,12,0,202,7,11,0,165,3,10,0,208,15,12,0,209,15,12,0,203,7,11,0,166,3,10,0,210,15,12,0,204,7,11,0,12,0,5,0,13,0,5,0,193,0,8,0,167,3,10,0,14,0,5,0,15,0,5,0,194,0,8,0,168,3,10,0,83,0,7,0,195,0,8,0,175,1,9,0,169,3,10,0,170,3,10,0,176,1,9,0,205,7,11,0,211,15,12,0,16,0,5,0,17,0,5,0,196,0,8,0,177,1,9,0,18,0,5,0,38,0,6,0,84,0,7,0,178,1,9,0,197,0,8,0,198,0,8,0,199,0,8,0,171,3,10,0,172,3,10,0,179,1,9,0,173,3,10,0,174,3,10,0,200,0,8,0,201,0,8,0,175,3,10,0,206,7,11,0,85,0,7,0,202,0,8,0,180,1,9,0,207,7,11,0,203,0,8,0,86,0,7,0,176,3,10,0,208,7,11,0,209,7,11,0,177,3,10,0,181,1,9,0,178,3,10,0,179,3,10,0,182,1,9,0,212,15,12,0,180,3,10,0,183,1,9,0,210,7,11,0,181,3,10,0,182,3,10,0,184,1,9,0,185,1,9,0,183,3,10,0,211,7,11,0,184,3,10,0,185,3,10,0,212,7,11,0,213,15,12,0,87,0,7,0,204,0,8,0,186,3,10,0,187,3,10,0,205,0,8,0,88,0,7,0,188,3,10,0,189,3,10,0,186,1,9,0,187,1,9,0,213,7,11,0,190,3,10,0,214,7,11,0,191,3,10,0,214,15,12,0,192,3,10,0,89,0,7,0,90,0,7,0,193,3,10,0,215,15,12,0,91,0,7,0,206,0,8,0,207,0,8,0,194,3,10,0,215,7,11,0,188,1,9,0,208,0,8,0,195,3,10,0,216,7,11,0,196,3,10,0,197,3,10,0,216,15,12,0,209,0,8,0,189,1,9,0,198,3,10,0,217,15,12,0,190,1,9,0,199,3,10,0,191,1,9,0,200,3,10,0,217,7,11,0,192,1,9,0,218,7,11,0,201,3,10,0,218,15,12,0,219,15,12,0,219,7,11,0,202,3,10,0,220,7,11,0,203,3,10,0,193,1,9,0,220,15,12,0,204,3,10,0,194,1,9,0,205,3,10,0,221,15,12,0,221,7,11,0,222,7,11,0,222,15,12,0,206,3,10,0,223,15,12,0,224,15,12,0,225,15,12,0,226,15,12,0,207,3,10,0,195,1,9,0,223,7,11,0,224,7,11,0,208,3,10,0,209,3,10,0,225,7,11,0,227,15,12,0,196,1,9,0,226,7,11,0,228,15,12,0,229,15,12,0,230,15,12,0,231,15,12,0,227,7,11,0,232,15,12,0,197,1,9,0,198,1,9,0,233,15,12,0,234,15,12,0,210,0,8,0,199,1,9,0,210,3,10,0,235,15,12,0,236,15,12,0,237,15,12,0,228,7,11,0,238,15,12,0,229,7,11,0,239,15,12,0,211,3,10,0,240,15,12,0,212,3,10,0,213,3,10,0,214,3,10,0,241,15,12,0,211,0,8,0,215,3,10,0,216,3,10,0,242,15,12,0,243,15,12,0,200,1,9,0,244,15,12,0,217,3,10,0,245,15,12,0,218,3,10,0,246,15,12,0,247,15,12,0,219,3,10,0,220,3,10,0,248,15,12,0,249,15,12,0,221,3,10,0,222,3,10,0,223,3,10,0,250,15,12,0,224,3,10,0,251,15,12,0,252,15,12,0,253,15,12,0,225,3,10,0,254,15,12,0,226,3,10,0,255,15,12,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,2,2,2,2,3,3,4,5,2,0,2,0,0,0,1,0,6,0,3,0,14,0,4,0,30,0,5,0,31,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,13,13,13,13,13,13,13,13,18,18,18,18,18,18,18,18,30,30,30,30,30,30,30,30,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,238,238,238,238,238,238,238,238,239,239,239,239,239,239,239,239,242,242,242,242,242,242,242,242,254,254,254,254,254,254,254,254,45,45,45,45,52,52,52,52,63,63,63,63,64,64,64,64,208,208,208,208,210,210,210,210,211,211,211,211,243,243,243,243,253,253,253,253,5,5,6,6,7,7,9,9,11,11,19,19,20,20,25,25,26,26,28,28,29,29,36,36,42,42,44,44,50,50,51,51,62,62,66,66,67,67,75,75,77,77,79,79,80,80,81,81,84,84,94,94,97,97,99,99,101,101,106,106,108,108,109,109,111,111,117,117,124,124,127,127,144,144,146,146,148,148,149,149,150,150,159,159,160,160,162,162,163,163,164,164,173,173,174,174,175,175,176,176,178,178,186,186,190,190,191,191,192,192,193,193,194,194,195,195,196,196,197,197,204,204,205,205,207,207,209,209,212,212,214,214,219,219,220,220,222,222,223,223,228,228,230,230,236,236,237,237,247,247,10,12,21,22,23,27,35,37,38,39,41,43,53,54,55,57,58,59,60,61,65,68,69,70,71,73,74,76,78,82,83,85,86,87,89,90,91,92,93,95,96,98,100,102,103,105,107,110,112,113,114,115,116,118,119,121,122,123,125,126,145,147,151,153,154,155,156,157,158,161,165,166,167,169,170,171,172,177,179,180,181,182,183,185,187,188,189,198,199,201,202,203,206,213,215,217,218,221,229,231,233,234,235,244,245,246,249,250,251,252,0,0,2,0,12,0,5,0,30,0,6,0,72,0,7,0,73,0,7,0,126,1,9,0,127,1,9,0,128,1,9,0,0,0,0,0,129,1,9,0,146,3,10,0,130,1,9,0,147,3,10,0,74,0,7,0,31,0,6,0,4,0,4,0,13,0,5,0,32,0,6,0,75,0,7,0,131,1,9,0,132,1,9,0,148,3,10,0,149,3,10,0,150,3,10,0,0,0,0,0,133,1,9,0,134,1,9,0,151,3,10,0,135,1,9,0,136,1,9,0,76,0,7,0,33,0,6,0,77,0,7,0,78,0,7,0,79,0,7,0,152,3,10,0,137,1,9,0,153,3,10,0,154,3,10,0,155,3,10,0,0,0,0,0,156,3,10,0,138,1,9,0,157,3,10,0,139,1,9,0,182,0,8,0,80,0,7,0,81,0,7,0,82,0,7,0,83,0,7,0,140,1,9,0,141,1,9,0,183,0,8,0,158,3,10,0,159,3,10,0,160,3,10,0,0,0,0,0,161,3,10,0,162,3,10,0,163,3,10,0,164,3,10,0,165,3,10,0,142,1,9,0,184,0,8,0,185,0,8,0,166,3,10,0,143,1,9,0,144,1,9,0,167,3,10,0,168,3,10,0,169,3,10,0,170,3,10,0,0,0,0,0,171,3,10,0,172,3,10,0,145,1,9,0,173,3,10,0,146,1,9,0,174,3,10,0,147,1,9,0,148,1,9,0,149,1,9,0,175,3,10,0,176,3,10,0,150,1,9,0,177,3,10,0,178,3,10,0,179,3,10,0,0,0,0,0,180,3,10,0,181,3,10,0,182,3,10,0,183,3,10,0,184,3,10,0,151,1,9,0,185,3,10,0,186,3,10,0,152,1,9,0,187,3,10,0,153,1,9,0,188,3,10,0,154,1,9,0,189,3,10,0,190,3,10,0,0,0,0,0,191,3,10,0,155,1,9,0,192,3,10,0,156,1,9,0,157,1,9,0,193,3,10,0,158,1,9,0,194,3,10,0,195,3,10,0,196,3,10,0,197,3,10,0,198,3,10,0,159,1,9,0,199,3,10,0,200,3,10,0,0,0,0,0,201,3,10,0,202,3,10,0,203,3,10,0,160,1,9,0,204,3,10,0,205,3,10,0,161,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,162,1,9,0,206,3,10,0,163,1,9,0,207,3,10,0,164,1,9,0,165,1,9,0,166,1,9,0,208,3,10,0,0,0,0,0,209,3,10,0,210,3,10,0,211,3,10,0,212,3,10,0,213,3,10,0,214,3,10,0,167,1,9,0,168,1,9,0,215,3,10,0,169,1,9,0,170,1,9,0,171,1,9,0,216,3,10,0,217,3,10,0,218,3,10,0,0,0,0,0,219,3,10,0,220,3,10,0,221,3,10,0,222,3,10,0,172,1,9,0,173,1,9,0,174,1,9,0,175,1,9,0,223,3,10,0,176,1,9,0,224,3,10,0,225,3,10,0,226,3,10,0,227,3,10,0,228,3,10,0,0,0,0,0,229,3,10,0,177,1,9,0,230,3,10,0,231,3,10,0,232,3,10,0,178,1,9,0,179,1,9,0,180,1,9,0,181,1,9,0,182,1,9,0,183,1,9,0,184,1,9,0,185,1,9,0,233,3,10,0,234,3,10,0,0,0,0,0,235,3,10,0,236,3,10,0,237,3,10,0,186,1,9,0,187,1,9,0,238,3,10,0,188,1,9,0,186,0,8,0,189,1,9,0,187,0,8,0,188,0,8,0,190,1,9,0,239,3,10,0,191,1,9,0,240,3,10,0,0,0,0,0,241,3,10,0,242,3,10,0,192,1,9,0,193,1,9,0,243,3,10,0,194,1,9,0,195,1,9,0,34,0,6,0,84,0,7,0,85,0,7,0,86,0,7,0,196,1,9,0,244,3,10,0,197,1,9,0,245,3,10,0,0,0,0,0,246,3,10,0,247,3,10,0,248,3,10,0,198,1,9,0,199,1,9,0,87,0,7,0,88,0,7,0,5,0,4,0,35,0,6,0,89,0,7,0,189,0,8,0,249,3,10,0,250,3,10,0,251,3,10,0,200,1,9,0,0,0,0,0,252,3,10,0,253,3,10,0,254,3,10,0,255,3,10,0,190,0,8,0,90,0,7,0,14,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+53672);
/* memory initializer */ allocate([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,44,44,44,44,44,44,44,44,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,96,96,96,96,96,96,96,96,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,112,112,112,112,112,112,112,112,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,141,141,141,141,141,141,141,141,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,162,162,162,162,162,162,162,162,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,208,208,208,208,208,208,208,208,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,216,216,216,216,216,216,216,216,217,217,217,217,217,217,217,217,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,231,231,231,231,231,231,231,231,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,8,8,8,8,9,9,9,9,10,10,10,10,12,12,12,12,14,14,14,14,15,15,15,15,27,27,27,27,42,42,42,42,43,43,43,43,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,73,73,73,73,74,74,74,74,75,75,75,75,89,89,89,89,90,90,90,90,91,91,91,91,92,92,92,92,95,95,95,95,103,103,103,103,104,104,104,104,105,105,105,105,106,106,106,106,108,108,108,108,111,111,111,111,119,119,119,119,120,120,120,120,121,121,121,121,122,122,122,122,124,124,124,124,127,127,127,127,128,128,128,128,134,134,134,134,135,135,135,135,136,136,136,136,137,137,137,137,140,140,140,140,142,142,142,142,143,143,143,143,144,144,144,144,147,147,147,147,148,148,148,148,149,149,149,149,150,150,150,150,151,151,151,151,152,152,152,152,157,157,157,157,158,158,158,158,159,159,159,159,160,160,160,160,161,161,161,161,163,163,163,163,164,164,164,164,165,165,165,165,166,166,166,166,173,173,173,173,174,174,174,174,175,175,175,175,177,177,177,177,178,178,178,178,179,179,179,179,180,180,180,180,181,181,181,181,189,189,189,189,190,190,190,190,191,191,191,191,192,192,192,192,195,195,195,195,196,196,196,196,197,197,197,197,198,198,198,198,199,199,199,199,200,200,200,200,201,201,201,201,205,205,205,205,206,206,206,206,218,218,218,218,219,219,219,219,220,220,220,220,221,221,221,221,222,222,222,222,224,224,224,224,232,232,232,232,233,233,233,233,234,234,234,234,235,235,235,235,240,240,240,240,244,244,244,244,245,245,245,245,246,246,246,246,247,247,247,247,248,248,248,248,249,249,249,249,250,250,250,250,11,11,107,107,123,123,138,138,139,139,153,153,154,154,155,155,156,156,167,167,168,168,169,169,170,170,171,171,172,172,176,176,182,182,183,183,184,184,185,185,188,188,202,202,203,203,204,204,207,207,223,223,236,236,237,237,238,238,239,239,251,251,252,252,253,253,254,254,255,255,186,187,0,0,3,0,2,0,4,0,10,0,5,0,70,0,7,0,71,0,7,0,166,0,8,0,130,1,9,0,131,1,9,0,142,3,10,0,143,3,10,0,144,3,10,0,220,7,11,0,145,3,10,0,132,1,9,0,146,3,10,0,147,3,10,0,3,0,4,0,4,0,4,0,11,0,5,0,30,0,6,0,31,0,6,0,72,0,7,0,167,0,8,0,168,0,8,0,133,1,9,0,134,1,9,0,135,1,9,0,148,3,10,0,136,1,9,0,169,0,8,0,137,1,9,0,138,1,9,0,12,0,5,0,13,0,5,0,14,0,5,0,32,0,6,0,73,0,7,0,170,0,8,0,171,0,8,0,172,0,8,0,139,1,9,0,140,1,9,0,149,3,10,0,150,3,10,0,141,1,9,0,173,0,8,0,142,1,9,0,143,1,9,0,74,0,7,0,33,0,6,0,34,0,6,0,75,0,7,0,76,0,7,0,174,0,8,0,175,0,8,0,144,1,9,0,145,1,9,0,151,3,10,0,152,3,10,0,153,3,10,0,154,3,10,0,176,0,8,0,146,1,9,0,147,1,9,0,77,0,7,0,78,0,7,0,79,0,7,0,80,0,7,0,177,0,8,0,178,0,8,0,179,0,8,0,148,1,9,0,149,1,9,0,155,3,10,0,156,3,10,0,157,3,10,0,150,1,9,0,151,1,9,0,152,1,9,0,153,1,9,0,180,0,8,0,81,0,7,0,82,0,7,0,181,0,8,0,182,0,8,0,183,0,8,0,154,1,9,0,155,1,9,0,156,1,9,0,158,3,10,0,159,3,10,0,160,3,10,0,161,3,10,0,157,1,9,0,158,1,9,0,162,3,10,0,159,1,9,0,184,0,8,0,185,0,8,0,186,0,8,0,187,0,8,0,160,1,9,0,161,1,9,0,163,3,10,0,164,3,10,0,165,3,10,0,166,3,10,0,221,7,11,0,167,3,10,0,162,1,9,0,163,1,9,0,168,3,10,0,164,1,9,0,188,0,8,0,189,0,8,0,165,1,9,0,166,1,9,0,167,1,9,0,168,1,9,0,169,3,10,0,170,3,10,0,171,3,10,0,172,3,10,0,222,7,11,0,173,3,10,0,169,1,9,0,170,1,9,0,174,3,10,0,175,3,10,0,171,1,9,0,172,1,9,0,173,1,9,0,174,1,9,0,175,1,9,0,176,3,10,0,177,3,10,0,178,3,10,0,179,3,10,0,223,7,11,0,224,7,11,0,180,3,10,0,176,1,9,0,181,3,10,0,182,3,10,0,183,3,10,0,177,1,9,0,178,1,9,0,184,3,10,0,185,3,10,0,186,3,10,0,187,3,10,0,188,3,10,0,189,3,10,0,225,7,11,0,226,7,11,0,227,7,11,0,228,7,11,0,190,3,10,0,191,3,10,0,192,3,10,0,193,3,10,0,194,3,10,0,179,1,9,0,195,3,10,0,196,3,10,0,197,3,10,0,198,3,10,0,229,7,11,0,230,7,11,0,231,7,11,0,232,7,11,0,233,7,11,0,234,7,11,0,199,3,10,0,200,3,10,0,201,3,10,0,235,7,11,0,202,3,10,0,203,3,10,0,204,3,10,0,205,3,10,0,206,3,10,0,236,7,11,0,237,7,11,0,238,7,11,0,239,7,11,0,254,15,12,0,255,15,12,0,240,7,11,0,207,3,10,0,208,3,10,0,209,3,10,0,210,3,10,0,180,1,9,0,181,1,9,0,211,3,10,0,212,3,10,0,213,3,10,0,214,3,10,0,215,3,10,0,216,3,10,0,217,3,10,0,241,7,11,0,242,7,11,0,243,7,11,0,218,3,10,0,219,3,10,0,244,7,11,0,182,1,9,0,190,0,8,0,191,0,8,0,192,0,8,0,183,1,9,0,184,1,9,0,185,1,9,0,186,1,9,0,187,1,9,0,188,1,9,0,220,3,10,0,221,3,10,0,222,3,10,0,223,3,10,0,224,3,10,0,245,7,11,0,225,3,10,0,189,1,9,0,190,1,9,0,191,1,9,0,192,1,9,0,193,1,9,0,194,1,9,0,195,1,9,0,226,3,10,0,227,3,10,0,228,3,10,0,229,3,10,0,246,7,11,0,247,7,11,0,248,7,11,0,249,7,11,0,230,3,10,0,196,1,9,0,197,1,9,0,198,1,9,0,231,3,10,0,232,3,10,0,233,3,10,0,234,3,10,0,235,3,10,0,236,3,10,0,237,3,10,0,250,7,11,0,251,7,11,0,252,7,11,0,253,7,11,0,254,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,54,54,54,54,55,55,55,55,56,56,56,56,57,57,57,57,11,11,12,12,13,13,14,14,15,15,16,16,25,25,26,26,27,27,28,28,29,29,30,30,35,35,36,36,37,37,38,38,48,48,49,49,50,50,51,51,52,52,53,53,17,18,19,20,21,22,23,24,31,33,34,39,40,41,42,43,44,45,46,47,0,0,4,0,1,0,4,0,2,0,4,0,3,0,4,0,14,0,5,0,15,0,5,0,16,0,5,0,40,0,6,0,41,0,6,0,42,0,6,0,43,0,6,0,96,0,7,0,97,0,7,0,98,0,7,0,99,0,7,0,100,0,7,0,101,0,7,0,236,0,8,0,237,0,8,0,238,0,8,0,239,0,8,0,240,0,8,0,241,0,8,0,242,0,8,0,243,0,8,0,102,0,7,0,103,0,7,0,104,0,7,0,105,0,7,0,106,0,7,0,107,0,7,0,244,0,8,0,0,0,0,0,245,0,8,0,246,0,8,0,108,0,7,0,109,0,7,0,110,0,7,0,111,0,7,0,247,0,8,0,248,0,8,0,249,0,8,0,250,0,8,0,251,0,8,0,252,0,8,0,253,0,8,0,254,0,8,0,255,0,8,0,112,0,7,0,113,0,7,0,114,0,7,0,115,0,7,0,116,0,7,0,117,0,7,0,44,0,6,0,45,0,6,0,46,0,6,0,47,0,6,0,17,0,5,0,18,0,5,0,19,0,5,0,4,0,4,0,5,0,4,0,6,0,4], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+63912);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+70288);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+80528);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+90768);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+102968);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+114616);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+119736);
/* memory initializer */ allocate([53,53,53,53,54,54,54,54,55,55,55,55,13,13,14,14,15,15,16,16,17,17,18,18,19,19,45,45,46,46,47,47,48,48,49,49,50,50,20,21,22,23,24,40,41,42,43,44,0,0,3,0,1,0,3,0,6,0,4,0,16,0,5,0,17,0,5,0,40,0,6,0,41,0,6,0,42,0,6,0,43,0,6,0,96,0,7,0,97,0,7,0,98,0,7,0,99,0,7,0,238,0,8,0,239,0,8,0,240,0,8,0,241,0,8,0,242,0,8,0,243,0,8,0,244,0,8,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,100,0,7,0,101,0,7,0,102,0,7,0,103,0,7,0,104,0,7,0,105,0,7,0,106,0,7,0,0,0,0,0,107,0,7,0,108,0,7,0,109,0,7,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,245,0,8,0,246,0,8,0,247,0,8,0,248,0,8,0,249,0,8,0,250,0,8,0,114,0,7,0,115,0,7,0,116,0,7,0,117,0,7,0,118,0,7,0,44,0,6,0,45,0,6,0,46,0,6,0,47,0,6,0,18,0,5,0,19,0,5,0,7,0,4,0,2,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+129976);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+132328);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+140440);
/* memory initializer */ allocate([0,0,4,0,1,0,4,0,8,0,5,0,24,0,6,0,66,0,7,0,158,0,8,0,159,0,8,0,160,0,8,0,134,1,9,0,135,1,9,0,164,3,10,0,165,3,10,0,166,3,10,0,136,1,9,0,137,1,9,0,138,1,9,0,2,0,4,0,3,0,4,0,9,0,5,0,25,0,6,0,26,0,6,0,67,0,7,0,68,0,7,0,161,0,8,0,162,0,8,0,139,1,9,0,140,1,9,0,141,1,9,0,142,1,9,0,163,0,8,0,164,0,8,0,143,1,9,0,10,0,5,0,11,0,5,0,27,0,6,0,28,0,6,0,69,0,7,0,70,0,7,0,165,0,8,0,166,0,8,0,167,0,8,0,144,1,9,0,145,1,9,0,146,1,9,0,147,1,9,0,168,0,8,0,148,1,9,0,149,1,9,0,29,0,6,0,30,0,6,0,31,0,6,0,71,0,7,0,72,0,7,0,169,0,8,0,170,0,8,0,171,0,8,0,150,1,9,0,151,1,9,0,152,1,9,0,167,3,10,0,153,1,9,0,172,0,8,0,154,1,9,0,155,1,9,0,73,0,7,0,32,0,6,0,74,0,7,0,75,0,7,0,173,0,8,0,174,0,8,0,156,1,9,0,157,1,9,0,158,1,9,0,159,1,9,0,168,3,10,0,169,3,10,0,170,3,10,0,160,1,9,0,161,1,9,0,162,1,9,0,175,0,8,0,76,0,7,0,77,0,7,0,176,0,8,0,177,0,8,0,178,0,8,0,163,1,9,0,164,1,9,0,165,1,9,0,171,3,10,0,172,3,10,0,173,3,10,0,174,3,10,0,166,1,9,0,167,1,9,0,175,3,10,0,179,0,8,0,78,0,7,0,180,0,8,0,181,0,8,0,168,1,9,0,169,1,9,0,170,1,9,0,171,1,9,0,176,3,10,0,177,3,10,0,178,3,10,0,179,3,10,0,180,3,10,0,172,1,9,0,173,1,9,0,181,3,10,0,182,0,8,0,183,0,8,0,184,0,8,0,185,0,8,0,174,1,9,0,175,1,9,0,176,1,9,0,182,3,10,0,183,3,10,0,184,3,10,0,185,3,10,0,216,7,11,0,186,3,10,0,177,1,9,0,187,3,10,0,188,3,10,0,178,1,9,0,186,0,8,0,187,0,8,0,179,1,9,0,180,1,9,0,181,1,9,0,189,3,10,0,190,3,10,0,191,3,10,0,192,3,10,0,217,7,11,0,218,7,11,0,219,7,11,0,193,3,10,0,194,3,10,0,195,3,10,0,182,1,9,0,188,0,8,0,183,1,9,0,184,1,9,0,185,1,9,0,196,3,10,0,197,3,10,0,198,3,10,0,199,3,10,0,220,7,11,0,221,7,11,0,222,7,11,0,223,7,11,0,200,3,10,0,201,3,10,0,202,3,10,0,186,1,9,0,187,1,9,0,188,1,9,0,189,1,9,0,203,3,10,0,204,3,10,0,205,3,10,0,206,3,10,0,224,7,11,0,225,7,11,0,226,7,11,0,227,7,11,0,228,7,11,0,207,3,10,0,208,3,10,0,229,7,11,0,209,3,10,0,190,1,9,0,191,1,9,0,210,3,10,0,211,3,10,0,212,3,10,0,230,7,11,0,231,7,11,0,232,7,11,0,233,7,11,0,234,7,11,0,235,7,11,0,236,7,11,0,213,3,10,0,214,3,10,0,237,7,11,0,192,1,9,0,193,1,9,0,194,1,9,0,195,1,9,0,215,3,10,0,216,3,10,0,217,3,10,0,218,3,10,0,219,3,10,0,238,7,11,0,239,7,11,0,240,7,11,0,241,7,11,0,220,3,10,0,242,7,11,0,243,7,11,0,196,1,9,0,189,0,8,0,190,0,8,0,191,0,8,0,197,1,9,0,198,1,9,0,199,1,9,0,200,1,9,0,221,3,10,0,222,3,10,0,223,3,10,0,224,3,10,0,225,3,10,0,244,7,11,0,245,7,11,0,246,7,11,0,201,1,9,0,192,0,8,0,193,0,8,0,202,1,9,0,203,1,9,0,204,1,9,0,205,1,9,0,226,3,10,0,227,3,10,0,228,3,10,0,229,3,10,0,230,3,10,0,247,7,11,0,248,7,11,0,249,7,11,0,250,7,11,0,206,1,9,0,194,0,8,0,207,1,9,0,208,1,9,0,209,1,9,0,231,3,10,0,232,3,10,0,233,3,10,0,234,3,10,0,235,3,10,0,251,7,11,0,252,7,11,0,253,7,11,0,254,7,11,0,254,15,12,0,255,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,25,25,25,25,29,29,29,29,30,30,30,30,31,31,31,31,33,33,33,33,34,34,34,34,35,35,35,35,39,39,39,39,47,47,47,47,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,17,17,18,18,19,19,20,20,21,21,22,22,23,23,41,41,42,42,43,43,44,44,45,45,46,46,24,40,0,0,2,0,2,0,3,0,8,0,4,0,20,0,5,0,44,0,6,0,45,0,6,0,46,0,6,0,100,0,7,0,101,0,7,0,102,0,7,0,103,0,7,0,228,0,8,0,229,0,8,0,230,0,8,0,231,0,8,0,232,0,8,0,233,0,8,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,254,3,10,0,234,0,8,0,104,0,7,0,105,0,7,0,106,0,7,0,235,0,8,0,236,0,8,0,237,0,8,0,0,0,0,0,238,0,8,0,239,0,8,0,240,0,8,0,107,0,7,0,108,0,7,0,109,0,7,0,241,0,8,0,255,3,10,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,242,0,8,0,243,0,8,0,244,0,8,0,245,0,8,0,246,0,8,0,247,0,8,0,248,0,8,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,47,0,6,0,48,0,6,0,49,0,6,0,21,0,5,0,9,0,4,0,3,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+150680);
/* memory initializer */ allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,5,5,5,5,5,5,5,5,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,15,15,15,15,15,15,15,15,19,19,19,19,19,19,19,19,28,28,28,28,28,28,28,28,49,49,49,49,49,49,49,49,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,65,65,65,65,65,65,65,65,67,67,67,67,67,67,67,67,76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,112,112,112,112,112,112,112,112,193,193,193,193,193,193,193,193,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,208,208,208,208,208,208,208,208,240,240,240,240,240,240,240,240,17,17,17,17,20,20,20,20,29,29,29,29,55,55,55,55,60,60,60,60,68,68,68,68,116,116,116,116,204,204,204,204,220,220,220,220,21,21,23,23,31,31,53,53,61,61,63,63,71,71,77,77,79,79,83,83,84,84,92,92,113,113,115,115,119,119,124,124,199,199,205,205,209,209,211,211,212,212,221,221,244,244,252,252,69,81,85,87,93,95,117,125,127,197,207,213,215,223,241,243,245,247,253,255,0,0,1,0,8,0,4,0,0,0,0,0,9,0,4,0,10,0,4,0,224,1,9,0,0,0,0,0,225,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,4,0,226,1,9,0,0,0,0,0,227,1,9,0,12,0,4,0,230,3,10,0,0,0,0,0,228,1,9,0,231,3,10,0,222,7,11,0,0,0,0,0,223,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,229,1,9,0,232,3,10,0,0,0,0,0,224,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,4,0,230,1,9,0,0,0,0,0,231,1,9,0,232,1,9,0,225,7,11,0,0,0,0,0,233,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,234,3,10,0,226,7,11,0,0,0,0,0,227,7,11,0,28,0,5,0,233,1,9,0,0,0,0,0,234,1,9,0,235,3,10,0,236,15,12,0,0,0,0,0,228,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,1,9,0,229,7,11,0,0,0,0,0,230,7,11,0,236,1,9,0,237,15,12,0,0,0,0,0,231,7,11,0,232,7,11,0,238,15,12,0,0,0,0,0,239,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,233,7,11,0,240,15,12,0,0,0,0,0,241,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,1,9,0,234,7,11,0,0,0,0,0,235,7,11,0,236,3,10,0,242,15,12,0,0,0,0,0,236,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,7,11,0,243,15,12,0,0,0,0,0,244,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,5,0,238,1,9,0,0,0,0,0,239,1,9,0,240,1,9,0,245,15,12,0,0,0,0,0,238,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,3,10,0,239,7,11,0,0,0,0,0,246,15,12,0,241,1,9,0,240,7,11,0,0,0,0,0,241,7,11,0,242,7,11,0,247,15,12,0,0,0,0,0,248,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,238,3,10,0,243,7,11,0,0,0,0,0,249,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,242,1,9,0,250,15,12,0,0,0,0,0,251,15,12,0,244,7,11,0,252,15,12,0,0,0,0,0,253,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,7,11,0,254,15,12,0,0,0,0,0,255,15,12], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+155032);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+159128);
/* memory initializer */ allocate([65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,28,28,28,28,28,28,28,28,31,31,31,31,31,31,31,31,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,44,44,44,44,44,44,44,44,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,112,112,112,112,112,112,112,112,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,125,125,125,125,125,125,125,125,128,128,128,128,128,128,128,128,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,161,161,161,161,161,161,161,161,177,177,177,177,177,177,177,177,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,208,208,208,208,208,208,208,208,212,212,212,212,212,212,212,212,213,213,213,213,213,213,213,213,214,214,214,214,214,214,214,214,215,215,215,215,215,215,215,215,224,224,224,224,224,224,224,224,227,227,227,227,227,227,227,227,228,228,228,228,228,228,228,228,229,229,229,229,229,229,229,229,230,230,230,230,230,230,230,230,240,240,240,240,240,240,240,240,241,241,241,241,241,241,241,241,242,242,242,242,242,242,242,242,243,243,243,243,243,243,243,243,244,244,244,244,244,244,244,244,9,9,9,9,10,10,10,10,12,12,12,12,27,27,27,27,42,42,42,42,43,43,43,43,56,56,56,56,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,72,72,72,72,73,73,73,73,74,74,74,74,76,76,76,76,87,87,87,87,88,88,88,88,89,89,89,89,92,92,92,92,102,102,102,102,103,103,103,103,104,104,104,104,105,105,105,105,108,108,108,108,111,111,111,111,117,117,117,117,118,118,118,118,119,119,119,119,126,126,126,126,127,127,127,127,132,132,132,132,133,133,133,133,134,134,134,134,135,135,135,135,141,141,141,141,142,142,142,142,143,143,143,143,144,144,144,144,147,147,147,147,148,148,148,148,149,149,149,149,157,157,157,157,158,158,158,158,159,159,159,159,160,160,160,160,162,162,162,162,163,163,163,163,164,164,164,164,173,173,173,173,174,174,174,174,176,176,176,176,178,178,178,178,179,179,179,179,189,189,189,189,190,190,190,190,192,192,192,192,195,195,195,195,196,196,196,196,197,197,197,197,198,198,198,198,205,205,205,205,216,216,216,216,217,217,217,217,218,218,218,218,219,219,219,219,220,220,220,220,231,231,231,231,232,232,232,232,233,233,233,233,234,234,234,234,235,235,235,235,236,236,236,236,245,245,245,245,246,246,246,246,247,247,247,247,248,248,248,248,249,249,249,249,250,250,250,250,11,11,75,75,90,90,91,91,106,106,107,107,120,120,121,121,122,122,123,123,124,124,136,136,137,137,138,138,140,140,150,150,151,151,152,152,153,153,154,154,156,156,165,165,166,166,167,167,169,169,172,172,175,175,180,180,181,181,182,182,183,183,188,188,191,191,199,199,200,200,201,201,202,202,203,203,204,204,206,206,207,207,221,221,222,222,223,223,237,237,238,238,239,239,251,251,252,252,253,253,254,254,139,155,168,170,171,184,185,186,187,255,0,0,3,0,4,0,4,0,12,0,5,0,32,0,6,0,74,0,7,0,170,0,8,0,136,1,9,0,137,1,9,0,138,1,9,0,150,3,10,0,151,3,10,0,200,7,11,0,152,3,10,0,139,1,9,0,140,1,9,0,141,1,9,0,1,0,3,0,5,0,4,0,13,0,5,0,33,0,6,0,75,0,7,0,76,0,7,0,171,0,8,0,172,0,8,0,142,1,9,0,143,1,9,0,144,1,9,0,153,3,10,0,145,1,9,0,173,0,8,0,174,0,8,0,146,1,9,0,14,0,5,0,15,0,5,0,34,0,6,0,77,0,7,0,78,0,7,0,175,0,8,0,176,0,8,0,147,1,9,0,148,1,9,0,149,1,9,0,154,3,10,0,155,3,10,0,150,1,9,0,177,0,8,0,151,1,9,0,152,1,9,0,35,0,6,0,36,0,6,0,79,0,7,0,80,0,7,0,178,0,8,0,179,0,8,0,153,1,9,0,154,1,9,0,156,3,10,0,157,3,10,0,158,3,10,0,159,3,10,0,160,3,10,0,180,0,8,0,155,1,9,0,156,1,9,0,81,0,7,0,82,0,7,0,83,0,7,0,181,0,8,0,182,0,8,0,157,1,9,0,158,1,9,0,159,1,9,0,161,3,10,0,162,3,10,0,163,3,10,0,201,7,11,0,164,3,10,0,160,1,9,0,161,1,9,0,162,1,9,0,183,0,8,0,84,0,7,0,184,0,8,0,185,0,8,0,163,1,9,0,164,1,9,0,165,1,9,0,165,3,10,0,166,3,10,0,167,3,10,0,202,7,11,0,203,7,11,0,168,3,10,0,166,1,9,0,167,1,9,0,168,1,9,0,186,0,8,0,187,0,8,0,188,0,8,0,169,1,9,0,170,1,9,0,171,1,9,0,169,3,10,0,170,3,10,0,171,3,10,0,172,3,10,0,204,7,11,0,205,7,11,0,173,3,10,0,172,1,9,0,173,1,9,0,174,3,10,0,174,1,9,0,189,0,8,0,175,1,9,0,176,1,9,0,177,1,9,0,175,3,10,0,176,3,10,0,177,3,10,0,206,7,11,0,207,7,11,0,208,7,11,0,209,7,11,0,210,7,11,0,178,1,9,0,178,3,10,0,179,3,10,0,179,1,9,0,190,0,8,0,180,1,9,0,181,1,9,0,180,3,10,0,181,3,10,0,182,3,10,0,183,3,10,0,211,7,11,0,212,7,11,0,213,7,11,0,246,15,12,0,214,7,11,0,184,3,10,0,185,3,10,0,186,3,10,0,187,3,10,0,182,1,9,0,183,1,9,0,188,3,10,0,189,3,10,0,190,3,10,0,215,7,11,0,216,7,11,0,217,7,11,0,218,7,11,0,219,7,11,0,247,15,12,0,220,7,11,0,191,3,10,0,192,3,10,0,193,3,10,0,194,3,10,0,184,1,9,0,195,3,10,0,196,3,10,0,197,3,10,0,221,7,11,0,222,7,11,0,223,7,11,0,248,15,12,0,224,7,11,0,249,15,12,0,250,15,12,0,225,7,11,0,198,3,10,0,199,3,10,0,226,7,11,0,200,3,10,0,185,1,9,0,201,3,10,0,202,3,10,0,227,7,11,0,228,7,11,0,229,7,11,0,230,7,11,0,251,15,12,0,252,15,12,0,253,15,12,0,254,15,12,0,231,7,11,0,203,3,10,0,204,3,10,0,232,7,11,0,205,3,10,0,186,1,9,0,187,1,9,0,206,3,10,0,207,3,10,0,208,3,10,0,209,3,10,0,233,7,11,0,234,7,11,0,235,7,11,0,236,7,11,0,237,7,11,0,238,7,11,0,210,3,10,0,239,7,11,0,240,7,11,0,188,1,9,0,191,0,8,0,192,0,8,0,193,0,8,0,189,1,9,0,190,1,9,0,191,1,9,0,192,1,9,0,211,3,10,0,212,3,10,0,213,3,10,0,214,3,10,0,215,3,10,0,241,7,11,0,242,7,11,0,243,7,11,0,193,1,9,0,194,0,8,0,195,0,8,0,194,1,9,0,195,1,9,0,196,1,9,0,197,1,9,0,216,3,10,0,217,3,10,0,218,3,10,0,219,3,10,0,220,3,10,0,221,3,10,0,244,7,11,0,245,7,11,0,246,7,11,0,198,1,9,0,199,1,9,0,200,1,9,0,201,1,9,0,202,1,9,0,222,3,10,0,223,3,10,0,224,3,10,0,225,3,10,0,226,3,10,0,227,3,10,0,247,7,11,0,248,7,11,0,249,7,11,0,250,7,11,0,255,15,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,25,25,25,25,29,29,29,29,30,30,30,30,31,31,31,31,33,33,33,33,34,34,34,34,35,35,35,35,39,39,39,39,47,47,47,47,48,48,48,48,49,49,49,49,50,50,50,50,51,51,51,51,52,52,52,52,53,53,53,53,17,17,18,18,19,19,20,20,21,21,22,22,23,23,41,41,42,42,43,43,44,44,45,45,46,46,24,40,0,0,2,0,2,0,3,0,8,0,4,0,20,0,5,0,44,0,6,0,45,0,6,0,46,0,6,0,100,0,7,0,101,0,7,0,102,0,7,0,103,0,7,0,228,0,8,0,229,0,8,0,230,0,8,0,231,0,8,0,232,0,8,0,233,0,8,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,254,3,10,0,234,0,8,0,104,0,7,0,105,0,7,0,106,0,7,0,235,0,8,0,236,0,8,0,237,0,8,0,0,0,0,0,238,0,8,0,239,0,8,0,240,0,8,0,107,0,7,0,108,0,7,0,109,0,7,0,241,0,8,0,255,3,10,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,242,0,8,0,243,0,8,0,244,0,8,0,245,0,8,0,246,0,8,0,247,0,8,0,248,0,8,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,47,0,6,0,48,0,6,0,49,0,6,0,21,0,5,0,9,0,4,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,29,29,29,29,29,29,29,29,55,55,55,55,55,55,55,55,116,116,116,116,116,116,116,116,220,220,220,220,220,220,220,220,21,21,21,21,23,23,23,23,31,31,31,31,53,53,53,53,61,61,61,61,63,63,63,63,71,71,71,71,77,77,77,77,79,79,79,79,83,83,83,83,84,84,84,84,92,92,92,92,113,113,113,113,115,115,115,115,119,119,119,119,124,124,124,124,197,197,197,197,199,199,199,199,205,205,205,205,209,209,209,209,211,211,211,211,212,212,212,212,221,221,221,221,241,241,241,241,244,244,244,244,252,252,252,252,69,69,81,81,85,85,207,207,243,243,255,255,87,93,95,117,125,127,213,215,223,245,247,253,0,0,2,0,4,0,4,0,0,0,0,0,5,0,4,0,20,0,5,0,100,0,7,0,0,0,0,0,44,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,4,0,45,0,6,0,0,0,0,0,101,0,7,0,7,0,4,0,102,0,7,0,0,0,0,0,103,0,7,0,104,0,7,0,224,1,9,0,0,0,0,0,225,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,6,0,236,0,8,0,0,0,0,0,226,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,5,0,105,0,7,0,0,0,0,0,106,0,7,0,47,0,6,0,227,1,9,0,0,0,0,0,237,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,7,0,228,1,9,0,0,0,0,0,229,1,9,0,8,0,4,0,108,0,7,0,0,0,0,0,109,0,7,0,110,0,7,0,244,3,10,0,0,0,0,0,230,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,7,0,231,1,9,0,0,0,0,0,232,1,9,0,112,0,7,0,245,3,10,0,0,0,0,0,233,1,9,0,234,1,9,0,246,3,10,0,0,0,0,0,244,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,235,1,9,0,245,7,11,0,0,0,0,0,246,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,6,0,236,1,9,0,0,0,0,0,237,1,9,0,238,0,8,0,247,7,11,0,0,0,0,0,238,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,1,9,0,248,7,11,0,0,0,0,0,249,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,4,0,113,0,7,0,0,0,0,0,114,0,7,0,115,0,7,0,240,1,9,0,0,0,0,0,241,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,0,7,0,242,1,9,0,0,0,0,0,247,3,10,0,49,0,6,0,243,1,9,0,0,0,0,0,244,1,9,0,245,1,9,0,250,7,11,0,0,0,0,0,251,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,239,0,8,0,246,1,9,0,0,0,0,0,252,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,0,7,0,247,1,9,0,0,0,0,0,248,3,10,0,248,1,9,0,253,7,11,0,0,0,0,0,254,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,249,1,9,0,255,7,11,0,0,0,0,0,249,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,10,10,10,10,10,10,10,10,22,22,22,22,22,22,22,22,25,25,25,25,25,25,25,25,33,33,33,33,33,33,33,33,37,37,37,37,37,37,37,37,66,66,66,66,66,66,66,66,70,70,70,70,70,70,70,70,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,82,82,82,82,82,82,82,82,86,86,86,86,86,86,86,86,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,97,97,97,97,97,97,97,97,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,129,129,129,129,129,129,129,129,133,133,133,133,133,133,133,133,145,145,145,145,145,145,145,145,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,160,160,160,160,160,160,160,160,26,26,26,26,40,40,40,40,41,41,41,41,74,74,74,74,90,90,90,90,104,104,104,104,105,105,105,105,152,152,152,152,161,161,161,161,164,164,164,164,165,165,165,165,34,34,38,38,42,42,98,98,102,102,106,106,130,130,134,134,136,136,137,137,146,146,150,150,153,153,166,166,168,168,169,169,138,154,162,170,0,0,2,0,4,0,4,0,44,0,6,0,0,0,0,0,5,0,4,0,16,0,5,0,102,0,7,0,0,0,0,0,103,0,7,0,104,0,7,0,224,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,4,0,17,0,5,0,105,0,7,0,0,0,0,0,18,0,5,0,45,0,6,0,225,0,8,0,0,0,0,0,106,0,7,0,226,0,8,0,236,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,107,0,7,0,227,0,8,0,238,3,10,0,0,0,0,0,108,0,7,0,228,0,8,0,239,3,10,0,0,0,0,0,237,1,9,0,238,1,9,0,240,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,4,0,19,0,5,0,229,0,8,0,0,0,0,0,20,0,5,0,46,0,6,0,230,0,8,0,0,0,0,0,231,0,8,0,232,0,8,0,239,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,5,0,47,0,6,0,233,0,8,0,0,0,0,0,48,0,6,0,49,0,6,0,234,0,8,0,0,0,0,0,235,0,8,0,236,0,8,0,240,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,0,7,0,237,0,8,0,241,3,10,0,0,0,0,0,238,0,8,0,239,0,8,0,242,3,10,0,0,0,0,0,241,1,9,0,242,1,9,0,243,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,6,0,240,0,8,0,244,3,10,0,0,0,0,0,110,0,7,0,241,0,8,0,245,3,10,0,0,0,0,0,246,3,10,0,247,3,10,0,252,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,111,0,7,0,242,0,8,0,248,3,10,0,0,0,0,0,243,0,8,0,244,0,8,0,249,3,10,0,0,0,0,0,243,1,9,0,250,3,10,0,253,7,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,245,0,8,0,244,1,9,0,254,7,11,0,0,0,0,0,245,1,9,0,246,1,9,0,251,3,10,0,0,0,0,0,252,3,10,0,253,3,10,0,255,7,11], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+169368);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+179960);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+189176);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+198392);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+201720);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+208376);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+212520);
/* memory initializer */ allocate([246,0,8,0,247,0,8,0,248,0,8,0,249,0,8,0,250,0,8,0,114,0,7,0,115,0,7,0,116,0,7,0,117,0,7,0,118,0,7,0,44,0,6,0,45,0,6,0,46,0,6,0,47,0,6,0,18,0,5,0,19,0,5,0,7,0,4,0,2,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+222760);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+224880);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+230000);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+234904);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+240024);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+245912);
/* memory initializer */ allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,17,17,17,17,17,17,17,17,86,86,86,86,86,86,86,86,169,169,169,169,169,169,169,169,192,192,192,192,192,192,192,192,2,2,2,2,3,3,3,3,6,6,6,6,7,7,7,7,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,37,37,37,37,70,70,70,70,74,74,74,74,82,82,82,82,87,87,87,87,88,88,88,88,89,89,89,89,90,90,90,90,91,91,91,91,93,93,93,93,94,94,94,94,95,95,95,95,100,100,100,100,101,101,101,101,102,102,102,102,103,103,103,103,105,105,105,105,106,106,106,106,107,107,107,107,109,109,109,109,110,110,110,110,111,111,111,111,113,113,113,113,117,117,117,117,118,118,118,118,119,119,119,119,121,121,121,121,122,122,122,122,123,123,123,123,125,125,125,125,126,126,126,126,127,127,127,127,128,128,128,128,129,129,129,129,133,133,133,133,144,144,144,144,145,145,145,145,148,148,148,148,149,149,149,149,150,150,150,150,151,151,151,151,152,152,152,152,153,153,153,153,154,154,154,154,155,155,155,155,157,157,157,157,158,158,158,158,159,159,159,159,164,164,164,164,165,165,165,165,166,166,166,166,167,167,167,167,170,170,170,170,171,171,171,171,173,173,173,173,174,174,174,174,175,175,175,175,181,181,181,181,182,182,182,182,183,183,183,183,185,185,185,185,186,186,186,186,187,187,187,187,189,189,189,189,190,190,190,190,191,191,191,191,208,208,208,208,209,209,209,209,213,213,213,213,214,214,214,214,215,215,215,215,217,217,217,217,218,218,218,218,219,219,219,219,221,221,221,221,222,222,222,222,223,223,223,223,229,229,229,229,230,230,230,230,231,231,231,231,233,233,233,233,234,234,234,234,235,235,235,235,237,237,237,237,238,238,238,238,239,239,239,239,245,245,245,245,246,246,246,246,247,247,247,247,249,249,249,249,250,250,250,250,251,251,251,251,253,253,253,253,254,254,254,254,255,255,255,255,8,8,9,9,13,13,14,14,15,15,18,18,19,19,26,26,27,27,29,29,30,30,31,31,32,32,34,34,36,36,38,38,39,39,41,41,42,42,43,43,45,45,46,46,47,47,52,52,53,53,54,54,55,55,57,57,58,58,59,59,60,60,61,61,62,62,63,63,66,66,71,71,72,72,73,73,75,75,77,77,78,78,79,79,83,83,92,92,96,96,97,97,98,98,99,99,104,104,108,108,112,112,114,114,115,115,116,116,120,120,124,124,134,134,135,135,136,136,137,137,138,138,139,139,141,141,142,142,143,143,146,146,147,147,156,156,160,160,161,161,162,162,163,163,168,168,172,172,176,176,177,177,178,178,179,179,180,180,184,184,188,188,196,196,197,197,198,198,199,199,201,201,202,202,203,203,205,205,206,206,207,207,210,210,211,211,212,212,216,216,220,220,224,224,225,225,226,226,227,227,228,228,232,232,236,236,240,240,241,241,242,242,243,243,244,244,248,248,252,252,10,11,12,28,33,35,40,44,48,49,50,51,56,67,76,130,131,132,140,193,194,195,200,204,0,0,1,0,16,0,5,0,92,1,9,0,93,1,9,0,34,0,6,0,76,0,7,0,94,1,9,0,95,1,9,0,134,3,10,0,135,3,10,0,232,7,11,0,233,7,11,0,234,7,11,0,136,3,10,0,137,3,10,0,138,3,10,0,35,0,6,0,170,0,8,0,139,3,10,0,140,3,10,0,77,0,7,0,78,0,7,0,96,1,9,0,97,1,9,0,98,1,9,0,99,1,9,0,141,3,10,0,142,3,10,0,235,7,11,0,143,3,10,0,144,3,10,0,145,3,10,0,146,3,10,0,236,7,11,0,147,3,10,0,237,7,11,0,148,3,10,0,100,1,9,0,149,3,10,0,150,3,10,0,238,7,11,0,151,3,10,0,152,3,10,0,153,3,10,0,239,7,11,0,154,3,10,0,155,3,10,0,156,3,10,0,240,7,11,0,241,7,11,0,242,7,11,0,243,7,11,0,157,3,10,0,158,3,10,0,159,3,10,0,160,3,10,0,244,7,11,0,161,3,10,0,162,3,10,0,163,3,10,0,164,3,10,0,165,3,10,0,166,3,10,0,167,3,10,0,36,0,6,0,79,0,7,0,168,3,10,0,245,7,11,0,80,0,7,0,81,0,7,0,101,1,9,0,169,3,10,0,170,3,10,0,171,3,10,0,102,1,9,0,172,3,10,0,246,7,11,0,173,3,10,0,174,3,10,0,175,3,10,0,37,0,6,0,82,0,7,0,103,1,9,0,176,3,10,0,83,0,7,0,84,0,7,0,171,0,8,0,104,1,9,0,105,1,9,0,106,1,9,0,107,1,9,0,108,1,9,0,177,3,10,0,109,1,9,0,110,1,9,0,111,1,9,0,178,3,10,0,179,3,10,0,180,3,10,0,181,3,10,0,112,1,9,0,113,1,9,0,114,1,9,0,115,1,9,0,182,3,10,0,116,1,9,0,117,1,9,0,118,1,9,0,183,3,10,0,119,1,9,0,120,1,9,0,121,1,9,0,184,3,10,0,122,1,9,0,185,3,10,0,186,3,10,0,187,3,10,0,123,1,9,0,124,1,9,0,125,1,9,0,188,3,10,0,126,1,9,0,127,1,9,0,128,1,9,0,189,3,10,0,129,1,9,0,130,1,9,0,131,1,9,0,132,1,9,0,133,1,9,0,247,7,11,0,248,7,11,0,249,7,11,0,134,1,9,0,190,3,10,0,191,3,10,0,192,3,10,0,193,3,10,0,194,3,10,0,195,3,10,0,250,7,11,0,196,3,10,0,197,3,10,0,198,3,10,0,135,1,9,0,136,1,9,0,199,3,10,0,200,3,10,0,137,1,9,0,138,1,9,0,139,1,9,0,140,1,9,0,141,1,9,0,142,1,9,0,143,1,9,0,144,1,9,0,201,3,10,0,145,1,9,0,146,1,9,0,147,1,9,0,202,3,10,0,203,3,10,0,204,3,10,0,205,3,10,0,148,1,9,0,149,1,9,0,150,1,9,0,151,1,9,0,206,3,10,0,172,0,8,0,152,1,9,0,153,1,9,0,207,3,10,0,154,1,9,0,155,1,9,0,156,1,9,0,208,3,10,0,209,3,10,0,210,3,10,0,211,3,10,0,212,3,10,0,157,1,9,0,158,1,9,0,159,1,9,0,213,3,10,0,160,1,9,0,161,1,9,0,162,1,9,0,214,3,10,0,163,1,9,0,164,1,9,0,165,1,9,0,173,0,8,0,251,7,11,0,252,7,11,0,253,7,11,0,215,3,10,0,216,3,10,0,217,3,10,0,218,3,10,0,254,7,11,0,219,3,10,0,220,3,10,0,221,3,10,0,255,7,11,0,222,3,10,0,223,3,10,0,224,3,10,0,166,1,9,0,167,1,9,0,225,3,10,0,226,3,10,0,227,3,10,0,168,1,9,0,169,1,9,0,170,1,9,0,228,3,10,0,171,1,9,0,172,1,9,0,173,1,9,0,229,3,10,0,174,1,9,0,175,1,9,0,176,1,9,0,230,3,10,0,231,3,10,0,232,3,10,0,233,3,10,0,234,3,10,0,177,1,9,0,178,1,9,0,179,1,9,0,235,3,10,0,180,1,9,0,181,1,9,0,182,1,9,0,236,3,10,0,183,1,9,0,184,1,9,0,185,1,9,0,237,3,10,0,238,3,10,0,239,3,10,0,240,3,10,0,241,3,10,0,186,1,9,0,187,1,9,0,188,1,9,0,242,3,10,0,189,1,9,0,190,1,9,0,191,1,9,0,243,3,10,0,192,1,9,0,193,1,9,0,194,1,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,2,2,2,2,14,14,14,14,5,5,13,13,3,4,11,12,0,0,1,0,4,0,3,0,12,0,4,0,60,0,6,0,61,0,6,0,28,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,6,0,63,0,6,0,29,0,5,0,13,0,4,0,5,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+252744);
/* memory initializer */ allocate([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,12,12,12,12,12,12,12,12,19,19,19,19,19,19,19,19,29,29,29,29,29,29,29,29,34,34,34,34,34,34,34,34,46,46,46,46,46,46,46,46,49,49,49,49,49,49,49,49,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,96,96,96,96,96,96,96,96,112,112,112,112,112,112,112,112,144,144,144,144,144,144,144,144,192,192,192,192,192,192,192,192,209,209,209,209,209,209,209,209,223,223,223,223,223,223,223,223,226,226,226,226,226,226,226,226,238,238,238,238,238,238,238,238,243,243,243,243,243,243,243,243,253,253,253,253,253,253,253,253,5,5,5,5,11,11,11,11,20,20,20,20,22,22,22,22,23,23,23,23,25,25,25,25,26,26,26,26,28,28,28,28,35,35,35,35,38,38,38,38,39,39,39,39,41,41,41,41,42,42,42,42,45,45,45,45,50,50,50,50,61,61,61,61,62,62,62,62,65,65,65,65,79,79,79,79,80,80,80,80,97,97,97,97,98,98,98,98,110,110,110,110,111,111,111,111,113,113,113,113,114,114,114,114,126,126,126,126,127,127,127,127,145,145,145,145,146,146,146,146,159,159,159,159,160,160,160,160,161,161,161,161,162,162,162,162,175,175,175,175,176,176,176,176,193,193,193,193,194,194,194,194,207,207,207,207,210,210,210,210,211,211,211,211,222,222,222,222,227,227,227,227,228,228,228,228,231,231,231,231,233,233,233,233,237,237,237,237,244,244,244,244,246,246,246,246,247,247,247,247,249,249,249,249,250,250,250,250,252,252,252,252,21,21,27,27,36,36,37,37,43,43,44,44,51,51,54,54,55,55,57,57,58,58,59,59,60,60,66,66,67,67,71,71,74,74,77,77,78,78,81,81,82,82,86,86,89,89,94,94,95,95,99,99,109,109,115,115,116,116,124,124,125,125,147,147,149,149,155,155,156,156,157,157,158,158,163,163,166,166,173,173,174,174,177,177,178,178,185,185,186,186,190,190,191,191,198,198,199,199,201,201,202,202,206,206,212,212,214,214,215,215,217,217,218,218,219,219,221,221,229,229,230,230,234,234,236,236,245,245,52,53,68,69,70,73,75,76,83,84,85,87,90,91,92,93,100,101,102,103,105,106,107,108,117,118,119,121,122,123,148,150,151,153,154,164,165,167,169,170,171,172,179,180,181,182,183,187,188,189,195,196,197,203,204,205,213,220,235,251,0,0,2,0,2,0,3,0,96,0,7,0,182,1,9,0,183,1,9,0,156,3,10,0,184,1,9,0,185,1,9,0,0,0,0,0,186,1,9,0,187,1,9,0,157,3,10,0,188,1,9,0,208,0,8,0,97,0,7,0,3,0,3,0,4,0,3,0,98,0,7,0,209,0,8,0,189,1,9,0,158,3,10,0,162,7,11,0,159,3,10,0,160,3,10,0,0,0,0,0,161,3,10,0,162,3,10,0,163,7,11,0,163,3,10,0,190,1,9,0,210,0,8,0,99,0,7,0,100,0,7,0,211,0,8,0,191,1,9,0,164,3,10,0,164,7,11,0,165,7,11,0,165,3,10,0,166,3,10,0,0,0,0,0,167,3,10,0,168,3,10,0,166,7,11,0,167,7,11,0,169,3,10,0,192,1,9,0,212,0,8,0,213,0,8,0,193,1,9,0,170,3,10,0,168,7,11,0,196,15,12,0,197,15,12,0,169,7,11,0,170,7,11,0,0,0,0,0,171,7,11,0,172,7,11,0,173,7,11,0,174,7,11,0,171,3,10,0,172,3,10,0,194,1,9,0,195,1,9,0,173,3,10,0,175,7,11,0,176,7,11,0,198,15,12,0,199,15,12,0,200,15,12,0,177,7,11,0,0,0,0,0,201,15,12,0,178,7,11,0,202,15,12,0,203,15,12,0,179,7,11,0,180,7,11,0,174,3,10,0,175,3,10,0,181,7,11,0,182,7,11,0,204,15,12,0,205,15,12,0,206,15,12,0,183,7,11,0,207,15,12,0,0,0,0,0,184,7,11,0,208,15,12,0,209,15,12,0,210,15,12,0,211,15,12,0,185,7,11,0,186,7,11,0,196,1,9,0,176,3,10,0,177,3,10,0,187,7,11,0,212,15,12,0,213,15,12,0,214,15,12,0,215,15,12,0,0,0,0,0,216,15,12,0,217,15,12,0,218,15,12,0,219,15,12,0,188,7,11,0,178,3,10,0,179,3,10,0,197,1,9,0,180,3,10,0,181,3,10,0,189,7,11,0,190,7,11,0,220,15,12,0,221,15,12,0,222,15,12,0,0,0,0,0,223,15,12,0,224,15,12,0,225,15,12,0,191,7,11,0,192,7,11,0,182,3,10,0,183,3,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,198,1,9,0,184,3,10,0,185,3,10,0,193,7,11,0,226,15,12,0,194,7,11,0,227,15,12,0,228,15,12,0,0,0,0,0,229,15,12,0,230,15,12,0,195,7,11,0,196,7,11,0,197,7,11,0,198,7,11,0,186,3,10,0,187,3,10,0,188,3,10,0,189,3,10,0,199,7,11,0,231,15,12,0,232,15,12,0,200,7,11,0,233,15,12,0,0,0,0,0,234,15,12,0,235,15,12,0,236,15,12,0,237,15,12,0,201,7,11,0,202,7,11,0,190,3,10,0,191,3,10,0,203,7,11,0,204,7,11,0,238,15,12,0,239,15,12,0,240,15,12,0,241,15,12,0,242,15,12,0,0,0,0,0,205,7,11,0,206,7,11,0,243,15,12,0,244,15,12,0,245,15,12,0,207,7,11,0,208,7,11,0,199,1,9,0,192,3,10,0,193,3,10,0,246,15,12,0,247,15,12,0,248,15,12,0,209,7,11,0,210,7,11,0,0,0,0,0,211,7,11,0,212,7,11,0,249,15,12,0,250,15,12,0,251,15,12,0,213,7,11,0,194,3,10,0,214,0,8,0,200,1,9,0,195,3,10,0,196,3,10,0,214,7,11,0,252,15,12,0,215,7,11,0,216,7,11,0,0,0,0,0,217,7,11,0,218,7,11,0,219,7,11,0,253,15,12,0,220,7,11,0,197,3,10,0,201,1,9,0,101,0,7,0,215,0,8,0,202,1,9,0,198,3,10,0,199,3,10,0,221,7,11,0,222,7,11,0,200,3,10,0,0,0,0,0,201,3,10,0,223,7,11,0,254,15,12,0,224,7,11,0,202,3,10,0,203,1,9,0,216,0,8,0,5,0,3,0,102,0,7,0,217,0,8,0,204,1,9,0,203,3,10,0,225,7,11,0,204,3,10,0,205,3,10,0,0,0,0,0,206,3,10,0,207,3,10,0,255,15,12,0,208,3,10,0,205,1,9,0,218,0,8,0,103,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,12,12,12,12,19,19,19,19,20,20,20,20,13,13,14,18,0,0,2,0,2,0,3,0,8,0,4,0,20,0,5,0,21,0,5,0,52,0,6,0,53,0,6,0,54,0,6,0,55,0,6,0,120,0,7,0,121,0,7,0,122,0,7,0,252,0,8,0,254,1,9,0,254,3,10,0,22,0,5,0,0,0,0,0,23,0,5,0,255,3,10,0,253,0,8,0,254,0,8,0,123,0,7,0,124,0,7,0,125,0,7,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,24,0,5,0,25,0,5,0,9,0,4,0,3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,48,48,48,48,48,48,48,48,21,21,21,21,22,22,22,22,23,23,23,23,24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,37,37,37,37,38,38,38,38,39,39,39,39,40,40,40,40,41,41,41,41,42,42,42,42,43,43,43,43,44,44,44,44,28,28,29,29,30,30,35,35,31,33,34,36,0,0,2,0,4,0,4,0,5,0,4,0,16,0,5,0,17,0,5,0,18,0,5,0,44,0,6,0,45,0,6,0,46,0,6,0,47,0,6,0,48,0,6,0,108,0,7,0,109,0,7,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,240,0,8,0,241,0,8,0,242,0,8,0,243,0,8,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,250,3,10,0,251,3,10,0,252,3,10,0,252,7,11,0,0,0,0,0,253,7,11,0,254,7,11,0,253,3,10,0,255,7,11,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,244,0,8,0,245,0,8,0,114,0,7,0,246,0,8,0,115,0,7,0,116,0,7,0,117,0,7,0,118,0,7,0,119,0,7,0,49,0,6,0,50,0,6,0,51,0,6,0,52,0,6,0,53,0,6,0,19,0,5,0,20,0,5,0,21,0,5,0,6,0,4,0,7,0,4,0,0,0,0,0,1,1,2,3,0,0,1,0,2,0,2,0,6,0,3,0,7,0,3,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,7,0,0,2,0,2,0,3,0,3,0,3,0,4,0,3,0,5,0,3,0,6,0,3,0,14,0,4,0,15,0,4,0,0,0,0,0,1,1,2,2,3,3,6,6,7,7,4,5,0,0,2,0,2,0,3,0,3,0,3,0,4,0,3,0,14,0,4,0,15,0,4,0,5,0,3,0,6,0,3,0,0,0,0,0,0,0,0,0,1,1,2,3,4,5,6,7,0,0,1,0,4,0,3,0,10,0,4,0,11,0,4,0,12,0,4,0,13,0,4,0,14,0,4,0,15,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,3,3,4,4,5,5,6,6,57,57,58,58,59,59,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,0,0,2,0,2,0,3,0,12,0,4,0,224,0,8,0,225,0,8,0,226,0,8,0,227,0,8,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,228,0,8,0,229,0,8,0,230,0,8,0,13,0,4,0,3,0,3,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,4,4,5,5,6,6,57,57,58,58,59,59,60,60,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,0,0,2,0,2,0,3,0,3,0,3,0,12,0,4,0,224,0,8,0,225,0,8,0,226,0,8,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,227,0,8,0,228,0,8,0,229,0,8,0,230,0,8,0,13,0,4,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,4,4,4,4,60,60,60,60,59,59,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,0,0,1,0,4,0,3,0,24,0,5,0,25,0,5,0,112,0,7,0,202,1,9,0,203,1,9,0,204,1,9,0,205,1,9,0,206,1,9,0,207,1,9,0,208,1,9,0,209,1,9,0,210,1,9,0,211,1,9,0,212,1,9,0,213,1,9,0,214,1,9,0,215,1,9,0,216,1,9,0,217,1,9,0,218,1,9,0,219,1,9,0,220,1,9,0,221,1,9,0,222,1,9,0,223,1,9,0,224,1,9,0,225,1,9,0,226,1,9,0,227,1,9,0,228,1,9,0,229,1,9,0,230,1,9,0,231,1,9,0,232,1,9,0,233,1,9,0,234,1,9,0,235,1,9,0,236,1,9,0,237,1,9,0,238,1,9,0,239,1,9,0,240,1,9,0,241,1,9,0,242,1,9,0,243,1,9,0,244,1,9,0,245,1,9,0,246,1,9,0,247,1,9,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,228,0,8,0,113,0,7,0,26,0,5,0,27,0,5,0,5,0,3,0,208,26,0,0,200,26,0,0,8,0,32,0,5,0,0,0,0,0,0,0,0,0,0,0,216,42,0,0,216,26,0,0,0,0,0,0,0,1,0,16,12,4,1,2,0,2,3,0,216,62,0,0,216,46,0,0,0,0,0,0,171,0,0,16,12,4,1,2,1,2,3,0,136,67,0,0,136,65,0,0,0,0,0,0,64,0,0,2,9,2,1,1,0,3,7,0,144,68,0,0,136,68,0,0,0,0,0,0,6,0,8,0,3,1,1,0,1,3,7,0,168,84,0,0,168,68,0,0,0,0,0,0,0,1,0,16,12,2,1,1,0,4,15,0,232,88,0,0,168,88,0,0,0,0,0,0,16,0,64,0,6,1,1,0,1,4,15,0,40,93,0,0,40,89,0,0,0,0,0,0,64,0,0,4,10,1,1,0,0,6,63,0,40,102,0,0,40,94,0,0,0,0,0,0,0,1,0,8,11,4,4,2,0,2,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+255944);
/* memory initializer */ allocate([40,110,0,0,40,106,0,0,0,0,0,0,171,0,0,4,10,4,1,2,1,2,3,0,216,116,0,0,216,112,0,0,0,0,0,0,64,0,0,4,10,2,1,1,0,3,7,0,216,125,0,0,216,117,0,0,0,0,0,0,0,1,0,8,11,2,1,1,0,4,15,0,216,137,0,0,216,129,0,0,0,0,0,0,0,1,0,8,11,2,1,1,0,4,15,0,216,157,0,0,216,141,0,0,0,0,0,0,0,1,0,16,12,2,1,1,1,4,15,0,216,163,0,0,216,161,0,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,216,180,0,0,216,164,0,0,0,0,0,0,0,1,0,16,12,4,1,2,0,2,3,0,216,186,0,0,216,184,0,0,0,0,0,0,64,0,0,2,9,2,1,1,0,3,7,0,216,189,0,0,216,187,0,0,0,0,0,0,64,0,0,2,9,2,1,1,0,3,7,0,232,190,0,0,216,190,0,0,0,0,0,0,6,0,16,0,4,1,1,0,1,3,7,0,16,191,0,0,0,191,0,0,0,0,0,0,8,0,16,0,4,1,1,0,1,3,7,0,48,199,0,0,48,191,0,0,0,0,0,0,0,1,0,8,11,2,1,1,1,4,15,0,48,204,0,0,48,203,0,0,0,0,0,0,64,0,0,1,8,1,1,0,0,6,63,0,112,205,0,0,48,205,0,0,0,0,0,0,16,0,64,0,6,2,1,1,0,2,3,0,176,213,0,0,176,205,0,0,0,0,0,0,171,0,0,8,11,4,1,2,1,2,3,0,96,232,0,0,96,216,0,0,0,0,0,0,0,1,0,16,12,4,1,2,1,2,3,0,128,236,0,0,96,236,0,0,0,0,0,0,6,0,32,0,5,1,1,0,1,3,7,0,152,240,0,0,152,236,0,0,0,0,0,0,0,1,0,4,10,2,1,1,0,4,15,0,152,4,1,0,152,244,0,0,0,0,0,0,0,1,0,16,12,2,1,1,1,4,15,0,152,9,1,0,152,8,1,0,0,0,0,0,64,0,0,1,8,1,1,0,0,6,63,0,152,26,1,0,152,10,1,0,0,0,0,0,0,1,0,16,12,4,1,2,0,2,3,0,152,34,1,0,152,30,1,0,0,0,0,0,171,0,0,4,10,4,1,2,1,2,3,0,88,37,1,0,72,37,1,0,0,0,0,0,8,0,16,0,4,1,1,0,0,3,7,0,120,41,1,0,120,37,1,0,0,0,0,0,0,1,0,4,10,2,1,1,0,4,15,0,136,45,1,0,120,45,1,0,0,0,0,0,8,0,16,0,4,1,1,0,1,3,7,0,168,47,1,0,168,45,1,0,0,0,0,0,0,1,0,2,9,2,1,1,1,4,15,0,168,53,1,0,168,51,1,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,168,62,1,0,168,54,1,0,0,0,0,0,0,1,0,8,11,4,1,2,0,2,3,0,168,70,1,0,168,66,1,0,0,0,0,0,64,0,0,4,10,2,1,1,0,3,7,0,184,71,1,0,168,71,1,0,0,0,0,0,8,0,16,0,4,1,1,0,0,3,7,0,216,73,1,0,216,71,1,0,0,0,0,0,0,1,0,2,9,2,1,1,0,4,15,0,24,78,1,0,216,77,1,0,0,0,0,0,8,0,64,0,6,1,1,0,1,3,7,0,184,78,1,0,56,78,1,0,0,0,0,0,32,0,128,0,7,1,1,0,0,5,31,0,56,81,1,0,56,79,1,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,56,90,1,0,56,82,1,0,0,0,0,0,0,1,0,8,11,4,2,2,0,2,3,0,56,95,1,0,56,94,1,0,0,0,0,0,64,0,0,1,8,2,1,1,0,3,7,0,56,104,1,0,56,96,1,0,0,0,0,0,0,1,0,8,11,4,1,2,1,2,3,0,56,110,1,0,56,108,1,0,0,0,0,0,0,1,0,2,9,2,1,1,0,4,15,0,184,114,1,0,56,114,1,0,0,0,0,0,16,0,128,0,7,1,1,0,0,4,15,0,248,118,1,0,248,114,1,0,0,0,0,0,32,0,0,4,10,1,1,0,0,5,31,0,120,121,1,0,120,119,1,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,128,122,1,0,120,122,1,0,0,0,0,0,4,0,8,0,3,2,1,1,1,1,1,0,144,130,1,0,144,122,1,0,0,0,0,0,171,0,0,8,11,4,2,2,1,2,3,0,64,137,1,0,64,133,1,0,0,0,0,0,64,0,0,4,10,2,1,1,0,3,7,0,64,154,1,0,64,138,1,0,0,0,0,0,0,1,0,16,12,2,1,1,0,4,15,0,128,158,1,0,64,158,1,0,0,0,0,0,16,0,64,0,6,1,1,0,0,4,15,0,192,174,1,0,192,158,1,0,0,0,0,0,0,1,0,16,12,2,2,1,1,4,15,0,192,182,1,0,192,178,1,0,16,69,98,0,64,0,0,4,10,1,4,0,0,6,63,0,192,199,1,0,192,183,1,0,0,0,0,0,0,1,0,16,12,4,4,2,0,2,3,0,192,219,1,0,192,203,1,0,0,0,0,0,171,0,0,16,12,4,1,2,1,2,3,0,112,224,1,0,112,222,1,0,0,0,0,0,64,0,0,2,9,2,4,1,0,3,7,0,112,233,1,0,112,225,1,0,0,0,0,0,0,1,0,8,11,2,1,1,0,4,15,0,112,245,1,0,112,237,1,0,0,0,0,0,0,1,0,8,11,2,1,1,0,4,15,0,176,249,1,0,112,249,1,0,248,68,98,0,16,0,64,0,6,1,1,0,1,4,15,0,240,251,1,0,240,249,1,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,240,12,2,0,240,252,1,0,208,69,98,0,0,1,0,16,12,4,1,2,0,2,3,0,240,20,2,0,240,16,2,0,0,0,0,0,171,0,0,4,10,4,1,2,1,2,3,0,160,27,2,0,160,23,2,0,88,69,98,0,64,0,0,4,10,2,1,1,0,3,7,0,160,44,2,0,160,28,2,0,0,0,0,0,0,1,0,16,12,2,1,1,0,4,15,0,160,56,2,0,160,48,2,0,136,69,98,0,0,1,0,8,11,2,1,1,0,4,15,0,160,76,2,0,160,60,2,0,0,0,0,0,0,1,0,16,12,2,1,1,1,4,15,0,160,84,2,0,160,80,2,0,16,69,98,0,64,0,0,4,10,1,1,0,0,6,63,0,160,101,2,0,160,85,2,0,32,71,98,0,0,1,0,16,12,4,4,2,0,2,3,0,160,113,2,0,160,105,2,0,144,70,98,0,171,0,0,8,11,4,4,2,1,2,3,0,80,118,2,0,80,116,2,0,176,68,98,0,64,0,0,2,9,2,1,1,0,3,7,0,80,123,2,0,80,119,2,0,104,71,98,0,0,1,0,4,10,2,1,1,0,4,15,0,80,135,2,0,80,127,2,0,32,74,98,0,0,1,0,8,11,2,2,1,0,4,15,0,80,155,2,0,80,139,2,0,0,0,0,0,0,1,0,16,12,2,2,1,1,4,15,0,80,163,2,0,80,159,2,0,248,74,98,0,64,0,0,4,10,1,4,0,0,6,63,0,80,172,2,0,80,164,2,0,200,71,98,0,0,1,0,8,11,4,1,2,0,2,3,0,80,184,2,0,80,176,2,0,0,0,0,0,171,0,0,8,11,4,1,2,1,2,3,0,0,203,2,0,0,187,2,0,0,0,0,0,0,1,0,16,12,4,1,2,1,2,3,0,0,215,2,0,0,207,2,0,8,74,98,0,0,1,0,8,11,2,2,1,0,4,15,0,0,235,2,0,0,219,2,0,0,0,0,0,0,1,0,16,12,2,1,1,0,4,15,0,0,255,2,0,0,239,2,0,136,75,98,0,0,1,0,16,12,2,1,1,1,4,15,0,0,11,3,0,0,3,3,0,0,0,0,0,64,0,0,8,11,1,1,0,0,6,63,0,0,28,3,0,0,12,3,0,0,0,0,0,0,1,0,16,12,4,1,2,0,2,3,0,0,34,3,0,0,32,3,0,0,0,0,0,64,0,0,2,9,2,4,1,0,3,7,0,0,37,3,0,0,35,3,0,0,0,0,0,64,0,0,2,9,2,1,1,0,3,7,0,0,54,3,0,0,38,3,0,176,74,98,0,0,1,0,16,12,2,4,1,0,4,15,0,16,58,3,0,0,58,3,0,128,71,98,0,8,0,16,0,4,1,1,0,1,3,7,0,48,74,3,0,48,58,3,0,160,69,98,0,0,1,0,16,12,2,1,1,1,4,15,0,48,80,3,0,48,78,3,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,48,89,3,0,48,81,3,0,112,72,98,0,0,1,0,8,11,4,2,2,0,2,3,0,48,95,3,0,48,93,3,0,0,0,0,0,64,0,0,2,9,2,1,1,0,3,7,0,80,96,3,0,48,96,3,0,0,0,0,0,8,0,32,0,5,1,4,0,0,3,7,0,128,96,3,0,112,96,3,0,24,70,98,0,6,0,16,0,4,1,1,0,1,3,7,0,216,96,3,0,152,96,3,0,40,72,98,0,8,0,64,0,6,1,1,0,1,3,7,0,248,98,3,0,248,96,3,0,0,0,0,0,32,0,0,2,9,1,1,0,0,5,31,0,120,101,3,0,120,99,3,0,80,74,98,0,64,0,0,2,9,1,2,0,0,6,63,0,120,118,3,0,120,102,3,0,16,75,98,0,0,1,0,16,12,4,1,2,0,2,3,0,120,138,3,0,120,122,3,0,0,0,0,0,171,0,0,16,12,4,1,2,1,2,3,0,72,141,3,0,40,141,3,0,0,0,0,0,8,0,32,0,5,1,1,0,0,3,7,0,136,141,3,0,104,141,3,0,0,0,0,0,6,0,32,0,5,1,1,0,1,3,7,0,160,157,3,0,160,141,3,0,0,0,0,0,0,1,0,16,12,2,4,1,0,4,15,0,160,177,3,0,160,161,3,0,0,0,0,0,0,1,0,16,12,2,1,1,1,4,15,0,160,183,3,0,160,181,3,0,0,0,0,0,64,0,0,2,9,1,1,0,0,6,63,0,160,200,3,0,160,184,3,0,0,0,0,0,0,1,0,16,12,4,1,2,0,2,3,0,160,212,3,0,160,204,3,0,208,75,98,0,171,0,0,8,11,4,4,2,1,2,3,0,80,223,3,0,80,215,3,0,0,0,0,0,0,1,0,8,11,4,4,2,1,2,3,0,144,227,3,0,80,227,3,0,0,0,0,0,16,0,64,0,6,1,1,0,0,4,15,0,208,243,3,0,208,227,3,0,0,0,0,0,0,1,0,16,12,2,1,1,0,4,15,0,208,251,3,0,208,247,3,0,232,72,98,0,32,0,0,4,10,1,1,0,0,5,31,0,80,4,4,0,80,252,3,0,0,0,0,0,64,0,0,8,11,1,1,0,0,6,63,0,88,5,4,0,80,5,4,0,0,0,0,0,4,0,8,0,3,0,0,0,0,0,3,0,120,5,4,0,104,5,4,0,0,0,0,0,8,0,16,0,4,0,0,0,0,0,7,0,168,5,4,0,152,5,4,0,0,0,0,0,8,0,16,0,4,0,0,0,0,0,7,0,216,5,4,0,200,5,4,0,0,0,0,0,8,0,16,0,4,0,0,0,0,0,7,0,248,7,4,0,248,5,4,0,0,0,0,0,64,0,0,2,9,0,0,0,0,0,0,0,248,10,4,0,248,8,4,0,0,0,0,0,64,0,0,2,9,0,0,0,0,0,0,0,248,13,4,0,248,11,4,0,0,0,0,0,64,0,0,2,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,5,5,6,7,0,0,1,0,2,0,2,0,6,0,3,0,14,0,4,0,30,0,5,0,62,0,6,0,126,0,7,0,127,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,2,2,2,2,2,2,2,2,6,6,6,6,3,3,4,5,0,0,1,0,2,0,2,0,14,0,4,0,62,0,6,0,126,0,7,0,127,0,7,0,30,0,5,0,6,0,3,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,6,6,6,6,6,6,6,6,9,9,9,9,9,9,9,9,4,4,4,4,10,10,11,11,0,1,2,3,12,13,14,15,120,0,7,0,121,0,7,0,122,0,7,0,123,0,7,0,28,0,5,0,4,0,3,0,12,0,4,0,0,0,1,0,5,0,3,0,13,0,4,0,58,0,6,0,59,0,6,0,124,0,7,0,125,0,7,0,126,0,7,0,127,0,7,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,12,12,12,12,4,5,6,7,8,9,10,11,0,0,0,0,6,0,3,0,30,0,5,0,124,0,7,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,125,0,7,0,14,0,4,0,2,0,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,3,3,3,12,12,12,12,4,5,6,7,8,9,10,11,0,0,1,0,4,0,3,0,14,0,4,0,124,0,7,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,125,0,7,0,30,0,5,0,5,0,3,0,6,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,13,13,13,13,3,3,12,12,4,5,6,7,8,9,10,11,0,0,1,0,2,0,2,0,30,0,5,0,250,0,8,0,248,1,9,0,249,1,9,0,250,1,9,0,251,1,9,0,252,1,9,0,253,1,9,0,254,1,9,0,255,1,9,0,251,0,8,0,124,0,7,0,14,0,4,0,6,0,3,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,0,0,2,0,2,0,3,0,3,0,3,0,8,0,4,0,9,0,4,0,10,0,4,0,11,0,4,0,24,0,5,0,25,0,5,0,26,0,5,0,27,0,5,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,240,0,8,0,241,0,8,0,242,0,8,0,243,0,8,0,244,0,8,0,245,0,8,0,246,0,8,0,247,0,8,0,248,0,8,0,249,0,8,0,250,0,8,0,251,0,8,0,252,0,8,0,253,0,8,0,254,0,8,0,255,0,8,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,15,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,0,0,0,0,10,0,4,0,0,0,3,0,1,0,3,0,2,0,3,0,3,0,3,0,4,0,3,0,11,0,4,0,12,0,4,0,26,0,5,0,27,0,5,0,56,0,6,0,57,0,6,0,58,0,6,0,118,0,7,0,119,0,7,0,240,0,8,0,241,0,8,0,242,0,8,0,243,0,8,0,244,0,8,0,245,0,8,0,246,0,8,0,247,0,8,0,248,0,8,0,249,0,8,0,250,0,8,0,251,0,8,0,252,0,8,0,253,0,8,0,254,0,8,0,255,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,31,31,31,31,2,2,3,3,4,4,5,5,6,6,7,7,26,26,27,27,28,28,29,29,30,30,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,2,0,4,0,4,0,12,0,5,0,13,0,5,0,14,0,5,0,15,0,5,0,16,0,5,0,17,0,5,0,46,0,6,0,47,0,6,0,48,0,6,0,49,0,6,0,50,0,6,0,51,0,6,0,52,0,6,0,53,0,6,0,54,0,6,0,55,0,6,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,18,0,5,0,19,0,5,0,20,0,5,0,21,0,5,0,22,0,5,0,5,0,4,0,0,0,0,0,28,28,28,28,29,29,29,29,1,1,2,2,3,3,4,4,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,30,30,31,31,5,6,7,8,9,10,0,0,4,0,6,0,5,0,7,0,5,0,8,0,5,0,9,0,5,0,58,0,6,0,59,0,6,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,10,0,5,0,11,0,5,0,12,0,5,0,13,0,5,0,14,0,5,0,15,0,5,0,16,0,5,0,17,0,5,0,18,0,5,0,19,0,5,0,20,0,5,0,21,0,5,0,22,0,5,0,23,0,5,0,24,0,5,0,25,0,5,0,26,0,5,0,1,0,4,0,2,0,4,0,27,0,5,0,28,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,31,31,31,31,31,31,31,31,3,3,3,3,4,4,4,4,5,5,6,6,7,7,8,8,29,29,30,30,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,0,0,1,0,8,0,4,0,9,0,4,0,22,0,5,0,23,0,5,0,48,0,6,0,49,0,6,0,50,0,6,0,51,0,6,0,108,0,7,0,109,0,7,0,110,0,7,0,111,0,7,0,112,0,7,0,113,0,7,0,114,0,7,0,115,0,7,0,116,0,7,0,117,0,7,0,118,0,7,0,119,0,7,0,120,0,7,0,121,0,7,0,122,0,7,0,123,0,7,0,124,0,7,0,125,0,7,0,126,0,7,0,127,0,7,0,52,0,6,0,53,0,6,0,10,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,4,5,5,6,6,7,7,8,9,10,11,12,13,14,15,0,0,1,0,4,0,3,0,10,0,4,0,11,0,4,0,24,0,5,0,25,0,5,0,26,0,5,0,27,0,5,0,56,0,6,0,57,0,6,0,58,0,6,0,59,0,6,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,5,5,6,7,0,0,1,0,2,0,2,0,6,0,3,0,14,0,4,0,30,0,5,0,62,0,6,0,126,0,7,0,127,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,7,7,7,7,7,7,7,7,2,2,2,2,3,4,5,6,0,0,1,0,2,0,2,0,14,0,4,0,60,0,6,0,61,0,6,0,62,0,6,0,63,0,6,0,6,0,3], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+266184);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+273904);
/* memory initializer */ allocate([56,70,4,0,0,0,0,0,0,56,24,63,0,4,53,63,0,68,87,63,0,4,181,62,0,0,0,63,0,4,53,63,0,72,87,62,0,4,181,62,0,56,24,63,0,0,0,62,0,0,128,62,0,0,0,63,0,48,152,61,0,8,53,62,0,68,215,62,0,0,53,61,0,0,0,62,0,4,181,62,0,64,215,60,0,0,181,61,0,56,152,62,0,0,128,60,0,0,128,61,0,0,128,62,0,0,24,60,0,0,53,61,0,72,87,62,0,0,181,59,0,0,0,61,0,8,53,62,0,0,88,59,0,0,181,60,0,56,24,62,0,0,0,59,0,0,128,60,0,0,0,62,0,0,152,58,0,0,53,60,0,64,215,61,0,0,56,58,0,0,0,60,0,0,181,61,0,0,208,57,0,0,181,59,0,48,152,61,0,0,0,0,0,240,21,62,0,0,0,63,0,132,90,63,0,0,0,0,0,0,128,191,0,0,128,191,0,0,128,191,0,0,128,191,86,152,156,183,206,94,216,183,204,131,97,183,242,178,190,181,246,144,138,53,44,166,151,53,237,128,217,52,61,113,176,57,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,111,78,140,55,182,49,246,55,128,68,18,56,208,239,253,54,250,53,21,183,185,42,141,183,155,145,120,183,181,225,181,57,27,52,208,63,4,102,35,63,104,23,227,191,26,63,233,191,255,237,202,191,245,251,176,191,98,38,156,191,158,98,13,192,190,71,214,192,18,187,162,193,132,18,175,192,111,178,35,192,125,234,9,192,78,223,0,192,189,188,251,191,168,153,28,64,175,117,53,192,133,39,118,191,127,100,186,63,2,215,8,64,174,49,21,64,151,198,26,64,110,198,29,64,127,111,163,63,189,18,87,63,218,250,135,63,247,21,185,63,80,166,174,63,236,240,165,63,197,88,161,63,251,189,158,63,63,223,6,192,10,182,131,191,15,69,132,191,18,215,183,191,24,222,247,191,70,219,11,192,230,30,22,192,241,188,28,192,145,211,244,191,198,239,62,63,133,133,207,62,223,22,89,191,155,133,175,191,182,60,200,191,171,253,218,191,78,132,236,191,71,101,40,192,197,86,135,192,123,248,7,193,223,51,235,192,12,243,125,192,182,202,73,192,1,152,44,192,133,28,24,192,168,0,152,63,132,15,131,192,173,109,210,191,24,237,20,62,182,150,12,63,207,50,66,63,65,124,114,63,230,44,146,63,147,106,35,64,1,93,2,64,46,210,48,64,68,194,136,64,207,170,132,64,102,34,107,64,90,204,75,64,82,78,45,64,115,68,238,191,82,141,57,191,170,35,57,191,237,200,80,191,235,160,141,191,52,111,174,191,207,190,208,191,164,174,246,191,123,68,137,191,78,210,64,193,67,169,253,192,206,242,47,193,106,181,146,194,25,65,143,66,253,97,34,66,242,188,61,66,141,22,144,191,0,0,0,0,16,0,0,0,32,0,0,0,8,0,0,0,24,0,0,0,40,0,0,0,24,0,0,0,40,0,0,0,8,0,0,0,7,0,0,0,23,0,0,0,39,0,0,0,31,0,0,0,47,0,0,0,15,0,0,0,15,0,0,0,31,0,0,0,47,0,0,0,64,86,4,0,0,0,0,0,0,0,0,0,198,15,73,59,136,15,201,59,89,203,22,60,144,14,73,60,76,81,123,60,182,201,150,60,105,234,175,60,176,10,201,60,123,42,226,60,186,73,251,60,47,52,10,61,44,195,22,61,204,81,35,61,7,224,47,61,214,109,60,61,48,251,72,61,14,136,85,61,105,20,98,61,56,160,110,61,116,43,123,61,11,219,131,61,10,32,138,61,180,100,144,61,5,169,150,61,249,236,156,61,140,48,163,61,187,115,169,61,129,182,175,61,218,248,181,61,196,58,188,61,57,124,194,61,54,189,200,61,184,253,206,61,186,61,213,61,56,125,219,61,47,188,225,61,154,250,231,61,119,56,238,61,192,117,244,61,115,178,250,61,70,119,0,62,2,149,3,62,110,178,6,62,135,207,9,62,74,236,12,62,183,8,16,62,203,36,19,62,132,64,22,62,224,91,25,62,222,118,28,62,123,145,31,62,182,171,34,62,140,197,37,62,252,222,40,62,5,248,43,62,162,16,47,62,212,40,50,62,152,64,53,62,237,87,56,62,207,110,59,62,62,133,62,62,56,155,65,62,186,176,68,62,194,197,71,62,80,218,74,62,96,238,77,62,241,1,81,62,2,21,84,62,143,39,87,62,152,57,90,62,26,75,93,62,20,92,96,62,131,108,99,62,102,124,102,62,187,139,105,62,128,154,108,62,178,168,111,62,81,182,114,62,91,195,117,62,204,207,120,62,164,219,123,62,225,230,126,62,192,248,128,62,193,125,130,62,112,2,132,62,207,134,133,62,219,10,135,62,147,142,136,62,248,17,138,62,7,149,139,62,192,23,141,62,34,154,142,62,44,28,144,62,222,157,145,62,53,31,147,62,50,160,148,62,211,32,150,62,23,161,151,62,254,32,153,62,134,160,154,62,175,31,156,62,120,158,157,62,224,28,159,62,229,154,160,62,135,24,162,62,197,149,163,62,159,18,165,62,18,143,166,62,31,11,168,62,196,134,169,62,1,2,171,62,212,124,172,62,61,247,173,62,58,113,175,62,203,234,176,62,239,99,178,62,165,220,179,62,236,84,181,62,195,204,182,62,42,68,184,62,31,187,185,62,161,49,187,62,176,167,188,62,74,29,190,62,111,146,191,62,30,7,193,62,86,123,194,62,22,239,195,62,93,98,197,62,42,213,198,62,124,71,200,62,83,185,201,62,174,42,203,62,139,155,204,62,234,11,206,62,202,123,207,62,42,235,208,62,10,90,210,62,103,200,211,62,66,54,213,62,153,163,214,62,108,16,216,62,185,124,217,62,129,232,218,62,193,83,220,62,121,190,221,62,169,40,223,62,79,146,224,62,107,251,225,62,251,99,227,62,254,203,228,62,117,51,230,62,94,154,231,62,184,0,233,62,130,102,234,62,187,203,235,62,99,48,237,62,121,148,238,62,252,247,239,62,234,90,241,62,68,189,242,62,8,31,244,62,53,128,245,62,203,224,246,62,201,64,248,62,45,160,249,62,248,254,250,62,39,93,252,62,187,186,253,62,179,23,255,62,6,58,0,63,228,231,0,63,115,149,1,63,177,66,2,63,160,239,2,63,61,156,3,63,137,72,4,63,132,244,4,63,44,160,5,63,131,75,6,63,134,246,6,63,54,161,7,63,146,75,8,63,155,245,8,63,79,159,9,63,174,72,10,63,183,241,10,63,107,154,11,63,201,66,12,63,209,234,12,63,129,146,13,63,218,57,14,63,219,224,14,63,133,135,15,63,213,45,16,63,205,211,16,63,107,121,17,63,176,30,18,63,155,195,18,63,43,104,19,63,96,12,20,63,57,176,20,63,184,83,21,63,217,246,21,63,159,153,22,63,7,60,23,63,19,222,23,63,192,127,24,63,16,33,25,63,1,194,25,63,147,98,26,63,198,2,27,63,153,162,27,63,12,66,28,63,31,225,28,63,210,127,29,63,35,30,30,63,18,188,30,63,160,89,31,63,203,246,31,63,147,147,32,63,249,47,33,63,251,203,33,63,153,103,34,63,212,2,35,63,169,157,35,63,26,56,36,63,37,210,36,63,203,107,37,63,10,5,38,63,228,157,38,63,86,54,39,63,97,206,39,63,5,102,40,63,65,253,40,63,21,148,41,63,128,42,42,63,130,192,42,63,27,86,43,63,74,235,43,63,15,128,44,63,106,20,45,63,89,168,45,63,222,59,46,63,247,206,46,63,165,97,47,63,230,243,47,63,187,133,48,63,35,23,49,63,29,168,49,63,170,56,50,63,201,200,50,63,122,88,51,63,188,231,51,63,144,118,52,63,243,4,53,63,232,146,53,63,108,32,54,63,128,173,54,63,35,58,55,63,85,198,55,63,22,82,56,63,101,221,56,63,66,104,57,63,173,242,57,63,165,124,58,63,42,6,59,63,59,143,59,63,217,23,60,63,3,160,60,63,185,39,61,63,249,174,61,63,197,53,62,63,28,188,62,63,253,65,63,63,103,199,63,63,92,76,64,63,218,208,64,63,225,84,65,63,113,216,65,63,137,91,66,63,41,222,66,63,81,96,67,63,1,226,67,63,55,99,68,63,245,227,68,63,57,100,69,63,4,228,69,63,84,99,70,63,42,226,70,63,133,96,71,63,101,222,71,63,202,91,72,63,180,216,72,63,33,85,73,63,19,209,73,63,135,76,74,63,127,199,74,63,250,65,75,63,248,187,75,63,120,53,76,63,122,174,76,63,253,38,77,63,3,159,77,63,137,22,78,63,144,141,78,63,24,4,79,63,32,122,79,63,168,239,79,63,176,100,80,63,55,217,80,63,61,77,81,63,195,192,81,63,199,51,82,63,73,166,82,63,73,24,83,63,199,137,83,63,195,250,83,63,60,107,84,63,50,219,84,63,164,74,85,63,147,185,85,63,254,39,86,63,229,149,86,63,72,3,87,63,38,112,87,63,127,220,87,63,83,72,88,63,162,179,88,63,106,30,89,63,173,136,89,63,106,242,89,63,161,91,90,63,80,196,90,63,121,44,91,63,26,148,91,63,52,251,91,63,199,97,92,63,209,199,92,63,83,45,93,63,77,146,93,63,190,246,93,63,167,90,94,63,6,190,94,63,219,32,95,63,39,131,95,63,233,228,95,63,33,70,96,63,207,166,96,63,242,6,97,63,139,102,97,63,152,197,97,63,26,36,98,63,16,130,98,63,123,223,98,63,90,60,99,63,173,152,99,63,115,244,99,63,172,79,100,63,89,170,100,63,121,4,101,63,12,94,101,63,17,183,101,63,136,15,102,63,113,103,102,63,205,190,102,63,153,21,103,63,216,107,103,63,135,193,103,63,168,22,104,63,58,107,104,63,60,191,104,63,174,18,105,63,145,101,105,63,228,183,105,63,167,9,106,63,217,90,106,63,123,171,106,63,140,251,106,63,12,75,107,63,251,153,107,63,88,232,107,63,36,54,108,63,95,131,108,63,7,208,108,63,30,28,109,63,162,103,109,63,147,178,109,63,242,252,109,63,191,70,110,63,248,143,110,63,158,216,110,63,177,32,111,63,48,104,111,63,28,175,111,63,115,245,111,63,55,59,112,63,103,128,112,63,2,197,112,63,8,9,113,63,122,76,113,63,87,143,113,63,160,209,113,63,83,19,114,63,112,84,114,63,248,148,114,63,235,212,114,63,72,20,115,63,14,83,115,63,63,145,115,63,217,206,115,63,222,11,116,63,75,72,116,63,34,132,116,63,98,191,116,63,11,250,116,63,29,52,117,63,151,109,117,63,123,166,117,63,198,222,117,63,123,22,118,63,151,77,118,63,27,132,118,63,7,186,118,63,91,239,118,63,23,36,119,63,59,88,119,63,197,139,119,63,183,190,119,63,17,241,119,63,209,34,120,63,248,83,120,63,134,132,120,63,123,180,120,63,214,227,120,63,152,18,121,63,192,64,121,63,78,110,121,63,67,155,121,63,158,199,121,63,94,243,121,63,132,30,122,63,16,73,122,63,2,115,122,63,89,156,122,63,22,197,122,63,56,237,122,63,191,20,123,63,171,59,123,63,252,97,123,63,178,135,123,63,205,172,123,63,77,209,123,63,49,245,123,63,122,24,124,63,40,59,124,63,58,93,124,63,176,126,124,63,139,159,124,63,201,191,124,63,108,223,124,63,115,254,124,63,221,28,125,63,172,58,125,63,222,87,125,63,117,116,125,63,110,144,125,63,204,171,125,63,141,198,125,63,177,224,125,63,57,250,125,63,36,19,126,63,114,43,126,63,35,67,126,63,56,90,126,63,176,112,126,63,139,134,126,63,201,155,126,63,105,176,126,63,109,196,126,63,212,215,126,63,157,234,126,63,201,252,126,63,88,14,127,63,73,31,127,63,158,47,127,63,84,63,127,63,109,78,127,63,233,92,127,63,199,106,127,63,8,120,127,63,171,132,127,63,177,144,127,63,25,156,127,63,227,166,127,63,15,177,127,63,158,186,127,63,143,195,127,63,226,203,127,63,152,211,127,63,175,218,127,63,41,225,127,63,5,231,127,63,67,236,127,63,227,240,127,63,230,244,127,63,74,248,127,63,17,251,127,63,57,253,127,63,196,254,127,63,177,255,127,63,0,0,128,63,177,255,127,63,196,254,127,63,57,253,127,63,17,251,127,63,74,248,127,63,230,244,127,63,227,240,127,63,67,236,127,63,5,231,127,63,41,225,127,63,175,218,127,63,151,211,127,63,226,203,127,63,143,195,127,63,158,186,127,63,15,177,127,63,227,166,127,63,24,156,127,63,177,144,127,63,171,132,127,63,8,120,127,63,199,106,127,63,233,92,127,63,109,78,127,63,84,63,127,63,157,47,127,63,73,31,127,63,88,14,127,63,201,252,126,63,157,234,126,63,212,215,126,63,109,196,126,63,105,176,126,63,201,155,126,63,139,134,126,63,176,112,126,63,56,90,126,63,35,67,126,63,114,43,126,63,35,19,126,63,56,250,125,63,177,224,125,63,140,198,125,63,203,171,125,63,110,144,125,63,116,116,125,63,222,87,125,63,172,58,125,63,221,28,125,63,115,254,124,63,108,223,124,63,201,191,124,63,138,159,124,63,176,126,124,63,58,93,124,63,40,59,124,63,122,24,124,63,49,245,123,63,77,209,123,63,205,172,123,63,178,135,123,63,252,97,123,63,171,59,123,63,190,20,123,63,55,237,122,63,21,197,122,63,89,156,122,63,2,115,122,63,16,73,122,63,132,30,122,63,94,243,121,63,157,199,121,63,67,155,121,63,78,110,121,63,192,64,121,63,152,18,121,63,214,227,120,63,122,180,120,63,134,132,120,63,248,83,120,63,208,34,120,63,16,241,119,63,183,190,119,63,197,139,119,63,58,88,119,63,23,36,119,63,91,239,118,63,7,186,118,63,27,132,118,63,150,77,118,63,122,22,118,63,198,222,117,63,122,166,117,63,151,109,117,63,28,52,117,63,10,250,116,63,97,191,116,63,33,132,116,63,75,72,116,63,221,11,116,63,217,206,115,63,63,145,115,63,14,83,115,63,71,20,115,63,234,212,114,63,248,148,114,63,112,84,114,63,82,19,114,63,159,209,113,63,87,143,113,63,122,76,113,63,8,9,113,63,1,197,112,63,102,128,112,63,54,59,112,63,115,245,111,63,27,175,111,63,47,104,111,63,176,32,111,63,157,216,110,63,247,143,110,63,190,70,110,63,242,252,109,63,147,178,109,63,161,103,109,63,29,28,109,63,7,208,108,63,94,131,108,63,36,54,108,63,88,232,107,63,250,153,107,63,11,75,107,63,139,251,106,63,122,171,106,63,216,90,106,63,166,9,106,63,227,183,105,63,145,101,105,63,174,18,105,63,59,191,104,63,57,107,104,63,168,22,104,63,135,193,103,63,215,107,103,63,153,21,103,63,204,190,102,63,113,103,102,63,135,15,102,63,16,183,101,63,11,94,101,63,120,4,101,63,89,170,100,63,172,79,100,63,114,244,99,63,172,152,99,63,89,60,99,63,122,223,98,63,16,130,98,63,25,36,98,63,151,197,97,63,138,102,97,63,242,6,97,63,206,166,96,63,33,70,96,63,233,228,95,63,39,131,95,63,219,32,95,63,5,190,94,63,166,90,94,63,190,246,93,63,77,146,93,63,83,45,93,63,208,199,92,63,198,97,92,63,52,251,91,63,26,148,91,63,120,44,91,63,79,196,90,63,160,91,90,63,105,242,89,63,173,136,89,63,106,30,89,63,161,179,88,63,82,72,88,63,126,220,87,63,37,112,87,63,71,3,87,63,228,149,86,63,253,39,86,63,146,185,85,63,163,74,85,63,49,219,84,63,59,107,84,63,194,250,83,63,198,137,83,63,72,24,83,63,72,166,82,63,198,51,82,63,194,192,81,63,60,77,81,63,54,217,80,63,175,100,80,63,167,239,79,63,31,122,79,63,23,4,79,63,143,141,78,63,136,22,78,63,2,159,77,63,253,38,77,63,121,174,76,63,119,53,76,63,247,187,75,63,249,65,75,63,127,199,74,63,134,76,74,63,18,209,73,63,32,85,73,63,179,216,72,63,201,91,72,63,100,222,71,63,132,96,71,63,41,226,70,63,83,99,70,63,3,228,69,63,56,100,69,63,244,227,68,63,55,99,68,63,0,226,67,63,80,96,67,63,40,222,66,63,136,91,66,63,112,216,65,63,224,84,65,63,217,208,64,63,91,76,64,63,102,199,63,63,252,65,63,63,27,188,62,63,196,53,62,63,248,174,61,63,184,39,61,63,2,160,60,63,216,23,60,63,58,143,59,63,41,6,59,63,164,124,58,63,172,242,57,63,65,104,57,63,100,221,56,63,21,82,56,63,84,198,55,63,34,58,55,63,127,173,54,63,107,32,54,63,231,146,53,63,242,4,53,63,143,118,52,63,187,231,51,63,121,88,51,63,200,200,50,63,169,56,50,63,28,168,49,63,34,23,49,63,186,133,48,63,229,243,47,63,164,97,47,63,246,206,46,63,221,59,46,63,88,168,45,63,104,20,45,63,14,128,44,63,73,235,43,63,26,86,43,63,129,192,42,63,127,42,42,63,20,148,41,63,64,253,40,63,4,102,40,63,96,206,39,63,85,54,39,63,227,157,38,63,9,5,38,63,202,107,37,63,36,210,36,63,25,56,36,63,168,157,35,63,210,2,35,63,152,103,34,63,250,203,33,63,248,47,33,63,146,147,32,63,202,246,31,63,158,89,31,63,17,188,30,63,33,30,30,63,208,127,29,63,30,225,28,63,11,66,28,63,152,162,27,63,197,2,27,63,146,98,26,63,255,193,25,63,14,33,25,63,191,127,24,63,17,222,23,63,6,60,23,63,158,153,22,63,216,246,21,63,182,83,21,63,56,176,20,63,95,12,20,63,41,104,19,63,153,195,18,63,175,30,18,63,106,121,17,63,204,211,16,63,212,45,16,63,131,135,15,63,218,224,14,63,217,57,14,63,128,146,13,63,207,234,12,63,200,66,12,63,106,154,11,63,182,241,10,63,172,72,10,63,77,159,9,63,154,245,8,63,145,75,8,63,53,161,7,63,133,246,6,63,129,75,6,63,43,160,5,63,131,244,4,63,136,72,4,63,60,156,3,63,158,239,2,63,176,66,2,63,114,149,1,63,227,231,0,63,5,58,0,63,176,23,255,62,185,186,253,62,37,93,252,62,245,254,250,62,43,160,249,62,198,64,248,62,200,224,246,62,51,128,245,62,5,31,244,62,65,189,242,62,232,90,241,62,249,247,239,62,118,148,238,62,97,48,237,62,185,203,235,62,127,102,234,62,181,0,233,62,91,154,231,62,115,51,230,62,252,203,228,62,248,99,227,62,104,251,225,62,76,146,224,62,166,40,223,62,119,190,221,62,190,83,220,62,126,232,218,62,183,124,217,62,105,16,216,62,150,163,214,62,63,54,213,62,100,200,211,62,7,90,210,62,40,235,208,62,200,123,207,62,232,11,206,62,137,155,204,62,171,42,203,62,81,185,201,62,122,71,200,62,39,213,198,62,90,98,197,62,19,239,195,62,83,123,194,62,27,7,193,62,108,146,191,62,71,29,190,62,173,167,188,62,158,49,187,62,28,187,185,62,39,68,184,62,193,204,182,62,234,84,181,62,162,220,179,62,236,99,178,62,200,234,176,62,55,113,175,62,58,247,173,62,209,124,172,62,254,1,171,62,194,134,169,62,28,11,168,62,16,143,166,62,156,18,165,62,195,149,163,62,132,24,162,62,226,154,160,62,221,28,159,62,117,158,157,62,173,31,156,62,132,160,154,62,251,32,153,62,20,161,151,62,208,32,150,62,47,160,148,62,50,31,147,62,219,157,145,62,42,28,144,62,31,154,142,62,189,23,141,62,4,149,139,62,245,17,138,62,145,142,136,62,216,10,135,62,204,134,133,62,110,2,132,62,190,125,130,62,190,248,128,62,220,230,126,62,159,219,123,62,199,207,120,62,85,195,117,62,76,182,114,62,173,168,111,62,122,154,108,62,181,139,105,62,96,124,102,62,125,108,99,62,14,92,96,62,20,75,93,62,146,57,90,62,137,39,87,62,252,20,84,62,235,1,81,62,90,238,77,62,74,218,74,62,188,197,71,62,180,176,68,62,50,155,65,62,56,133,62,62,202,110,59,62,231,87,56,62,147,64,53,62,207,40,50,62,157,16,47,62,255,247,43,62,247,222,40,62,134,197,37,62,176,171,34,62,117,145,31,62,216,118,28,62,218,91,25,62,126,64,22,62,197,36,19,62,177,8,16,62,68,236,12,62,129,207,9,62,104,178,6,62,253,148,3,62,64,119,0,62,104,178,250,61,181,117,244,61,107,56,238,61,143,250,231,61,35,188,225,61,44,125,219,61,174,61,213,61,172,253,206,61,43,189,200,61,45,124,194,61,184,58,188,61,207,248,181,61,117,182,175,61,175,115,169,61,128,48,163,61,237,236,156,61,249,168,150,61,168,100,144,61,254,31,138,61,255,218,131,61,93,43,123,61,33,160,110,61,82,20,98,61,247,135,85,61,24,251,72,61,190,109,60,61,239,223,47,61,180,81,35,61,20,195,22,61,24,52,10,61,139,73,251,60,76,42,226,60,129,10,201,60,58,234,175,60,135,201,150,60,238,80,123,60,50,14,73,60,251,202,22,60,205,14,201,59,79,14,73,59,46,189,187,179,62,17,73,187,68,16,201,187,183,203,22,188,238,14,73,188,170,81,123,188,229,201,150,188,152,234,175,188,223,10,201,188,170,42,226,188,233,73,251,188,71,52,10,189,67,195,22,189,227,81,35,189,30,224,47,189,237,109,60,189,71,251,72,189,38,136,85,189,128,20,98,189,80,160,110,189,140,43,123,189,22,219,131,189,22,32,138,189,192,100,144,189,17,169,150,189,5,237,156,189,152,48,163,189,198,115,169,189,140,182,175,189,230,248,181,189,207,58,188,189,69,124,194,189,66,189,200,189,195,253,206,189,197,61,213,189,67,125,219,189,58,188,225,189,166,250,231,189,130,56,238,189,204,117,244,189,127,178,250,189,75,119,0,190,8,149,3,190,116,178,6,190,141,207,9,190,80,236,12,190,189,8,16,190,209,36,19,190,138,64,22,190,230,91,25,190,228,118,28,190,129,145,31,190,188,171,34,190,146,197,37,190,2,223,40,190,10,248,43,190,168,16,47,190,218,40,50,190,158,64,53,190,243,87,56,190,213,110,59,190,68,133,62,190,61,155,65,190,191,176,68,190,200,197,71,190,85,218,74,190,102,238,77,190,247,1,81,190,7,21,84,190,149,39,87,190,158,57,90,190,32,75,93,190,25,92,96,190,137,108,99,190,108,124,102,190,193,139,105,190,133,154,108,190,184,168,111,190,87,182,114,190,96,195,117,190,210,207,120,190,170,219,123,190,231,230,126,190,195,248,128,190,196,125,130,190,115,2,132,190,210,134,133,190,222,10,135,190,150,142,136,190,251,17,138,190,10,149,139,190,195,23,141,190,37,154,142,190,47,28,144,190,224,157,145,190,56,31,147,190,53,160,148,190,214,32,150,190,26,161,151,190,1,33,153,190,137,160,154,190,178,31,156,190,123,158,157,190,226,28,159,190,232,154,160,190,138,24,162,190,200,149,163,190,162,18,165,190,21,143,166,190,34,11,168,190,199,134,169,190,4,2,171,190,215,124,172,190,63,247,173,190,61,113,175,190,206,234,176,190,242,99,178,190,168,220,179,190,239,84,181,190,198,204,182,190,45,68,184,190,33,187,185,190,164,49,187,190,178,167,188,190,77,29,190,190,114,146,191,190,33,7,193,190,88,123,194,190,24,239,195,190,95,98,197,190,45,213,198,190,127,71,200,190,86,185,201,190,177,42,203,190,142,155,204,190,237,11,206,190,205,123,207,190,45,235,208,190,12,90,210,190,106,200,211,190,68,54,213,190,156,163,214,190,110,16,216,190,188,124,217,190,131,232,218,190,196,83,220,190,124,190,221,190,172,40,223,190,82,146,224,190,109,251,225,190,253,99,227,190,1,204,228,190,120,51,230,190,96,154,231,190,186,0,233,190,132,102,234,190,190,203,235,190,102,48,237,190,124,148,238,190,254,247,239,190,237,90,241,190,70,189,242,190,10,31,244,190,56,128,245,190,206,224,246,190,203,64,248,190,48,160,249,190,250,254,250,190,42,93,252,190,190,186,253,190,181,23,255,190,8,58,0,191,230,231,0,191,116,149,1,191,179,66,2,191,161,239,2,191,62,156,3,191,138,72,4,191,133,244,4,191,46,160,5,191,132,75,6,191,135,246,6,191,55,161,7,191,148,75,8,191,156,245,8,191,80,159,9,191,175,72,10,191,185,241,10,191,109,154,11,191,202,66,12,191,210,234,12,191,130,146,13,191,219,57,14,191,221,224,14,191,134,135,15,191,214,45,16,191,206,211,16,191,109,121,17,191,177,30,18,191,156,195,18,191,44,104,19,191,97,12,20,191,59,176,20,191,185,83,21,191,219,246,21,191,160,153,22,191,9,60,23,191,20,222,23,191,193,127,24,191,17,33,25,191,2,194,25,191,148,98,26,191,199,2,27,191,154,162,27,191,14,66,28,191,33,225,28,191,211,127,29,191,36,30,30,191,19,188,30,191,161,89,31,191,204,246,31,191,149,147,32,191,250,47,33,191,252,203,33,191,155,103,34,191,213,2,35,191,170,157,35,191,27,56,36,191,38,210,36,191,204,107,37,191,12,5,38,191,229,157,38,191,87,54,39,191,99,206,39,191,6,102,40,191,66,253,40,191,22,148,41,191,129,42,42,191,131,192,42,191,28,86,43,191,75,235,43,191,16,128,44,191,107,20,45,191,91,168,45,191,223,59,46,191,249,206,46,191,166,97,47,191,231,243,47,191,188,133,48,191,36,23,49,191,30,168,49,191,171,56,50,191,202,200,50,191,123,88,51,191,189,231,51,191,145,118,52,191,244,4,53,191,233,146,53,191,109,32,54,191,129,173,54,191,36,58,55,191,86,198,55,191,23,82,56,191,102,221,56,191,67,104,57,191,174,242,57,191,166,124,58,191,43,6,59,191,60,143,59,191,218,23,60,191,4,160,60,191,185,39,61,191,250,174,61,191,198,53,62,191,29,188,62,191,253,65,63,191,104,199,63,191,93,76,64,191,219,208,64,191,226,84,65,191,114,216,65,191,138,91,66,191,42,222,66,191,82,96,67,191,2,226,67,191,56,99,68,191,246,227,68,191,58,100,69,191,5,228,69,191,85,99,70,191,43,226,70,191,134,96,71,191,102,222,71,191,203,91,72,191,181,216,72,191,34,85,73,191,19,209,73,191,136,76,74,191,128,199,74,191,251,65,75,191,249,187,75,191,121,53,76,191,123,174,76,191,254,38,77,191,3,159,77,191,138,22,78,191,145,141,78,191,25,4,79,191,33,122,79,191,169,239,79,191,176,100,80,191,56,217,80,191,62,77,81,191,195,192,81,191,199,51,82,191,74,166,82,191,74,24,83,191,200,137,83,191,196,250,83,191,61,107,84,191,50,219,84,191,165,74,85,191,148,185,85,191,255,39,86,191,230,149,86,191,73,3,87,191,39,112,87,191,128,220,87,191,84,72,88,191,162,179,88,191,107,30,89,191,174,136,89,191,107,242,89,191,161,91,90,191,81,196,90,191,122,44,91,191,27,148,91,191,53,251,91,191,200,97,92,191,210,199,92,191,84,45,93,191,78,146,93,191,191,246,93,191,167,90,94,191,6,190,94,191,220,32,95,191,40,131,95,191,234,228,95,191,34,70,96,191,208,166,96,191,243,6,97,191,139,102,97,191,152,197,97,191,26,36,98,191,17,130,98,191,124,223,98,191,91,60,99,191,173,152,99,191,115,244,99,191,173,79,100,191,90,170,100,191,122,4,101,191,12,94,101,191,17,183,101,191,136,15,102,191,114,103,102,191,205,190,102,191,154,21,103,191,216,107,103,191,136,193,103,191,169,22,104,191,58,107,104,191,60,191,104,191,175,18,105,191,146,101,105,191,229,183,105,191,167,9,106,191,218,90,106,191,123,171,106,191,140,251,106,191,12,75,107,191,251,153,107,191,89,232,107,191,37,54,108,191,95,131,108,191,8,208,108,191,30,28,109,191,162,103,109,191,148,178,109,191,243,252,109,191,191,70,110,191,248,143,110,191,158,216,110,191,177,32,111,191,48,104,111,191,28,175,111,191,116,245,111,191,55,59,112,191,103,128,112,191,2,197,112,191,9,9,113,191,123,76,113,191,88,143,113,191,160,209,113,191,83,19,114,191,113,84,114,191,249,148,114,191,235,212,114,191,72,20,115,191,15,83,115,191,63,145,115,191,218,206,115,191,222,11,116,191,75,72,116,191,34,132,116,191,98,191,116,191,11,250,116,191,29,52,117,191,152,109,117,191,123,166,117,191,199,222,117,191,123,22,118,191,151,77,118,191,28,132,118,191,8,186,118,191,92,239,118,191,24,36,119,191,59,88,119,191,198,139,119,191,184,190,119,191,17,241,119,191,209,34,120,191,248,83,120,191,134,132,120,191,123,180,120,191,214,227,120,191,152,18,121,191,192,64,121,191,79,110,121,191,67,155,121,191,158,199,121,191,94,243,121,191,133,30,122,191,17,73,122,191,2,115,122,191,89,156,122,191,22,197,122,191,56,237,122,191,191,20,123,191,171,59,123,191,252,97,123,191,178,135,123,191,206,172,123,191,77,209,123,191,50,245,123,191,123,24,124,191,40,59,124,191,58,93,124,191,176,126,124,191,139,159,124,191,201,191,124,191,108,223,124,191,115,254,124,191,222,28,125,191,172,58,125,191,223,87,125,191,117,116,125,191,110,144,125,191,204,171,125,191,141,198,125,191,177,224,125,191,57,250,125,191,36,19,126,191,114,43,126,191,36,67,126,191,56,90,126,191,176,112,126,191,139,134,126,191,201,155,126,191,106,176,126,191,109,196,126,191,212,215,126,191,157,234,126,191,201,252,126,191,88,14,127,191,74,31,127,191,158,47,127,191,84,63,127,191,110,78,127,191,233,92,127,191,200,106,127,191,8,120,127,191,171,132,127,191,177,144,127,191,25,156,127,191,227,166,127,191,15,177,127,191,158,186,127,191,143,195,127,191,226,203,127,191,152,211,127,191,175,218,127,191,41,225,127,191,5,231,127,191,67,236,127,191,227,240,127,191,230,244,127,191,74,248,127,191,17,251,127,191,57,253,127,191,196,254,127,191,177,255,127,191,0,0,128,191,177,255,127,191,196,254,127,191,57,253,127,191,17,251,127,191,74,248,127,191,230,244,127,191,227,240,127,191,67,236,127,191,5,231,127,191,41,225,127,191,175,218,127,191,151,211,127,191,226,203,127,191,143,195,127,191,158,186,127,191,15,177,127,191,227,166,127,191,24,156,127,191,177,144,127,191,171,132,127,191,8,120,127,191,199,106,127,191,233,92,127,191,109,78,127,191,84,63,127,191,157,47,127,191,73,31,127,191,88,14,127,191,201,252,126,191,157,234,126,191,211,215,126,191,109,196,126,191,105,176,126,191,200,155,126,191,139,134,126,191,176,112,126,191,56,90,126,191,35,67,126,191,114,43,126,191,35,19,126,191,56,250,125,191,176,224,125,191,140,198,125,191,203,171,125,191,110,144,125,191,116,116,125,191,222,87,125,191,172,58,125,191,221,28,125,191,114,254,124,191,108,223,124,191,201,191,124,191,138,159,124,191,176,126,124,191,57,93,124,191,39,59,124,191,122,24,124,191,49,245,123,191,76,209,123,191,205,172,123,191,178,135,123,191,252,97,123,191,170,59,123,191,190,20,123,191,55,237,122,191,21,197,122,191,89,156,122,191,1,115,122,191,16,73,122,191,132,30,122,191,93,243,121,191,157,199,121,191,66,155,121,191,78,110,121,191,191,64,121,191,151,18,121,191,213,227,120,191,122,180,120,191,133,132,120,191,247,83,120,191,208,34,120,191,16,241,119,191,183,190,119,191,197,139,119,191,58,88,119,191,22,36,119,191,91,239,118,191,7,186,118,191,26,132,118,191,150,77,118,191,122,22,118,191,198,222,117,191,122,166,117,191,151,109,117,191,28,52,117,191,10,250,116,191,97,191,116,191,33,132,116,191,74,72,116,191,221,11,116,191,217,206,115,191,62,145,115,191,13,83,115,191,71,20,115,191,234,212,114,191,247,148,114,191,111,84,114,191,82,19,114,191,159,209,113,191,86,143,113,191,121,76,113,191,7,9,113,191,1,197,112,191,102,128,112,191,54,59,112,191,114,245,111,191,26,175,111,191,47,104,111,191,176,32,111,191,157,216,110,191,247,143,110,191,189,70,110,191,241,252,109,191,146,178,109,191,161,103,109,191,28,28,109,191,6,208,108,191,94,131,108,191,35,54,108,191,87,232,107,191,250,153,107,191,11,75,107,191,139,251,106,191,122,171,106,191,216,90,106,191,166,9,106,191,227,183,105,191,144,101,105,191,173,18,105,191,59,191,104,191,56,107,104,191,167,22,104,191,134,193,103,191,215,107,103,191,152,21,103,191,203,190,102,191,112,103,102,191,135,15,102,191,15,183,101,191,10,94,101,191,120,4,101,191,88,170,100,191,171,79,100,191,113,244,99,191,171,152,99,191,89,60,99,191,122,223,98,191,15,130,98,191,24,36,98,191,150,197,97,191,137,102,97,191,241,6,97,191,206,166,96,191,32,70,96,191,232,228,95,191,38,131,95,191,218,32,95,191,4,190,94,191,165,90,94,191,189,246,93,191,76,146,93,191,82,45,93,191,208,199,92,191,197,97,92,191,51,251,91,191,25,148,91,191,119,44,91,191,79,196,90,191,159,91,90,191,105,242,89,191,172,136,89,191,105,30,89,191,160,179,88,191,81,72,88,191,125,220,87,191,36,112,87,191,70,3,87,191,228,149,86,191,253,39,86,191,145,185,85,191,162,74,85,191,48,219,84,191,58,107,84,191,193,250,83,191,198,137,83,191,71,24,83,191,71,166,82,191,197,51,82,191,193,192,81,191,60,77,81,191,53,217,80,191,174,100,80,191,166,239,79,191,30,122,79,191,22,4,79,191,142,141,78,191,135,22,78,191,1,159,77,191,252,38,77,191,120,174,76,191,118,53,76,191,246,187,75,191,249,65,75,191,126,199,74,191,134,76,74,191,17,209,73,191,31,85,73,191,178,216,72,191,201,91,72,191,100,222,71,191,131,96,71,191,40,226,70,191,82,99,70,191,2,228,69,191,55,100,69,191,243,227,68,191,54,99,68,191,255,225,67,191,79,96,67,191,39,222,66,191,135,91,66,191,111,216,65,191,223,84,65,191,216,208,64,191,90,76,64,191,101,199,63,191,251,65,63,191,26,188,62,191,195,53,62,191,247,174,61,191,183,39,61,191,1,160,60,191,215,23,60,191,57,143,59,191,40,6,59,191,163,124,58,191,171,242,57,191,64,104,57,191,99,221,56,191,20,82,56,191,83,198,55,191,33,58,55,191,126,173,54,191,106,32,54,191,230,146,53,191,241,4,53,191,142,118,52,191,186,231,51,191,120,88,51,191,199,200,50,191,168,56,50,191,27,168,49,191,33,23,49,191,185,133,48,191,228,243,47,191,163,97,47,191,245,206,46,191,220,59,46,191,87,168,45,191,103,20,45,191,13,128,44,191,72,235,43,191,25,86,43,191,128,192,42,191,126,42,42,191,19,148,41,191,63,253,40,191,3,102,40,191,95,206,39,191,84,54,39,191,225,157,38,191,8,5,38,191,201,107,37,191,35,210,36,191,24,56,36,191,167,157,35,191,209,2,35,191,151,103,34,191,249,203,33,191,247,47,33,191,145,147,32,191,201,246,31,191,157,89,31,191,16,188,30,191,32,30,30,191,207,127,29,191,29,225,28,191,10,66,28,191,151,162,27,191,195,2,27,191,144,98,26,191,254,193,25,191,13,33,25,191,190,127,24,191,16,222,23,191,5,60,23,191,156,153,22,191,215,246,21,191,181,83,21,191,55,176,20,191,93,12,20,191,40,104,19,191,152,195,18,191,174,30,18,191,105,121,17,191,203,211,16,191,211,45,16,191,130,135,15,191,217,224,14,191,216,57,14,191,127,146,13,191,206,234,12,191,199,66,12,191,105,154,11,191,181,241,10,191,171,72,10,191,76,159,9,191,152,245,8,191,144,75,8,191,52,161,7,191,131,246,6,191,128,75,6,191,42,160,5,191,129,244,4,191,135,72,4,191,58,156,3,191,157,239,2,191,175,66,2,191,112,149,1,191,226,231,0,191,4,58,0,191,174,23,255,190,182,186,253,190,34,93,252,190,243,254,250,190,40,160,249,190,195,64,248,190,198,224,246,190,48,128,245,190,3,31,244,190,63,189,242,190,229,90,241,190,246,247,239,190,116,148,238,190,94,48,237,190,182,203,235,190,125,102,234,190,178,0,233,190,89,154,231,190,112,51,230,190,249,203,228,190,245,99,227,190,101,251,225,190,74,146,224,190,164,40,223,190,116,190,221,190,188,83,220,190,123,232,218,190,180,124,217,190,102,16,216,190,148,163,214,190,60,54,213,190,98,200,211,190,4,90,210,190,37,235,208,190,197,123,207,190,229,11,206,190,134,155,204,190,169,42,203,190,78,185,201,190,119,71,200,190,36,213,198,190,87,98,197,190,16,239,195,190,80,123,194,190,24,7,193,190,105,146,191,190,68,29,190,190,170,167,188,190,155,49,187,190,25,187,185,190,36,68,184,190,190,204,182,190,231,84,181,190,160,220,179,190,234,99,178,190,198,234,176,190,53,113,175,190,55,247,173,190,206,124,172,190,251,1,171,190,191,134,169,190,26,11,168,190,13,143,166,190,153,18,165,190,192,149,163,190,130,24,162,190,223,154,160,190,218,28,159,190,115,158,157,190,170,31,156,190,129,160,154,190,248,32,153,190,18,161,151,190,205,32,150,190,44,160,148,190,47,31,147,190,216,157,145,190,39,28,144,190,29,154,142,190,186,23,141,190,1,149,139,190,242,17,138,190,142,142,136,190,213,10,135,190,201,134,133,190,107,2,132,190,187,125,130,190,187,248,128,190,214,230,126,190,153,219,123,190,193,207,120,190,79,195,117,190,70,182,114,190,167,168,111,190,116,154,108,190,175,139,105,190,91,124,102,190,120,108,99,190,8,92,96,190,15,75,93,190,140,57,90,190,132,39,87,190,246,20,84,190,230,1,81,190,84,238,77,190,68,218,74,190,183,197,71,190,174,176,68,190,44,155,65,190,51,133,62,190,196,110,59,190,225,87,56,190,141,64,53,190,201,40,50,190,151,16,47,190,249,247,43,190,241,222,40,190,129,197,37,190,170,171,34,190,111,145,31,190,210,118,28,190,212,91,25,190,120,64,22,190,191,36,19,190,171,8,16,190,63,236,12,190,123,207,9,190,99,178,6,190,247,148,3,190,58,119,0,190,92,178,250,189,169,117,244,189,95,56,238,189,131,250,231,189,23,188,225,189,32,125,219,189,162,61,213,189,160,253,206,189,31,189,200,189,34,124,194,189,172,58,188,189,195,248,181,189,105,182,175,189,163,115,169,189,117,48,163,189,225,236,156,189,237,168,150,189,157,100,144,189,242,31,138,189,243,218,131,189,69,43,123,189,9,160,110,189,58,20,98,189,223,135,85,189,1,251,72,189,167,109,60,189,216,223,47,189,157,81,35,189,253,194,22,189,0,52,10,189,92,73,251,188,29,42,226,188,82,10,201,188,12,234,175,188,88,201,150,188,144,80,123,188,213,13,73,188,157,202,22,188,17,14,201,187,215,12,73,187,104,90,4,0,0,0,0,0,0,0,0,0,223,231,29,57,201,225,29,58,153,146,177,58,113,201,29,59,61,110,118,59,3,85,177,59,12,54,241,59,49,104,29,60,84,12,71,60,5,129,117,60,141,95,148,60,85,95,176,60,139,187,206,60,126,111,239,60,19,59,9,61,13,229,27,61,204,178,47,61,68,161,68,61,56,173,90,61,68,211,113,61,235,7,133,61,152,175,145,61,182,222,158,61,59,147,172,61,13,203,186,61,248,131,201,61,184,187,216,61,243,111,232,61,63,158,248,61,14,162,4,62,125,47,13,62,26,246,21,62,139,244,30,62,109,41,40,62,85,147,49,62,206,48,59,62,94,0,69,62,129,0,79,62,172,47,89,62,77,140,99,62,204,20,110,62,135,199,120,62,109,209,129,62,140,82,135,62,70,230,140,62,192,139,146,62,27,66,152,62,118,8,158,62,236,221,163,62,151,193,169,62,142,178,175,62,232,175,181,62,183,184,187,62,14,204,193,62,252,232,199,62,144,14,206,62,216,59,212,62,224,111,218,62,178,169,224,62,90,232,230,62,224,42,237,62,78,112,243,62,171,183,249,62,0,0,0,63,43,36,3,63,218,71,6,63,145,106,9,63,212,139,12,63,40,171,15,63,17,200,18,63,21,226,21,63,185,248,24,63,131,11,28,63,250,25,31,63,165,35,34,63,13,40,37,63,186,38,40,63,53,31,43,63,11,17,46,63,198,251,48,63,243,222,51,63,33,186,54,63,222,140,57,63,187,86,60,63,74,23,63,63,31,206,65,63,206,122,68,63,237,28,71,63,22,180,73,63,224,63,76,63,233,191,78,63,205,51,81,63,43,155,83,63,165,245,85,63,222,66,88,63,122,130,90,63,33,180,92,63,125,215,94,63,57,236,96,63,2,242,98,63,138,232,100,63,129,207,102,63,159,166,104,63,153,109,106,63,42,36,108,63,13,202,109,63,3,95,111,63,204,226,112,63,45,85,114,63,236,181,115,63,212,4,117,63,175,65,118,63,79,108,119,63,132,132,120,63,36,138,121,63,6,125,122,63,4,93,123,63,252,41,124,63,207,227,124,63,95,138,125,63,148,29,126,63,86,157,126,63,146,9,127,63,55,98,127,63,55,167,127,63,136,216,127,63,34,246,127,63,112,122,4,0,0,0,0,0,0,0,128,63,33,246,127,63,136,216,127,63,55,167,127,63,54,98,127,63,146,9,127,63,86,157,126,63,148,29,126,63,95,138,125,63,207,227,124,63,252,41,124,63,3,93,123,63,5,125,122,63,35,138,121,63,132,132,120,63,79,108,119,63,175,65,118,63,211,4,117,63,235,181,115,63,44,85,114,63,203,226,112,63,2,95,111,63,13,202,109,63,41,36,108,63,152,109,106,63,158,166,104,63,129,207,102,63,137,232,100,63,1,242,98,63,56,236,96,63,124,215,94,63,32,180,92,63,121,130,90,63,221,66,88,63,164,245,85,63,42,155,83,63,204,51,81,63,232,191,78,63,223,63,76,63,20,180,73,63,236,28,71,63,204,122,68,63,30,206,65,63,73,23,63,63,186,86,60,63,220,140,57,63,31,186,54,63,242,222,51,63,196,251,48,63,9,17,46,63,52,31,43,63,184,38,40,63,11,40,37,63,164,35,34,63,248,25,31,63,129,11,28,63,183,248,24,63,19,226,21,63,15,200,18,63,38,171,15,63,210,139,12,63,143,106,9,63,216,71,6,63,42,36,3,63,254,255,255,62,168,183,249,62,75,112,243,62,221,42,237,62,87,232,230,62,175,169,224,62,221,111,218,62,213,59,212,62,141,14,206,62,249,232,199,62,11,204,193,62,180,184,187,62,229,175,181,62,139,178,175,62,148,193,169,62,233,221,163,62,115,8,158,62,25,66,152,62,190,139,146,62,67,230,140,62,137,82,135,62,106,209,129,62,130,199,120,62,199,20,110,62,72,140,99,62,167,47,89,62,124,0,79,62,89,0,69,62,202,48,59,62,80,147,49,62,105,41,40,62,135,244,30,62,22,246,21,62,121,47,13,62,10,162,4,62,56,158,248,61,236,111,232,61,176,187,216,61,241,131,201,61,6,203,186,61,53,147,172,61,175,222,158,61,146,175,145,61,229,7,133,61,57,211,113,61,46,173,90,61,58,161,68,61,195,178,47,61], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+284208);
/* memory initializer */ allocate([4,229,27,61,10,59,9,61,111,111,239,60,124,187,206,60,72,95,176,60,128,95,148,60,239,128,117,60,64,12,71,60,30,104,29,60,236,53,241,59,231,84,177,59,15,110,118,59,77,201,29,59,97,146,177,58,127,225,29,58,76,231,29,57,120,124,4,0,0,0,0,0,27,52,208,63,4,102,35,63,104,23,227,191,26,63,233,191,255,237,202,191,245,251,176,191,98,38,156,191,158,98,13,192,190,71,214,192,18,187,162,193,132,18,175,192,111,178,35,192,125,234,9,192,78,223,0,192,189,188,251,191,168,153,28,64,175,117,53,192,133,39,118,191,127,100,186,63,2,215,8,64,174,49,21,64,151,198,26,64,110,198,29,64,127,111,163,63,189,18,87,63,218,250,135,63,247,21,185,63,80,166,174,63,236,240,165,63,197,88,161,63,251,189,158,63,63,223,6,192,10,182,131,191,15,69,132,191,18,215,183,191,24,222,247,191,70,219,11,192,230,30,22,192,241,188,28,192,145,211,244,191,198,239,62,63,133,133,207,62,223,22,89,191,155,133,175,191,182,60,200,191,171,253,218,191,78,132,236,191,71,101,40,192,197,86,135,192,123,248,7,193,223,51,235,192,12,243,125,192,182,202,73,192,1,152,44,192,133,28,24,192,168,0,152,63,132,15,131,192,173,109,210,191,24,237,20,62,182,150,12,63,207,50,66,63,65,124,114,63,230,44,146,63,147,106,35,64,1,93,2,64,46,210,48,64,68,194,136,64,207,170,132,64,102,34,107,64,90,204,75,64,82,78,45,64,115,68,238,191,82,141,57,191,170,35,57,191,237,200,80,191,235,160,141,191,52,111,174,191,207,190,208,191,164,174,246,191,123,68,137,191,78,210,64,193,67,169,253,192,206,242,47,193,106,181,146,194,25,65,143,66,253,97,34,66,242,188,61,66,141,22,144,191,128,126,4,0,0,0,0,0,137,15,201,59,184,73,251,60,106,20,98,61,140,48,163,61,181,61,213,61,2,149,3,62,223,118,28,62,151,64,53,62,93,238,77,62,101,124,102,62,224,230,126,62,8,149,139,62,23,161,151,62,196,149,163,62,57,113,175,62,161,49,187,62,40,213,198,62,10,90,210,62,120,190,221,62,184,0,233,62,6,31,244,62,179,23,255,62,132,244,4,63,172,72,10,63,133,135,15,63,56,176,20,63,1,194,25,63,18,188,30,63,170,157,35,63,5,102,40,63,105,20,45,63,30,168,49,63,108,32,54,63,165,124,58,63,28,188,62,63,41,222,66,63,42,226,70,63,128,199,74,63,144,141,78,63,198,51,82,63,147,185,85,63,105,30,89,63,200,97,92,63,39,131,95,63,16,130,98,63,10,94,101,63,168,22,104,63,123,171,106,63,29,28,109,63,48,104,111,63,86,143,113,63,63,145,115,63,152,109,117,63,22,36,119,63,123,180,120,63,131,30,122,63,252,97,123,63,176,126,124,63,116,116,125,63,35,67,126,63,157,234,126,63,198,106,127,63,142,195,127,63,230,244,127,63,197,254,127,63,41,225,127,63,25,156,127,63,157,47,127,63,201,155,126,63,178,224,125,63,115,254,124,63,49,245,123,63,22,197,122,63,79,110,121,63,16,241,119,63,151,77,118,63,34,132,116,63,248,148,114,63,102,128,112,63,189,70,110,63,87,232,107,63,144,101,105,63,204,190,102,63,114,244,99,63,242,6,97,63,189,246,93,63,80,196,90,63,38,112,87,63,196,250,83,63,175,100,80,63,120,174,76,63,180,216,72,63,244,227,68,63,218,208,64,63,3,160,60,63,21,82,56,63,187,231,51,63,165,97,47,63,129,192,42,63,10,5,38,63,250,47,33,63,12,66,28,63,7,60,23,63,177,30,18,63,209,234,12,63,53,161,7,63,176,66,2,63,46,160,249,62,121,148,238,62,249,99,227,62,108,16,216,62,139,155,204,62,29,7,193,62,235,84,181,62,196,134,169,62,118,158,157,62,220,157,145,62,206,134,133,62,81,182,114,62,150,57,90,62,58,155,65,62,251,222,40,62,180,8,16,62,114,56,238,61,194,58,188,61,10,32,138,61,7,224,47,61,182,201,150,60,177,10,201,60,118,178,250,61,17,92,96,62,231,154,160,62,202,123,207,62,39,93,252,62,43,104,19,63,87,54,39,63,66,104,57,63,18,209,73,63,83,72,88,63,89,170,100,63,158,216,110,63,8,186,118,63,41,59,124,63,108,78,127,63,67,236,127,63,37,19,126,63,157,199,121,63,72,20,115,63,167,9,106,63,6,190,94,63,61,77,81,63,112,216,65,63,188,133,48,63,209,127,29,63,154,245,8,63,116,51,230,62,44,68,184,62,149,142,136,62,163,16,47,62,5,169,150,61,49,251,72,61,205,207,120,62,129,232,218,62,192,127,24,63,249,174,61,63,26,148,91,63,9,9,113,63,172,58,125,63,14,177,127,63,249,83,120,63,216,107,103,63,2,159,77,63,74,235,43,63,62,156,3,63,213,124,172,62,133,64,22,62,49,251,72,189,205,207,120,190,129,232,218,190,192,127,24,191,249,174,61,191,26,148,91,191,9,9,113,191,172,58,125,191,14,177,127,191,249,83,120,191,216,107,103,191,2,159,77,191,74,235,43,191,62,156,3,191,213,124,172,190,133,64,22,190,54,189,200,61,233,90,241,62,2,228,69,63,12,250,116,63,109,196,126,63,152,197,97,63,153,103,34,63,50,160,148,62,54,189,200,189,233,90,241,190,2,228,69,191,12,250,116,191,109,196,126,191,152,197,97,191,153,103,34,191,50,160,148,190,54,189,200,61,233,90,241,62,2,228,69,63,12,250,116,63,109,196,126,63,152,197,97,63,153,103,34,63,50,160,148,62,54,189,200,189,233,90,241,190,2,228,69,191,12,250,116,191,109,196,126,191,152,197,97,191,153,103,34,191,50,160,148,190,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,67,236,127,63,37,19,126,63,157,199,121,63,72,20,115,63,167,9,106,63,6,190,94,63,61,77,81,63,112,216,65,63,188,133,48,63,209,127,29,63,154,245,8,63,116,51,230,62,44,68,184,62,149,142,136,62,163,16,47,62,5,169,150,61,177,10,201,188,118,178,250,189,17,92,96,190,231,154,160,190,202,123,207,190,39,93,252,190,43,104,19,191,87,54,39,191,66,104,57,191,18,209,73,191,83,72,88,191,89,170,100,191,158,216,110,191,8,186,118,191,41,59,124,191,108,78,127,191,14,177,127,63,249,83,120,63,216,107,103,63,2,159,77,63,74,235,43,63,62,156,3,63,213,124,172,62,133,64,22,62,49,251,72,189,205,207,120,190,129,232,218,190,192,127,24,191,249,174,61,191,26,148,91,191,9,9,113,191,172,58,125,191,14,177,127,191,249,83,120,191,216,107,103,191,2,159,77,191,74,235,43,191,62,156,3,191,213,124,172,190,133,64,22,190,49,251,72,61,205,207,120,62,129,232,218,62,192,127,24,63,249,174,61,63,26,148,91,63,9,9,113,63,172,58,125,63,109,196,126,63,152,197,97,63,153,103,34,63,50,160,148,62,54,189,200,189,233,90,241,190,2,228,69,191,12,250,116,191,109,196,126,191,152,197,97,191,153,103,34,191,50,160,148,190,54,189,200,61,233,90,241,62,2,228,69,63,12,250,116,63,109,196,126,63,152,197,97,63,153,103,34,63,50,160,148,62,54,189,200,189,233,90,241,190,2,228,69,191,12,250,116,191,109,196,126,191,152,197,97,191,153,103,34,191,50,160,148,190,54,189,200,61,233,90,241,62,2,228,69,63,12,250,116,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,191,20,123,63,217,57,14,63,192,197,71,190,49,219,84,191,191,20,123,191,217,57,14,191,192,197,71,62,49,219,84,63,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,94,131,108,63,20,239,195,190,94,131,108,191,20,239,195,62,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,244,4,53,63,244,4,53,191,6,6,6,6,6,2,2,3,4,5,5,6,6,6,2,3,3,4,6,6,6,6,6,1,3,4,5,6,6,6,6,6,5,5,4,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,4,4,4,4,3,3,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,5,5,4,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,3,3,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,255,0,0,0,0,0,0,0,251,255,0,0,0,249,0,0,0,0,0,0,0,0,0,0,249,0,0,0,0,0,0,0,0,0,251,0,0,0,0,0,0,251,0,0,0,0,249,249,0,0,0,0,0,0,0,0,249,0,0,0,0,0,0,0,254,254,251,0,0,0,0,0,0,0,0,0,254,251,0,0,0,0,0,0,0,0,0,254,251,0,0,0,0,0,251,0,0,0,0,0,0,254,249,254,0,0,0,0,0,0,0,0,0,254,251,0,0,0,0,0,0,251,251,0,0,0,0,0,0,0,251,254,0,0,0,0,255,251,253,254,255,255,0,0,0,254,251,253,253,254,255,255,0,0,0,255,255,255,0,0,0,0,0,255,253,0,0,0,0,0,0,0,255,254,0,0,0,0,0,0,0,255,253,255,0,0,0,0,1,1,255,251,253,253,254,255,0,0,0,255,255,252,254,254,255,255,0,0,255,255,253,254,253,255,255,255,0,255,252,254,253,255,0,0,0,0,0,255,254,254,255,255,0,0,0,0,254,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,0,255,255,253,254,254,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,253,254,254,255,255,255,0,255,254,0,1,1,1,1,1,1,0,255,1,1,1,1,1,1,1,0,254,1,1,1,1,1,1,1,0,254,0,1,1,1,1,1,1,255,255,0,1,1,1,1,1,1,0,0,255,0,1,1,1,1,1,255,255,1,1,1,1,1,1,1,0,0,255,1,1,1,1,1,1,0,255,0,1,1,1,1,1,1,255,255,255,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,255,255,1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,0,253,254,1,1,1,1,2,2,253,251,253,2,2,2,2,2,2,255,254,0,2,2,2,2,2,2,255,254,0,1,2,2,2,2,2,0,254,0,2,2,2,2,2,2,255,0,1,2,2,2,2,2,2,0,0,1,2,2,2,2,2,2,0,254,0,1,2,2,2,2,2,0,255,1,2,2,2,2,2,2,255,255,0,2,2,2,2,2,2,255,255,0,1,2,2,2,2,2,255,254,255,2,2,2,2,2,2,0,255,0,2,2,2,2,2,2,1,1,0,1,2,2,2,2,2,0,1,2,2,2,2,2,2,2,1,0,0,1,2,2,2,2,2,0,0,0,1,2,2,2,2,2,255,255,255,1,2,2,2,2,2,0,1,2,3,3,3,3,3,3,1,1,2,3,3,3,3,3,3,255,0,1,2,3,3,3,3,3,0,0,2,3,3,3,3,3,3,255,0,1,3,3,3,3,3,3,0,0,1,3,3,3,3,3,3,1,2,3,3,3,3,3,3,3,1,2,2,3,3,3,3,3,3,0,1,1,3,3,3,3,3,3,0,0,1,2,3,3,3,3,3,255,1,2,3,3,3,3,3,3,255,0,2,3,3,3,3,3,3,2,2,3,3,3,3,3,3,3,1,1,3,3,3,3,3,3,3,0,2,3,3,3,3,3,3,3,0,1,1,2,3,3,3,3,3,0,1,2,3,4,4,4,4,4,1,2,3,4,4,4,4,4,4,0,0,2,3,4,4,4,4,4,1,1,2,4,4,4,4,4,4,0,1,2,4,4,4,4,4,4,255,0,1,3,4,4,4,4,4,0,0,1,3,4,4,4,4,4,1,1,2,3,4,4,4,4,4,0,1,1,3,4,4,4,4,4,2,2,3,4,4,4,4,4,4,1,1,3,4,4,4,4,4,4,1,2,2,4,4,4,4,4,4,255,0,2,3,4,4,4,4,4,0,1,3,4,4,4,4,4,4,1,2,2,3,4,4,4,4,4,0,2,3,4,4,4,4,4,4,1,2,3,4,5,5,5,5,5,0,1,2,3,4,5,5,5,5,0,1,2,3,5,5,5,5,5,1,1,3,4,5,5,5,5,5,1,1,2,4,5,5,5,5,5,1,2,2,4,5,5,5,5,5,1,1,2,3,5,5,5,5,5,2,2,3,4,5,5,5,5,5,0,1,2,4,5,5,5,5,5,2,2,3,5,5,5,5,5,5,1,2,3,5,5,5,5,5,5,0,1,3,4,5,5,5,5,5,1,2,2,3,5,5,5,5,5,2,3,4,5,5,5,5,5,5,0,2,3,4,5,5,5,5,5,1,1,1,3,4,5,5,5,5,1,2,3,4,5,5,5,6,6,1,2,3,4,5,6,6,6,6,2,3,4,5,6,6,6,6,6,1,2,3,4,6,6,6,6,6,2,2,3,4,5,5,5,6,6,1,2,3,4,5,5,6,6,6,2,2,3,4,6,6,6,6,6,2,2,3,4,5,6,6,6,6,2,2,4,5,6,6,6,6,6,2,2,3,5,6,6,6,6,6,1,2,3,5,6,6,6,6,6,2,3,3,5,6,6,6,6,6,1,2,4,5,6,6,6,6,6,2,2,3,4,5,5,6,6,6,2,3,3,4,6,6,6,6,6,1,3,4,5,6,6,6,6,6,5,5,4,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,4,4,4,4,3,3,3,3,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,5,5,4,4,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,4,4,4,3,3,3,2,2,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,5,5,5,5,5,5,3,3,3,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,24,63,0,4,53,63,0,68,87,63,0,4,181,62,0,0,0,63,0,4,53,63,0,72,87,62,0,4,181,62,0,56,24,63,0,0,0,62,0,0,128,62,0,0,0,63,0,48,152,61,0,8,53,62,0,68,215,62,0,0,53,61,0,0,0,62,0,4,181,62,0,64,215,60,0,0,181,61,0,56,152,62,0,0,128,60,0,0,128,61,0,0,128,62,0,0,24,60,0,0,53,61,0,72,87,62,0,0,181,59,0,0,0,61,0,8,53,62,0,0,88,59,0,0,181,60,0,56,24,62,0,0,0,59,0,0,128,60,0,0,0,62,0,0,152,58,0,0,53,60,0,64,215,61,0,0,56,58,0,0,0,60,0,0,181,61,0,0,208,57,0,0,181,59,0,48,152,61,0,0,0,0,0,240,21,62,0,0,0,63,0,132,90,63,0,0,0,0,0,0,128,191,0,0,128,191,0,0,128,191,0,0,128,191,86,152,156,183,206,94,216,183,204,131,97,183,242,178,190,181,246,144,138,53,44,166,151,53,237,128,217,52,61,113,176,57,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,111,78,140,55,182,49,246,55,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,4,0,0,0,0,0,0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,9,9,0,0,0,0,0,0,0,0,253,254,255,0,3,5,6,8,40,253,254,0,1,7,9,11,13,20,255,0,0,1,6,8,10,13,41,0,0,0,2,5,5,6,8,14,0,0,0,2,6,7,8,11,47,0,0,1,2,5,7,8,10,32,0,0,1,3,8,10,12,14,47,0,0,2,4,9,10,12,14,40,0,0,3,5,9,10,12,14,22,0,1,3,5,10,14,18,22,31,0,2,5,6,10,10,10,12,46,0,2,5,7,12,14,15,18,44,1,1,4,5,7,7,8,9,15,1,2,2,2,4,5,7,9,26,1,2,2,3,6,7,7,8,47,1,2,2,3,6,8,10,13,22,1,3,4,7,13,17,21,24,41,1,4,0,4,10,12,13,14,17,2,3,3,3,6,8,10,13,48,2,3,3,4,9,12,14,17,47,2,3,3,5,10,12,14,17,25,2,3,5,7,8,9,9,9,13,2,3,5,9,16,21,25,28,33,2,4,5,8,12,14,17,19,26,2,4,6,8,12,13,13,15,20,2,4,7,12,20,26,30,32,35,3,3,5,6,12,14,16,19,34,3,4,4,5,7,9,10,11,48,3,4,5,6,8,9,10,11,16,3,5,5,5,7,9,10,13,35,3,5,5,7,10,12,13,15,49,3,5,7,7,8,7,9,12,21,3,5,7,8,12,14,15,15,24,3,5,7,10,16,21,24,27,44,3,5,8,14,21,26,28,29,42,3,6,10,13,18,19,20,22,27,3,6,11,16,24,27,28,29,31,4,5,4,3,4,6,8,11,18,4,6,5,6,9,10,12,14,20,4,6,7,6,6,6,7,8,46,4,6,7,9,13,16,18,20,48,4,6,7,9,14,17,20,23,31,4,6,9,11,14,15,15,17,21,4,8,13,20,27,32,35,36,38,5,6,6,4,5,6,7,6,6,5,7,7,8,9,9,10,12,49,5,8,9,9,10,11,12,13,42,5,8,10,12,15,16,17,19,42,5,8,12,17,26,31,32,33,44,5,9,13,16,20,22,23,23,35,6,8,8,7,6,5,6,8,15,6,8,8,8,9,10,12,16,24,6,8,8,9,10,10,11,11,13,6,8,10,13,19,21,24,26,32,6,9,10,11,13,13,14,16,49,7,9,9,10,13,14,16,19,27,7,10,12,13,16,16,17,17,27,7,10,12,14,17,19,20,22,48,8,9,10,9,10,11,11,11,19,8,11,12,12,13,13,13,13,17,8,11,13,14,16,17,19,20,27,8,12,17,22,26,28,29,30,33,10,14,16,19,21,22,22,24,28,10,15,17,18,21,22,23,25,43,0,0,1,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,0,0,1,0,4,0,3,0,5,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,7,0,3,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,14,0,0,0,14,0,0,0,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,7,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,19,0,0,0,20,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,25,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,32,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,50,0,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,160,149,4,0,16,149,4,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,200,149,4,0,40,149,4,0,32,149,4,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,200,149,4,0,96,149,4,0,80,149,4,0,0,0,0,0,0,0,0,0,136,149,4,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,16,150,4,0,1,0,0,0,5,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,200,149,4,0,232,149,4,0,136,149,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,152,4,0,6,0,0,0,7,0,0,0,1,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,200,149,4,0,64,152,4,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+294448);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_mutex_lock() {}

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_mutex_unlock() {}

   
  Module["_strlen"] = _strlen;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function __ZNSt9exceptionD2Ev() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  function _pthread_mutex_destroy() {}

  function _pthread_mutex_init() {}

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env.cttz_i8|0;var n=env.ctlz_i8|0;var o=env.__ZTISt9exception|0;var p=0;var q=0;var r=0;var s=0;var t=+env.NaN,u=+env.Infinity;var v=0,w=0,x=0,y=0,z=0.0,A=0,B=0,C=0,D=0.0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=0;var N=0;var O=global.Math.floor;var P=global.Math.abs;var Q=global.Math.sqrt;var R=global.Math.pow;var S=global.Math.cos;var T=global.Math.sin;var U=global.Math.tan;var V=global.Math.acos;var W=global.Math.asin;var X=global.Math.atan;var Y=global.Math.atan2;var Z=global.Math.exp;var _=global.Math.log;var $=global.Math.ceil;var aa=global.Math.imul;var ba=env.abort;var ca=env.assert;var da=env.asmPrintInt;var ea=env.asmPrintFloat;var fa=env.min;var ga=env.invoke_iiii;var ha=env.invoke_viiiii;var ia=env.invoke_vi;var ja=env.invoke_ii;var ka=env.invoke_v;var la=env.invoke_viiiiii;var ma=env.invoke_iii;var na=env.invoke_viiii;var oa=env.__ZSt9terminatev;var pa=env.___cxa_is_number_type;var qa=env.___cxa_allocate_exception;var ra=env.__ZSt18uncaught_exceptionv;var sa=env._fflush;var ta=env._time;var ua=env.___setErrNo;var va=env._sbrk;var wa=env.___cxa_begin_catch;var xa=env._emscripten_memcpy_big;var ya=env.___resumeException;var za=env.___cxa_find_matching_catch;var Aa=env._sysconf;var Ba=env._pthread_mutex_destroy;var Ca=env._pthread_mutex_unlock;var Da=env.___errno_location;var Ea=env.__ZNSt9exceptionD2Ev;var Fa=env.___cxa_throw;var Ga=env.__exit;var Ha=env._abort;var Ia=env.___cxa_does_inherit;var Ja=env._pthread_mutex_lock;var Ka=env._pthread_mutex_init;var La=env._exit;var Ma=0.0;
// EMSCRIPTEN_START_FUNCS
function Va(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function Wa(){return i|0}function Xa(a){a=a|0;i=a}function Ya(a,b){a=a|0;b=b|0;if((p|0)==0){p=a;q=b}}function Za(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function _a(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function $a(a){a=a|0;E=a}function ab(a){a=a|0;F=a}function bb(a){a=a|0;G=a}function cb(a){a=a|0;H=a}function db(a){a=a|0;I=a}function eb(a){a=a|0;J=a}function fb(a){a=a|0;K=a}function gb(a){a=a|0;L=a}function hb(a){a=a|0;M=a}function ib(a){a=a|0;N=a}function jb(a){a=a|0;return}function kb(a){a=a|0;var b=0,c=0;b=i;c=Ad(a)|0;i=b;return c|0}function lb(a){a=a|0;var b=0;b=i;Bd(a);i=b;return 0}function mb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;rb(a+16|0);f=Cd(52)|0;vb(f,b);c[a>>2]=f;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=d;i=e;return}function nb(a){a=a|0;wa(a|0)|0;oa()}function ob(a){a=a|0;var b=0,d=0,e=0;b=i;d=a+16|0;tb(d)|0;e=c[a>>2]|0;if((e|0)!=0){wb(e);Dd(e)}ub(d)|0;sb(d);i=b;return}function pb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;f=a+16|0;tb(f)|0;xb(c[a>>2]|0,b,d)|0;ub(f)|0;i=e;return 0}function qb(a,b,e){a=a|0;b=b|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+16|0;g=f;h=a+16|0;tb(h)|0;j=a+8|0;k=c[j>>2]|0;a:do{if((k|0)<(b|0)){l=a+12|0;m=a+4|0;while(1){if((zb(c[a>>2]|0)|0)==0){break}yb(c[a>>2]|0,g,1)|0;n=c[l>>2]|0;if((n|0)==0){c[m>>2]=d[g]|0|c[m>>2]<<8}else if((n|0)==1){c[m>>2]=c[m>>2]|(d[g]|0)<<c[j>>2]}n=(c[j>>2]|0)+8|0;c[j>>2]=n;if((n|0)>=(b|0)){o=n;break a}}o=c[j>>2]|0}else{o=k}}while(0);if((o|0)<(b|0)){ub(h)|0;p=0;i=f;return p|0}k=c[a+12>>2]|0;if((k|0)==1){q=c[a+4>>2]&(1<<b)+ -1}else if((k|0)==0){q=c[a+4>>2]>>o-b&(1<<b)+ -1}else{q=0}do{if((e|0)!=0){g=o-b|0;c[j>>2]=g;if((k|0)==1){m=a+4|0;c[m>>2]=c[m>>2]>>b&(1<<g)+ -1;break}else if((k|0)==0){m=a+4|0;c[m>>2]=c[m>>2]&(1<<g)+ -1;break}else{break}}}while(0);ub(h)|0;p=q;i=f;return p|0}function rb(a){a=a|0;var b=0;b=i;Ka(a|0,0)|0;i=b;return}function sb(a){a=a|0;var b=0;b=i;Ba(a|0)|0;i=b;return}function tb(a){a=a|0;var b=0;b=i;Ja(a|0)|0;i=b;return 0}function ub(a){a=a|0;var b=0;b=i;Ca(a|0)|0;i=b;return 0}function vb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;jb(a+20|0);rb(a+28|0);e=b+1|0;b=a+12|0;f=a+16|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;c[a+16>>2]=0;g=kb(e)|0;c[a>>2]=g;if((g|0)==0){c[f>>2]=-1;i=d;return}else{c[b>>2]=e;i=d;return}}function wb(a){a=a|0;var b=0;b=i;if((c[a+16>>2]|0)==0){lb(c[a>>2]|0)|0}sb(a+28|0);i=b;return}function xb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;if((c[a+16>>2]|0)!=0){f=0;i=e;return f|0}g=a+28|0;tb(g)|0;h=c[a>>2]|0;j=a+4|0;k=c[j>>2]|0;l=c[a+12>>2]|0;m=((c[a+8>>2]|0)+~k+l|0)%(l|0)|0;a=(m|0)<(d|0)?m:d;d=l-k|0;m=(a|0)>(d|0);n=m?d:a;o=m?a-d|0:0;if((n|0)==0){p=b;q=k}else{Ab(h+k|0,b,n)|0;p=b+n|0;q=(n+k|0)%(l|0)|0}if((o|0)==0){r=q}else{Ab(h+q|0,p,o)|0;r=(q+o|0)%(l|0)|0}c[j>>2]=r;ub(g)|0;f=a;i=e;return f|0}function yb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;if((c[a+16>>2]|0)!=0){f=0;i=e;return f|0}g=a+28|0;tb(g)|0;h=c[a>>2]|0;j=a+8|0;k=c[j>>2]|0;l=c[a+12>>2]|0;m=((c[a+4>>2]|0)-k+l|0)%(l|0)|0;a=(m|0)<(d|0)?m:d;d=l-k|0;m=(a|0)>(d|0);n=m?d:a;o=m?a-d|0:0;if((n|0)==0){p=b;q=k}else{Ab(b,h+k|0,n)|0;p=b+n|0;q=(n+k|0)%(l|0)|0}if((o|0)==0){r=q}else{Ab(p,h+q|0,o)|0;r=(q+o|0)%(l|0)|0}c[j>>2]=r;ub(g)|0;f=a;i=e;return f|0}function zb(a){a=a|0;var b=0,d=0,e=0;b=i;if((c[a+16>>2]|0)!=0){d=0;i=b;return d|0}e=c[a+12>>2]|0;d=((c[a+4>>2]|0)-(c[a+8>>2]|0)+e|0)%(e|0)|0;i=b;return d|0}function Ab(b,c,d){b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;if((d|0)==0){i=e;return 0}else{f=d;g=b;h=c}while(1){f=f+ -1|0;a[g]=a[h]|0;if((f|0)==0){break}else{g=g+1|0;h=h+1|0}}i=e;return 0}function Bb(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;if((c|0)>0){Id(a|0,b&255|0,c|0)|0}i=d;return 0}function Cb(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;jb(a+65548|0);d=kb(1212)|0;Bb(d,0,1212)|0;e=kb(1e3)|0;Bb(e,0,1e3)|0;f=kb(1e3)|0;Bb(f,0,1e3)|0;g=kb(4796)|0;c[a>>2]=g;Bb(g,0,4796)|0;g=c[a>>2]|0;c[g>>2]=0;c[g+4>>2]=d;g=kb(2504)|0;c[(c[a>>2]|0)+12>>2]=g;Bb(c[(c[a>>2]|0)+12>>2]|0,0,2504)|0;g=kb(2504)|0;c[(c[a>>2]|0)+8>>2]=g;Bb(c[(c[a>>2]|0)+8>>2]|0,0,2504)|0;g=kb(644)|0;c[(c[a>>2]|0)+16>>2]=g;Bb(c[(c[a>>2]|0)+16>>2]|0,0,644)|0;c[c[(c[a>>2]|0)+16>>2]>>2]=e;g=kb(644)|0;c[(c[a>>2]|0)+20>>2]=g;Bb(c[(c[a>>2]|0)+20>>2]|0,0,644)|0;c[c[(c[a>>2]|0)+20>>2]>>2]=f;g=c[a>>2]|0;c[g+24>>2]=g;g=kb(4796)|0;h=a+4|0;c[h>>2]=g;Bb(g,0,4796)|0;g=c[h>>2]|0;c[g>>2]=1;c[g+4>>2]=d;d=kb(2504)|0;c[(c[h>>2]|0)+12>>2]=d;Bb(c[(c[h>>2]|0)+12>>2]|0,0,2504)|0;d=kb(2504)|0;c[(c[h>>2]|0)+8>>2]=d;Bb(c[(c[h>>2]|0)+8>>2]|0,0,2504)|0;d=kb(644)|0;c[(c[h>>2]|0)+16>>2]=d;Bb(c[(c[h>>2]|0)+16>>2]|0,0,644)|0;c[c[(c[h>>2]|0)+16>>2]>>2]=e;e=kb(644)|0;c[(c[h>>2]|0)+20>>2]=e;Bb(c[(c[h>>2]|0)+20>>2]|0,0,644)|0;c[c[(c[h>>2]|0)+20>>2]>>2]=f;c[(c[h>>2]|0)+24>>2]=c[a>>2];c[a+65544>>2]=3;Id(a+8|0,0,32768)|0;Id(a+49160|0,0,16384)|0;i=b;return}function Db(a){a=a|0;var b=0,d=0;b=i;lb(c[c[(c[a>>2]|0)+20>>2]>>2]|0)|0;lb(c[c[(c[a>>2]|0)+16>>2]>>2]|0)|0;lb(c[(c[a>>2]|0)+4>>2]|0)|0;lb(c[(c[a>>2]|0)+20>>2]|0)|0;lb(c[(c[a>>2]|0)+16>>2]|0)|0;lb(c[(c[a>>2]|0)+8>>2]|0)|0;lb(c[(c[a>>2]|0)+12>>2]|0)|0;lb(c[a>>2]|0)|0;d=a+4|0;lb(c[(c[d>>2]|0)+20>>2]|0)|0;lb(c[(c[d>>2]|0)+16>>2]|0)|0;lb(c[(c[d>>2]|0)+8>>2]|0)|0;lb(c[(c[d>>2]|0)+12>>2]|0)|0;lb(c[d>>2]|0)|0;i=b;return}function Eb(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;h=c[(c[a>>2]|0)+4>>2]|0;c[h+160>>2]=f;c[h+164>>2]=e;e=(qb(b,5,1)|0)+1|0;h=c[(c[a>>2]|0)+4>>2]|0;c[h+144>>2]=e;c[h+152>>2]=(d[1776+e|0]|0)+1;e=qb(b,1,1)|0;h=c[(c[a>>2]|0)+4>>2]|0;c[h+184>>2]=e;e=Fb(0,b,a,c[h+164>>2]|0)|0;if((e|0)!=0){j=e;i=g;return j|0}e=c[a>>2]|0;h=c[e+4>>2]|0;f=c[h+164>>2]|0;a:do{if((c[h+148>>2]|0)!=0){if((f|0)!=0){k=e;l=0;while(1){m=a+(l<<2)|0;n=k+316|0;o=n+128|0;do{c[n>>2]=0;n=n+4|0}while((n|0)<(o|0));n=c[k>>2]<<2;o=c[300080+(n+(qb(b,2,1)|0)<<2)>>2]|0;n=Ta[o&63](b,c[m>>2]|0)|0;o=l+1|0;if((n|0)!=0){j=n;break}if(!(o>>>0<f>>>0)){p=7;break a}k=c[a+(o<<2)>>2]|0;l=o}i=g;return j|0}}else{p=7}}while(0);b:do{if((p|0)==7?(f|0)!=0:0){e=0;c:while(1){h=c[a+(e<<2)>>2]|0;l=0;while(1){k=l+1|0;if((c[h+(l<<2)+316>>2]|0)>>>0>63){j=-272;break c}if(k>>>0<32){l=k}else{break}}e=e+1|0;if(!(e>>>0<f>>>0)){break b}}i=g;return j|0}}while(0);f=Gb(0,b,a,c[(c[(c[a>>2]|0)+4>>2]|0)+164>>2]|0)|0;if((f|0)!=0){j=f;i=g;return j|0}Hb(0,b,a,c[(c[(c[a>>2]|0)+4>>2]|0)+164>>2]|0)|0;f=c[a>>2]|0;p=c[f+4>>2]|0;e=c[p+164>>2]|0;if((e|0)==0){q=0}else{l=f;f=p;p=1;while(1){Qb(b,(c[l+8>>2]|0)+2432|0,c[f+152>>2]|0)|0;if((p|0)==(e|0)){break}l=c[a+(p<<2)>>2]|0;f=c[(c[a>>2]|0)+4>>2]|0;p=p+1|0}q=c[(c[(c[a>>2]|0)+4>>2]|0)+164>>2]|0}p=Ib(0,b,a,q)|0;if((p|0)!=0){j=p;i=g;return j|0}p=Jb(0,b,a,c[(c[(c[a>>2]|0)+4>>2]|0)+164>>2]|0)|0;if((p|0)!=0){j=p;i=g;return j|0}p=qb(b,1,1)|0;c[(c[(c[a>>2]|0)+4>>2]|0)+172>>2]=p;if((p|0)==0){j=0;i=g;return j|0}p=qb(b,4,1)|0;c[(c[(c[a>>2]|0)+4>>2]|0)+176>>2]=p;p=qb(b,4,1)|0;c[(c[(c[a>>2]|0)+4>>2]|0)+180>>2]=p;j=0;i=g;return j|0}function Fb(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;a=i;g=(f|0)==0;a:do{if(!g){h=0;while(1){j=e+(h<<2)|0;k=c[j>>2]|0;l=k+188|0;m=l+128|0;do{c[l>>2]=0;l=l+4|0}while((l|0)<(m|0));l=c[k>>2]<<2;m=c[299112+(l+(qb(b,2,1)|0)<<2)>>2]|0;l=Ta[m&63](b,c[j>>2]|0)|0;h=h+1|0;if((l|0)!=0){n=l;break}if(!(h>>>0<f>>>0)){break a}}i=a;return n|0}}while(0);b=c[e>>2]|0;h=c[b+4>>2]|0;l=c[h+144>>2]|0;m=h+148|0;c[m>>2]=l;b:do{if((f|0)==2){o=e+4|0;if((l|0)==0){p=0}else{q=l;while(1){r=q+ -1|0;if((c[b+(r<<2)+188>>2]|0)!=0){p=q;break b}if((c[(c[o>>2]|0)+(r<<2)+188>>2]|0)!=0){p=q;break b}c[m>>2]=r;if((r|0)==0){p=0;break}else{q=r}}}}else{if((l|0)==0){p=0}else{q=l;while(1){o=q+ -1|0;if((c[b+(o<<2)+188>>2]|0)!=0){p=q;break b}c[m>>2]=o;if((o|0)==0){p=0;break}else{q=o}}}}}while(0);c[h+156>>2]=(d[1776+p|0]|0)+1;if(g){n=0;i=a;return n|0}else{s=b;t=1}c:while(1){b=0;while(1){g=b+1|0;if((c[s+(b<<2)+188>>2]|0)>>>0>7){n=-267;u=18;break c}if(g>>>0<32){b=g}else{break}}if(!(t>>>0<f>>>0)){n=0;u=18;break}s=c[e+(t<<2)>>2]|0;t=t+1|0}if((u|0)==18){i=a;return n|0}return 0}function Gb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;a=i;if((c[(c[(c[d>>2]|0)+4>>2]|0)+148>>2]|0)==0){f=0;i=a;return f|0}g=qb(b,1,1)|0;h=c[d>>2]|0;c[(c[h+4>>2]|0)+168>>2]=g;if((e|0)==0){f=0;i=a;return f|0}else{j=h;k=0}while(1){h=d+(k<<2)|0;g=j+444|0;l=g+128|0;do{c[g>>2]=0;g=g+4|0}while((g|0)<(l|0));g=qb(b,1,1)|0;l=c[h>>2]|0;c[l+28>>2]=g;Sb(l,l+32|0)|0;l=c[c[h>>2]>>2]<<2;g=c[300112+(l+(qb(b,2,1)|0)<<2)>>2]|0;l=Ta[g&63](b,c[h>>2]|0)|0;g=k+1|0;if((l|0)!=0){f=l;m=6;break}if(!(g>>>0<e>>>0)){f=0;m=6;break}j=c[d+(g<<2)>>2]|0;k=g}if((m|0)==6){i=a;return f|0}return 0}function Hb(a,b,e,f){a=a|0;b=b|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;a=i;if((f|0)==0){i=a;return 0}else{g=0}do{h=e+(g<<2)|0;Id((c[h>>2]|0)+572|0,0,4096)|0;j=c[h>>2]|0;c[j+4668>>2]=15;c[j+4672>>2]=15;c[j+4676>>2]=15;c[j+4680>>2]=15;c[j+4684>>2]=15;if((c[(c[(c[e>>2]|0)+4>>2]|0)+148>>2]|0)!=0){k=j;j=0;while(1){l=c[k+(j<<2)+188>>2]|0;if((l|0)==0){m=c[1976+(j<<2)>>2]|0;if((m|0)!=0){Id(k+(c[1840+(j<<2)>>2]<<1)+572|0,0,(m>>>0>1?m<<1:2)|0)|0}}else{if((c[(c[k+4>>2]|0)+168>>2]|0)==0){m=c[k+28>>2]|0;n=m;o=d[2104+(((m*7|0)+l<<2)+(c[k+(j<<2)+444>>2]|0))|0]|0}else{n=c[k+28>>2]|0;o=c[k+(j<<2)+444>>2]|0}jc(b,k+(c[1840+(j<<2)>>2]<<1)+572|0,c[1976+(j<<2)>>2]|0,265976+(((((n<<3)+o|0)*7|0)+l|0)*24|0)|0)|0}l=j+1|0;p=c[(c[(c[e>>2]|0)+4>>2]|0)+148>>2]|0;if(!(l>>>0<p>>>0)){break}k=c[h>>2]|0;j=l}if(p>>>0>2){j=0;do{k=qb(b,4,1)|0;c[(c[h>>2]|0)+(j<<2)+4668>>2]=k;j=j+1|0}while(j>>>0<((d[(d[1776+(c[(c[(c[e>>2]|0)+4>>2]|0)+148>>2]|0)|0]|0)+1817|0]|0)+1|0)>>>0)}}g=g+1|0}while((g|0)!=(f|0));if((f|0)!=2){i=a;return 0}f=c[(c[e>>2]|0)+4>>2]|0;Qb(b,f+72|0,c[f+156>>2]|0)|0;f=c[(c[e>>2]|0)+4>>2]|0;Qb(b,f,c[f+156>>2]|0)|0;i=a;return 0}function Ib(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;a=i;if((e|0)==0){f=0;i=a;return f|0}else{g=0}while(1){h=d+(g<<2)|0;Bb(c[(c[h>>2]|0)+8>>2]|0,0,2432)|0;if((qb(b,1,1)|0)!=0){j=(qb(b,4,1)|0)+1|0;c[(c[h>>2]|0)+184>>2]=j;j=qb(b,1,1)|0;k=c[h>>2]|0;l=c[k+184>>2]|0;m=(j|0)!=0;if(m){j=(qb(b,4,1)|0)+1|0;n=c[h>>2]|0;o=j}else{n=k;o=l}l=qc(b,n)|0;if((l|0)!=0){f=l;p=15;break}l=yc(b,c[h>>2]|0)|0;if((l|0)!=0){f=l;p=15;break}l=Kc(b,c[h>>2]|0)|0;if((l|0)!=0){f=l;p=15;break}if(m?(m=c[h>>2]|0,h=c[m+184>>2]|0,h>>>0<o>>>0):0){l=c[m+8>>2]|0;m=h;do{h=m+ -1|0;k=c[l+(h*152|0)>>2]|0;j=l+(m*152|0)|0;c[j>>2]=k;if((k|0)!=0){k=0;do{c[l+(m*152|0)+(k<<2)+32>>2]=c[l+(h*152|0)+(k<<2)+32>>2];c[l+(m*152|0)+(k<<2)+4>>2]=c[l+(h*152|0)+(k<<2)+4>>2];k=k+1|0}while(k>>>0<(c[j>>2]|0)>>>0)}m=m+1|0}while((m|0)!=(o|0))}}m=g+1|0;if(m>>>0<e>>>0){g=m}else{f=0;p=15;break}}if((p|0)==15){i=a;return f|0}return 0}function Jb(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;a=i;i=i+48|0;f=a;g=(e|0)==2;if(!g){if((e|0)==0){h=1}else{j=0;k=4}}else{Bb((c[c[(c[d>>2]|0)+20>>2]>>2]|0)+784|0,0,72)|0;Bb((c[c[(c[d>>2]|0)+20>>2]>>2]|0)+856|0,0,72)|0;Bb((c[c[(c[d>>2]|0)+20>>2]>>2]|0)+928|0,0,72)|0;j=0;k=4}if((k|0)==4){while(1){k=0;l=d+(j<<2)|0;Bb((c[(c[l>>2]|0)+20>>2]|0)+4|0,0,640)|0;m=c[(c[l>>2]|0)+20>>2]|0;c[m+32>>2]=32;c[m+28>>2]=0;c[m+72>>2]=32;c[m+68>>2]=0;c[m+112>>2]=32;c[m+108>>2]=0;c[m+152>>2]=32;c[m+148>>2]=0;c[m+192>>2]=32;c[m+188>>2]=0;c[m+232>>2]=32;c[m+228>>2]=0;c[m+272>>2]=32;c[m+268>>2]=0;c[m+312>>2]=32;c[m+308>>2]=0;c[m+352>>2]=32;c[m+348>>2]=0;c[m+392>>2]=32;c[m+388>>2]=0;c[m+432>>2]=32;c[m+428>>2]=0;c[m+472>>2]=32;c[m+468>>2]=0;c[m+512>>2]=32;c[m+508>>2]=0;c[m+552>>2]=32;c[m+548>>2]=0;c[m+592>>2]=32;c[m+588>>2]=0;c[m+632>>2]=32;c[m+628>>2]=0;m=j+1|0;if((m|0)==(e|0)){h=0;break}else{j=m;k=4}}}k=c[c[(c[d>>2]|0)+20>>2]>>2]|0;c[k+780>>2]=k+12;k=qb(b,1,1)|0;c[c[c[(c[d>>2]|0)+20>>2]>>2]>>2]=k;if((k|0)==0){n=0;i=a;return n|0}k=qb(b,1,1)|0;c[(c[c[(c[d>>2]|0)+20>>2]>>2]|0)+4>>2]=k;k=(Pb(277824,b)|0)+1|0;j=c[c[(c[d>>2]|0)+20>>2]>>2]|0;c[j+8>>2]=k;if(g){Qb(b,j+784|0,k)|0;k=c[c[(c[d>>2]|0)+20>>2]>>2]|0;Qb(b,k+928|0,c[k+8>>2]|0)|0;k=c[c[(c[d>>2]|0)+20>>2]>>2]|0;Qb(b,k+856|0,c[k+8>>2]|0)|0}a:do{if(h){o=0}else{k=0;while(1){j=dd(b,c[d+(k<<2)>>2]|0)|0;m=k+1|0;if((j|0)!=0){o=j;break a}if(m>>>0<e>>>0){k=m}else{o=0;break}}}}while(0);if(!g){n=o;i=a;return n|0}g=c[d>>2]|0;e=c[g+20>>2]|0;b=c[e>>2]|0;if((c[b+8>>2]|0)<=0){n=o;i=a;return n|0}h=d+4|0;k=b;b=e;e=g;g=0;while(1){if((c[k+(g<<2)+792>>2]|0)==0){p=e}else{Ab((c[(c[h>>2]|0)+20>>2]|0)+(g*40|0)+4|0,b+(g*40|0)+4|0,40)|0;p=c[d>>2]|0}m=c[p+20>>2]|0;j=c[m>>2]|0;if((c[j+(g<<2)+936>>2]|0)==0){q=j;r=m;s=p}else{Ab(f,(c[(c[h>>2]|0)+20>>2]|0)+(g*40|0)+4|0,40)|0;Ab((c[(c[h>>2]|0)+20>>2]|0)+(g*40|0)+4|0,(c[(c[d>>2]|0)+20>>2]|0)+(g*40|0)+4|0,40)|0;Ab((c[(c[d>>2]|0)+20>>2]|0)+(g*40|0)+4|0,f,40)|0;m=c[d>>2]|0;j=c[m+20>>2]|0;q=c[j>>2]|0;r=j;s=m}m=g+1|0;if((m|0)<(c[q+8>>2]|0)){k=q;b=r;e=s;g=m}else{n=o;break}}i=a;return n|0}function Kb(e,f,h){e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0.0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0.0,T=0,U=0,V=0,W=0,X=0;j=i;i=i+1056|0;k=j+1024|0;l=j;m=j+512|0;n=(h|0)==0;o=c[e>>2]|0;p=c[o+4>>2]|0;if(!n?(q=c[p+148>>2]|0,(q|0)!=0):0){r=0;s=0;while(1){t=c[e+(r<<2)>>2]|0;u=0;v=s;do{v=(c[t+(u<<2)+316>>2]|0)+(v&65535)|0;u=u+1|0}while(u>>>0<q>>>0);u=r+1|0;if((u|0)==(h|0)){w=v;break}else{r=u;s=v}}}else{w=0}s=c[p+156>>2]|0;if((s|0)!=0){r=0;q=w&65535;while(1){w=q&1020;b[k+(r<<1)>>1]=w;r=r+1|0;if(!(r>>>0<s>>>0)){break}else{q=w+128|0}}}q=(h|0)==2;if(q?(s=p+148|0,r=c[s>>2]|0,(r|0)!=0):0){w=c[e+4>>2]|0;u=r;r=0;while(1){t=w+(r<<2)+188|0;if((c[t>>2]|0)==0?(x=c[o+(r<<2)+188>>2]|0,(x|0)!=0):0){y=c[296+(r<<2)>>2]|0;z=c[432+(r<<2)>>2]|0;A=0;do{B=y+A|0;b[w+(B<<1)+572>>1]=b[o+(B<<1)+572>>1]|0;A=A+1|0}while(A>>>0<z>>>0);c[t>>2]=x;C=c[s>>2]|0}else{C=u}r=r+1|0;if(!(r>>>0<C>>>0)){break}else{u=C}}}if(n){D=p;E=o}else{o=e+4|0;p=0;while(1){n=f+(p<<2)|0;Id(c[n>>2]|0,0,8192)|0;C=c[e>>2]|0;u=c[C+4>>2]|0;r=c[u+148>>2]|0;if((r|0)!=0){s=c[e+(p<<2)>>2]|0;w=0;do{z=c[s+(w<<2)+188>>2]|0;if((z|0)!=0){A=c[296+(w<<2)>>2]|0;F=+g[8+(z<<2)>>2];G=+g[40+(c[s+(w<<2)+316>>2]<<2)>>2];z=c[n>>2]|0;y=c[432+(w<<2)>>2]|0;v=0;do{B=A+v|0;g[z+(B<<2)>>2]=+(b[s+(B<<1)+572>>1]|0)*F*G;v=v+1|0}while(v>>>0<y>>>0)}w=w+1|0}while(w>>>0<r>>>0)}r=c[u+156>>2]|0;if((r|0)!=0){w=(p|0)==0;s=e+(p<<2)|0;x=c[u+164>>2]|0;t=0;do{do{if((x|0)==2?(c[u+(t<<2)+80>>2]|0)!=0:0){if(w){y=c[o>>2]|0;H=y+12|0;I=y+8|0;J=y+4668|0;break}else{H=C+12|0;I=C+8|0;J=C+4668|0;break}}else{K=30}}while(0);if((K|0)==30){K=0;y=c[s>>2]|0;H=y+12|0;I=y+8|0;J=y+4668|0}y=c[I>>2]|0;v=c[H>>2]|0;z=c[J+(d[560+t|0]<<2)>>2]|0;if((z|0)!=15){A=c[70028]|0;B=0;L=b[k+(t<<1)>>1]|0;while(1){g[l+(B<<2)>>2]=+(b[A+((L&1023)<<1)>>1]|0)*30517578125.0e-15;B=B+1|0;if((B|0)==128){break}else{L=L+1|0}}L=c[y+(t*152|0)>>2]|0;if((L|0)<1){M=0}else{M=0-(c[1528+(c[y+(t*152|0)+32>>2]<<2)>>2]|0)|0}B=c[v+(t*152|0)>>2]|0;if((B|0)>0){A=0;N=0;while(1){O=M-(c[1528+(c[v+(t*152|0)+(A<<2)+32>>2]<<2)>>2]|0)|0;P=(N|0)<(O|0)?O:N;O=A+1|0;if((O|0)<(B|0)){A=O;N=P}else{Q=P;break}}}else{Q=0}if((L|0)>0){N=0;A=Q;while(1){B=0-(c[1528+(c[y+(t*152|0)+(N<<2)+32>>2]<<2)>>2]|0)|0;v=(A|0)<(B|0)?B:A;B=N+1|0;if((B|0)<(L|0)){N=B;A=v}else{R=v;break}}}else{R=Q}if((R|0)<0){S=0.0}else{S=+(1<<R|0)}G=+g[576+(z<<2)>>2]/S;A=a[640+t|0]|0;N=a[656+t|0]|0;if((A&255)<(N&255)){L=N&255;N=c[s>>2]|0;y=A&255;while(1){A=c[N+(y<<2)+188>>2]|0;if((A|0)!=0){F=G*+g[8+(A<<2)>>2]*+g[40+(c[N+(y<<2)+316>>2]<<2)>>2]/+(1<<A|0);A=c[296+(y<<2)>>2]|0;v=y+1|0;B=c[296+(v<<2)>>2]|0;if(A>>>0<B>>>0){P=c[n>>2]|0;O=A;A=0;while(1){T=P+(O<<2)|0;g[T>>2]=F*+g[l+(A<<2)>>2]+ +g[T>>2];T=O+1|0;if(T>>>0<B>>>0){O=T;A=A+1|0}else{U=v;break}}}else{U=v}}else{U=y+1|0}if(U>>>0<L>>>0){y=U}else{break}}}}t=t+1|0}while(t>>>0<r>>>0)}r=p+1|0;if((r|0)==(h|0)){D=u;E=C;break}else{p=r}}}if(q?(c[D+156>>2]|0)!=0:0){q=f+4|0;p=D;h=E;E=0;while(1){U=E<<7;if((c[p+(E<<2)+80>>2]|0)==1){l=c[f>>2]|0;Ld(m|0,l+(U<<2)|0,512)|0;R=E<<7;Q=c[q>>2]|0;M=0;do{k=M+R|0;g[l+(k<<2)>>2]=+g[Q+(k<<2)>>2];M=M+1|0}while((M|0)!=128);Ld(Q+(U<<2)|0,m|0,512)|0;V=c[e>>2]|0}else{V=h}M=c[V+4>>2]|0;if((c[M+(E<<2)+8>>2]|0)==1){l=a[672+E|0]|0;R=E+1|0;C=a[672+R|0]|0;if((l&255)<(C&255)){u=l&255;l=C&255;C=c[296+(u<<2)>>2]|0;k=u;while(1){u=k+1|0;J=c[296+(u<<2)>>2]|0;if(C>>>0<J>>>0){H=c[q>>2]|0;I=C;do{K=H+(I<<2)|0;g[K>>2]=+g[K>>2]*-1.0;I=I+1|0}while(I>>>0<J>>>0)}if(u>>>0<l>>>0){C=J;k=u}else{W=R;break}}}else{W=R}}else{W=E+1|0}if(W>>>0<(c[M+156>>2]|0)>>>0){p=M;h=V;E=W}else{X=M;break}}}else{X=D}if((c[X+184>>2]|0)!=1){i=j;return 0}Id(c[f>>2]|0,0,8192)|0;Id(c[f+4>>2]|0,0,8192)|0;i=j;return 0}function Lb(a,b,d,e,f,h,j){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;k=i;i=i+1024|0;l=k;m=(e|0)>0;if(m){Id(b|0,0,e<<2|0)|0}n=c[a+32>>2]|0;o=(n|0)>0;if((f|0)==0){if(o?(f=c[a+36>>2]|0,p=d+ -128|0,q=c[73370]|0,m):0){r=0;do{s=+g[696+(c[f+(r<<4)>>2]<<2)>>2]*+g[952+(c[f+(r<<4)+4>>2]<<2)>>2];t=c[f+(r<<4)+12>>2]|0;u=0;v=(aa(t,p)|0)+(c[f+(r<<4)+8>>2]<<6)|0;while(1){w=v&2047;x=b+(u<<2)|0;g[x>>2]=+g[x>>2]+s*+g[q+(w<<2)>>2];u=u+1|0;if((u|0)==(e|0)){break}else{v=t+w|0}}r=r+1|0}while((r|0)<(n|0))}}else{if(o?(o=c[a+36>>2]|0,r=d+ -128|0,q=c[73370]|0,m):0){f=0;do{s=+g[696+(c[o+(f<<4)>>2]<<2)>>2];p=c[o+(f<<4)+12>>2]|0;t=0;v=(aa(p,r)|0)+(c[o+(f<<4)+8>>2]<<6)|0;while(1){u=v&2047;w=b+(t<<2)|0;g[w>>2]=+g[w>>2]+s*+g[q+(u<<2)>>2];t=t+1|0;if((t|0)==(e|0)){break}else{v=p+u|0}}f=f+1|0}while((f|0)<(n|0))}}if((j|0)==0|(h|0)==0|m^1){y=0}else{h=0;while(1){j=b+(h<<2)|0;g[j>>2]=+g[j>>2]*-1.0;j=h+1|0;if((j|0)==(e|0)){y=0;break}else{h=j}}}do{g[l+(y<<2)>>2]=1.0;y=y+1|0}while((y|0)!=256);if((c[a>>2]|0)!=0){y=c[a+8>>2]|0;if((y|0)>0){Id(l|0,0,((y|0)>1?y<<2:4)|0)|0}g[l+(y<<2)>>2]=0.0;g[l+(y+1<<2)>>2]=.14642329514026642;g[l+(y+2<<2)>>2]=.5;g[l+(y+3<<2)>>2]=.8535767197608948}if((c[a+4>>2]|0)!=0?(y=c[a+12>>2]|0,g[l+(y+ -4<<2)>>2]=.8535767197608948,g[l+(y+ -3<<2)>>2]=.5,g[l+(y+ -2<<2)>>2]=.14642329514026642,g[l+(y+ -1<<2)>>2]=0.0,(y|0)<256):0){Id(l+(y<<2)|0,0,1024-(y<<2)|0)|0}if(m){z=0}else{i=k;return 0}do{m=b+(z<<2)|0;g[m>>2]=+g[l+(z+d<<2)>>2]*+g[m>>2];z=z+1|0}while((z|0)!=(e|0));i=k;return 0}function Mb(a,b,d,e,f,h,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=k|0;var l=0,m=0,n=0,o=0;l=i;i=i+1024|0;m=l;Lb(a,m+512|0,128,128,b,d,k)|0;Lb(e,m,0,128,f,h,k)|0;k=c[e+32>>2]|0;a:do{if((c[a+32>>2]|0)>0){if((k|0)>0?((c[a+12>>2]|0)+ -128|0)>=(c[e+8>>2]|0):0){h=c[73630]|0;f=c[73500]|0;d=0;while(1){b=m+(d+128<<2)|0;g[b>>2]=+g[h+(d<<2)>>2]*+g[b>>2];b=m+(d<<2)|0;g[b>>2]=+g[f+(d<<2)>>2]*+g[b>>2];b=d+1|0;if((b|0)==128){n=0;break a}else{d=b}}}if((c[a+4>>2]|0)==0){d=c[73630]|0;f=0;while(1){h=m+(f+128<<2)|0;g[h>>2]=+g[d+(f<<2)>>2]*+g[h>>2];h=f+1|0;if((h|0)==128){o=9;break}else{f=h}}}else{o=9}}else{o=9}}while(0);if((o|0)==9){if((k|0)>0?(c[e>>2]|0)==0:0){e=c[73500]|0;k=0;while(1){o=m+(k<<2)|0;g[o>>2]=+g[e+(k<<2)>>2]*+g[o>>2];o=k+1|0;if((o|0)==128){n=0;break}else{k=o}}}else{n=0}}do{g[j+(n<<2)>>2]=+g[m+(n<<2)>>2]+ +g[m+(n+128<<2)>>2];n=n+1|0}while((n|0)!=128);i=l;return 0}function Nb(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0.0,Aa=0.0,Ba=0.0,Ca=0.0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0.0,Pa=0.0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0.0,Va=0.0,Wa=0,Xa=0,Ya=0.0,Za=0.0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,gb=0,hb=0,ib=0,jb=0.0,kb=0.0,lb=0.0,mb=0.0,nb=0.0,ob=0.0,pb=0.0,qb=0.0,rb=0.0,sb=0.0,tb=0.0,ub=0.0,vb=0.0,wb=0.0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0;f=i;i=i+29776|0;h=f+13376|0;j=f+13312|0;k=f+5120|0;l=f+4096|0;m=f+2048|0;n=f+1536|0;o=f+1024|0;p=f;q=f+3072|0;c[h>>2]=f+21576;c[h+4>>2]=f+13384;Kb(a,h,d)|0;r=(d|0)==0;if(r){s=a+65544|0;t=(c[s>>2]|0)+ -1|0;c[s>>2]=(t|0)==0?3:t;i=f;return 0}t=a+65544|0;s=p+4|0;u=p+8|0;v=p+12|0;w=q+288|0;x=q+80|0;y=p+16|0;z=p+28|0;A=p+20|0;B=p+24|0;C=q+120|0;D=q+104|0;F=q+88|0;G=q+72|0;H=p+32|0;I=p+36|0;J=p+40|0;K=p+44|0;L=q+284|0;M=q+280|0;N=q+144|0;O=q+136|0;P=p+48|0;Q=p+52|0;R=p+56|0;S=p+60|0;T=q+276|0;U=q+108|0;V=q+272|0;W=q+268|0;X=q+264|0;Y=q+148|0;Z=q+140|0;_=q+260|0;$=q+256|0;ba=q+252|0;ca=q+248|0;da=q+244|0;ea=q+240|0;fa=q+236|0;ga=q+232|0;ha=q+228|0;q=n+252|0;ia=l+512|0;ja=0;do{ka=(ja<<12)+ -13|0;la=a+(ja<<13)+32776|0;Id(k|0,0,8192)|0;c[j>>2]=k;c[j+4>>2]=k+512;c[j+8>>2]=k+1024;c[j+12>>2]=k+1536;c[j+16>>2]=k+2048;c[j+20>>2]=k+2560;c[j+24>>2]=k+3072;c[j+28>>2]=k+3584;c[j+32>>2]=k+4096;c[j+36>>2]=k+4608;c[j+40>>2]=k+5120;c[j+44>>2]=k+5632;c[j+48>>2]=k+6144;c[j+52>>2]=k+6656;c[j+56>>2]=k+7168;c[j+60>>2]=k+7680;ma=(c[(c[a>>2]|0)+4>>2]|0)+152|0;if((c[ma>>2]|0)!=0){na=c[(c[a+(ja<<2)>>2]|0)+8>>2]|0;oa=0;do{c[na+(oa*152|0)+60>>2]=c[na+(oa<<2)+2440>>2];oa=oa+1|0;pa=c[ma>>2]|0}while(oa>>>0<pa>>>0);if((pa|0)!=0){oa=a+(ja<<2)|0;ma=h+(ja<<2)|0;na=0;do{qa=a+(ja<<13)+(na<<7<<2)+49160|0;ra=c[oa>>2]|0;sa=c[ra+12>>2]|0;ta=c[ra+8>>2]|0;ra=(c[ta+(na*152|0)+60>>2]|0)==0;ua=c[71054]|0;do{if((c[sa+(na*152|0)+60>>2]|0)!=0){if(ra){va=ua+2048|0;break}else{va=ua+3072|0;break}}else{va=ra?ua:ua+1024|0}}while(0);ua=na<<7;ra=ua|127;if((na&1|0)==0){wa=0;while(1){xa=wa<<1;ya=c[ma>>2]|0;za=+g[ya+(ra-xa<<2)>>2];Aa=+g[294888+(wa<<2)>>2];Ba=+g[ya+(xa+ua<<2)>>2];Ca=+g[295144+(wa<<2)>>2];g[n+(xa<<2)>>2]=za*Aa+Ba*Ca;g[n+((xa|1)<<2)>>2]=Ba*Aa-za*Ca;xa=wa+1|0;if((xa|0)==64){Da=0;break}else{wa=xa}}}else{wa=0;while(1){xa=wa<<1;ya=c[ma>>2]|0;Ca=+g[ya+(xa+ua<<2)>>2];za=+g[294888+(wa<<2)>>2];Aa=+g[ya+(ra-xa<<2)>>2];Ba=+g[295144+(wa<<2)>>2];g[n+(xa<<2)>>2]=Ca*za+Aa*Ba;g[n+((xa|1)<<2)>>2]=Aa*za-Ca*Ba;xa=wa+1|0;if((xa|0)==64){Da=0;break}else{wa=xa}}}while(1){wa=1<<Da;ra=64>>>Da;xa=128>>>Da;ya=32>>>Da;Ea=(ya|0)==0;Fa=Da<<5;Ga=0;do{Ha=aa(Ga,xa)|0;if(!Ea){Ia=0;do{Ja=(Ia<<1)+Ha|0;Ka=Ja+1|0;La=n+(Ka<<2)|0;Ba=+g[La>>2];Ma=n+(Ka+ra<<2)|0;Ca=+g[Ma>>2];Ka=n+(Ja<<2)|0;za=+g[Ka>>2];Na=n+(Ja+ra<<2)|0;Aa=+g[Na>>2];Oa=za-Aa;Pa=Ba-Ca;g[Ka>>2]=za+Aa;g[La>>2]=Ba+Ca;La=Ia+Fa|0;Ca=+g[295400+(La<<2)>>2];Ba=+g[296168+(La<<2)>>2];g[Na>>2]=Pa*Ca+Oa*Ba;g[Ma>>2]=Oa*Ca-Pa*Ba;Ia=Ia+1|0}while((Ia|0)!=(ya|0))}Ga=Ga+1|0}while(Ga>>>0<wa>>>0);wa=Da+1|0;if((wa|0)==6){Qa=0;break}else{Da=wa}}while(1){g[l+(Qa<<2)>>2]=+g[n+(e[1016+(Qa<<1)>>1]<<2)>>2]*+g[va+(Qa<<2)>>2];wa=Qa+192|0;g[l+(wa<<2)>>2]=+g[n+(e[1144+(Qa<<1)>>1]<<2)>>2]*-1.0*+g[va+(wa<<2)>>2];wa=Qa+1|0;if((wa|0)==64){Ra=0;break}else{Qa=wa}}do{wa=Ra+64|0;g[l+(wa<<2)>>2]=+g[n+(e[1272+(127-Ra<<1)>>1]<<2)>>2]*-1.0*+g[va+(wa<<2)>>2];Ra=Ra+1|0}while((Ra|0)!=128);wa=c[sa+(na*152|0)>>2]|0;Ga=c[ta+(na*152|0)>>2]|0;if((wa|Ga|0)==0){ya=c[j+(na<<2)>>2]|0;Fa=0;do{g[ya+(Fa<<2)>>2]=+g[a+(ja<<13)+(Fa+ua<<2)+49160>>2]+ +g[l+(Fa<<2)>>2];Fa=Fa+1|0}while((Fa|0)!=128)}else{Id(n|0,0,256)|0;if((Ga|0)>0){Fa=0;ya=0;while(1){ra=c[ta+(na*152|0)+(Fa<<2)+4>>2]|0;Ea=ra+32|0;if((ya|0)<=(Ea|0)&(ya|0)<(ra+33|0)){xa=c[1528+(c[ta+(na*152|0)+(Fa<<2)+32>>2]<<2)>>2]|0;Ia=ya;while(1){c[n+(Ia<<2)>>2]=xa;if((Ia|0)<(Ea|0)){Ia=Ia+1|0}else{break}}Sa=ra+33|0}else{Sa=ya}Fa=Fa+1|0;if((Fa|0)>=(Ga|0)){break}else{ya=Sa}}}if((wa|0)>0){ya=0;Ga=0;while(1){Fa=c[sa+(na*152|0)+(ya<<2)+4>>2]|0;if((Ga|0)<(Fa+1|0)){ta=(Ga|0)>(Fa|0)?Ga:Fa;Ia=c[1528+(c[sa+(na*152|0)+(ya<<2)+32>>2]<<2)>>2]|0;Ea=Ga;while(1){xa=n+(Ea<<2)|0;c[xa>>2]=(c[xa>>2]|0)+Ia;if((Ea|0)<(Fa|0)){Ea=Ea+1|0}else{break}}Ta=ta+1|0}else{Ta=Ga}ya=ya+1|0;if((ya|0)>=(wa|0)){break}else{Ga=Ta}}}Ga=c[q>>2]|0;wa=0-Ga|0;if((wa|0)>-1){Ua=+(1<<wa|0)}else{Ua=1.0/+(1<<Ga|0)}wa=c[71320]|0;ya=Ga;Ga=63;sa=256;Ea=255;Fa=0;Ba=Ua;while(1){do{if((ya|0)!=(Fa|0)){Ia=(sa|0)==256?Ea:sa;if((ya|0)<(Fa|0)){ra=0-ya|0;if((ra|0)>-1){Va=+(1<<ra|0)}else{Va=1.0/+(1<<ya|0)}ra=(Fa-ya|0)*3|0;g[m+(Ea<<2)>>2]=Va*+g[wa+(ra+ -3<<2)>>2];g[m+(Ea+ -1<<2)>>2]=Va*+g[wa+(ra+ -2<<2)>>2];g[m+(Ea+ -2<<2)>>2]=Va*+g[wa+(ra+ -1<<2)>>2];Wa=Ia;Xa=Ea+ -3|0;Ya=Va;break}ra=0-Fa|0;if((ra|0)>-1){Za=+(1<<ra|0)}else{Za=1.0/+(1<<Fa|0)}ra=(ya-Fa|0)*3|0;g[m+(Ea<<2)>>2]=Za*+g[wa+(ra+ -1<<2)>>2];g[m+(Ea+ -1<<2)>>2]=Za*+g[wa+(ra+ -2<<2)>>2];xa=Ea+ -3|0;g[m+(Ea+ -2<<2)>>2]=Za*+g[wa+(ra+ -3<<2)>>2];ra=0-ya|0;if((ra|0)>-1){Wa=Ia;Xa=xa;Ya=+(1<<ra|0);break}else{Wa=Ia;Xa=xa;Ya=1.0/+(1<<ya|0);break}}else{g[m+(Ea<<2)>>2]=Ba;g[m+(Ea+ -1<<2)>>2]=Ba;g[m+(Ea+ -2<<2)>>2]=Ba;Wa=sa;Xa=Ea+ -3|0;Ya=Ba}}while(0);g[m+(Xa<<2)>>2]=Ya;ta=Ga+ -1|0;if((Ga|0)<=0){break}xa=ya;ya=c[n+(ta<<2)>>2]|0;Ga=ta;sa=Wa;Ea=Xa+ -1|0;Ba=Ya;Fa=xa}Fa=(Wa|0)==256?255:Wa;if((Fa|0)>=128){Ea=128;while(1){sa=l+(Ea<<2)|0;g[sa>>2]=+g[m+(Ea<<2)>>2]*+g[sa>>2];if((Ea|0)==(Fa|0)){break}else{Ea=Ea+1|0}}}Ea=c[j+(na<<2)>>2]|0;Fa=0;do{g[Ea+(Fa<<2)>>2]=+g[a+(ja<<13)+(Fa+ua<<2)+49160>>2]+ +g[l+(Fa<<2)>>2]*+g[m+(Fa<<2)>>2];Fa=Fa+1|0}while((Fa|0)!=128)}Ld(qa|0,ia|0,512)|0;na=na+1|0;_a=c[(c[(c[a>>2]|0)+4>>2]|0)+152>>2]|0}while(na>>>0<_a>>>0);if((_a|0)<16){$a=_a;ab=64}}else{$a=0;ab=64}}else{$a=0;ab=64}if((ab|0)==64){ab=0;Id(a+(ja<<13)+($a<<7<<2)+49160|0,0,8192-($a<<9)|0)|0}na=a+(ja<<2)|0;ma=c[na>>2]|0;if(!((c[c[c[ma+16>>2]>>2]>>2]|0)==0?(c[c[c[ma+20>>2]>>2]>>2]|0)==0:0)){bb=ma;cb=0;ab=67}a:do{if((ab|0)==67){while(1){ab=0;ma=c[bb+20>>2]|0;if((c[ma+(cb*40|0)+20>>2]|0)!=0?(oa=c[ma+(cb*40|0)+28>>2]|0,(oa|0)<(c[ma+(cb*40|0)+32>>2]|0)):0){Fa=(oa<<2)+128|0;c[ma+(cb*40|0)+12>>2]=Fa;c[ma+(cb*40|0)+4>>2]=1;db=c[bb+16>>2]|0;eb=Fa}else{ab=70}do{if((ab|0)==70){ab=0;Fa=c[bb+16>>2]|0;if((c[Fa+(cb*40|0)+20>>2]|0)==0){c[ma+(cb*40|0)+12>>2]=0;c[ma+(cb*40|0)+4>>2]=0;db=Fa;eb=0;break}else{oa=c[Fa+(cb*40|0)+28>>2]<<2;c[ma+(cb*40|0)+12>>2]=oa;c[ma+(cb*40|0)+4>>2]=1;db=Fa;eb=oa;break}}}while(0);if((c[db+(cb*40|0)+24>>2]|0)!=0?(oa=c[db+(cb*40|0)+32>>2]<<2,(eb|0)<=(oa|0)):0){c[ma+(cb*40|0)+16>>2]=oa;c[ma+(cb*40|0)+8>>2]=1;fb=oa;ab=79}else{ab=76}do{if((ab|0)==76){ab=0;if((c[ma+(cb*40|0)+24>>2]|0)==0){c[ma+(cb*40|0)+16>>2]=256;c[ma+(cb*40|0)+8>>2]=0;gb=ma+(cb*40|0)+16|0;ab=80;break}else{oa=(c[ma+(cb*40|0)+32>>2]<<2)+128|0;c[ma+(cb*40|0)+16>>2]=oa;c[ma+(cb*40|0)+8>>2]=1;fb=oa;ab=79;break}}}while(0);if((ab|0)==79){ab=0;oa=ma+(cb*40|0)+16|0;Fa=fb+4|0;if((Fa|0)>256){gb=oa;ab=80}else{hb=oa;ib=Fa}}if((ab|0)==80){ab=0;hb=gb;ib=256}c[hb>>2]=ib;if(!((c[ma+(cb*40|0)+36>>2]|0)==0?(c[db+(cb*40|0)+36>>2]|0)==0:0)){Fa=c[db>>2]|0;oa=c[ma>>2]|0;Mb(db+(cb*40|0)+4|0,c[Fa+4>>2]|0,c[Fa+(cb<<2)+864>>2]|0,ma+(cb*40|0)+4|0,c[oa+4>>2]|0,c[oa+(cb<<2)+864>>2]|0,o,ja)|0;oa=c[j+(cb<<2)>>2]|0;Fa=0;do{ua=oa+(Fa<<2)|0;g[ua>>2]=+g[o+(Fa<<2)>>2]+ +g[ua>>2];Fa=Fa+1|0}while((Fa|0)!=128)}Fa=cb+1|0;if((Fa|0)==16){break a}bb=c[na>>2]|0;cb=Fa;ab=67}}}while(0);na=c[(c[a>>2]|0)+4>>2]|0;if((c[na+172>>2]|0)!=0){Ba=+(1<<c[na+176>>2]|0);qa=na+180|0;na=c[70028]|0;Fa=c[qa>>2]|0;oa=0;do{ma=c[j+(oa<<2)>>2]|0;ua=b[1592+(Fa<<1)>>1]|0;Ea=0;do{sa=ma+(Ea<<2)|0;g[sa>>2]=+g[sa>>2]+Ba*+(b[na+((ua<<16>>16)+Ea<<1)>>1]|0);Ea=Ea+1|0}while((Ea|0)!=128);Fa=Fa+1|0;c[qa>>2]=Fa;oa=oa+1|0}while((oa|0)!=16)}Id(la|0,0,8192)|0;oa=c[73720]|0;Fa=0;do{qa=(c[t>>2]|0)+Fa|0;na=Vd(qa|0,((qa|0)<0)<<31>>31|0,1431655766,0)|0;Ea=E;ua=Jd(na|0,Ea|0,63)|0;na=ua+Ea|0;Ea=0;do{g[n+(Ea<<2)>>2]=+g[(c[j+(Ea<<2)>>2]|0)+(Fa<<2)>>2]*+g[1624+(Ea<<2)>>2];Ea=Ea+1|0}while((Ea|0)!=16);Ea=aa(na,-3)|0;Ba=+g[n>>2];ua=n+28|0;Pa=+g[ua>>2];ma=n+32|0;Ca=+g[ma>>2];sa=n+60|0;Oa=+g[sa>>2];g[p>>2]=Ba+Pa+Ca+Oa;Ga=n+4|0;Aa=+g[Ga>>2];ya=n+24|0;za=+g[ya>>2];wa=n+36|0;jb=+g[wa>>2];xa=n+56|0;kb=+g[xa>>2];g[s>>2]=Aa+za+jb+kb;ta=n+8|0;lb=+g[ta>>2];Ia=n+20|0;mb=+g[Ia>>2];ra=n+40|0;nb=+g[ra>>2];Ha=n+52|0;ob=+g[Ha>>2];g[u>>2]=lb+mb+nb+ob;Ma=n+12|0;pb=+g[Ma>>2];Na=n+16|0;qb=+g[Na>>2];La=n+44|0;rb=+g[La>>2];Ka=n+48|0;sb=+g[Ka>>2];g[v>>2]=pb+qb+rb+sb;g[y>>2]=(Ba+Oa-Pa-Ca)*1.9615709781646729;g[A>>2]=(Aa+kb-za-jb)*1.6629389524459839;g[B>>2]=(lb+ob-mb-nb)*1.1111400127410889;g[z>>2]=(pb+sb-qb-rb)*.3901805877685547;g[P>>2]=((Ba-Oa)*1.9903689622879028-(Pa-Ca)*.1960342973470688)*1.9615709781646729;g[Q>>2]=((Aa-kb)*1.9138809442520142-(za-jb)*.5805693864822388)*1.6629389524459839;g[R>>2]=((lb-ob)*1.763843059539795-(mb-nb)*.9427934885025024)*1.1111400127410889;g[S>>2]=((pb-sb)*1.5460209846496582-(qb-rb)*1.2687870264053345)*.3901805877685547;rb=(+g[ua>>2]- +g[ma>>2])*.1960342973470688+(+g[n>>2]- +g[sa>>2])*1.9903689622879028;g[H>>2]=rb;qb=(+g[ya>>2]- +g[wa>>2])*.5805693864822388+(+g[Ga>>2]- +g[xa>>2])*1.9138809442520142;g[I>>2]=qb;sb=(+g[Ia>>2]- +g[ra>>2])*.9427934885025024+(+g[ta>>2]- +g[Ha>>2])*1.763843059539795;g[J>>2]=sb;pb=(+g[Na>>2]- +g[La>>2])*1.2687870264053345+(+g[Ma>>2]- +g[Ka>>2])*1.5460209846496582;g[K>>2]=pb;Ka=qa+Ea|0;nb=+g[p>>2];mb=+g[s>>2];ob=+g[u>>2];lb=+g[v>>2];jb=(nb+mb+ob+lb)*.5;g[w>>2]=jb;za=(nb-lb)*1.8477590084075928;kb=(mb-ob)*.7653669118881226;g[x>>2]=za*.2071067988872528-kb*1.2071069478988647;Aa=+g[y>>2];Ca=+g[z>>2];Pa=(Aa-Ca)*1.8477590084075928;Oa=+g[A>>2];Ba=+g[B>>2];tb=(Oa-Ba)*.7653669118881226;ub=(Ca+(Aa+Oa+Ba))*.5;g[C>>2]=ub;vb=(Pa+tb)*.5-ub;g[D>>2]=vb;wb=(Aa-Oa-Ba+Ca)*.7071068286895752-vb;g[F>>2]=wb;Ca=Pa*.2071067988872528-tb*1.2071069478988647-wb;g[G>>2]=Ca;tb=(rb+qb+sb+pb)*.5;Pa=tb-jb;g[L>>2]=Pa;jb=ub-Pa;g[M>>2]=jb;Pa=(rb-qb-sb+pb)*.7071068286895752;g[N>>2]=Pa;rb=(+g[H>>2]-pb)*1.8477590084075928;pb=(qb-sb)*.7653669118881226;sb=rb*.2071067988872528-pb*1.2071069478988647;g[O>>2]=sb;qb=+g[P>>2];ub=+g[Q>>2];Ba=+g[R>>2];Oa=+g[S>>2];Aa=(qb+ub+Ba+Oa)*.5-tb;tb=Aa-jb;g[T>>2]=tb;jb=(rb+pb)*.5-Aa;g[U>>2]=jb;Aa=(kb+za)*.5-tb;g[V>>2]=Aa;tb=(qb-Oa)*1.8477590084075928;za=jb-Aa;g[W>>2]=za;Aa=(ub-Ba)*.7653669118881226;kb=vb-za;g[X>>2]=kb;za=(tb+Aa-qb-ub-Ba-Oa)*.5;g[Y>>2]=za;vb=(qb-ub-Ba+Oa)*.7071068286895752-za;g[Z>>2]=vb;Oa=za-jb;jb=Oa-kb;g[_>>2]=jb;kb=(nb-mb-ob+lb)*.7071068286895752-jb;g[$>>2]=kb;jb=Pa-Oa;Oa=jb-kb;g[ba>>2]=Oa;kb=wb-Oa;g[ca>>2]=kb;Oa=vb-jb;jb=Oa-kb;g[da>>2]=jb;kb=+g[x>>2]-jb;g[ea>>2]=kb;jb=sb-Oa;Oa=jb-kb;g[fa>>2]=Oa;kb=Ca-Oa;g[ga>>2]=kb;g[ha>>2]=tb*.2071067988872528-Aa*1.2071069478988647-vb-jb-kb;Ea=1688+(Ka+15<<2)|0;Ma=c[Ea>>2]|0;La=a+(ka+Ma<<2)+0|0;Na=ha+0|0;Ha=La+64|0;do{c[La>>2]=c[Na>>2];La=La+4|0;Na=Na+4|0}while((La|0)<(Ha|0));Na=1688+(Ka+18<<2)|0;La=c[Na>>2]|0;Ha=1688+(Ka+3<<2)|0;qa=c[Ha>>2]|0;na=1688+(Ka<<2)|0;ta=c[na>>2]|0;g[a+(ja<<14)+(ta+48<<2)+8>>2]=+g[a+(ja<<14)+(La+7<<2)+8>>2]*16725820387364365.0e-21+ +g[a+(ja<<14)+(qa<<2)+8>>2]*-18667589756660163.0e-21;g[a+(ja<<14)+(ta+49<<2)+8>>2]=+g[a+(ja<<14)+(La+6<<2)+8>>2]*29348630050662905.0e-21+ +g[a+(ja<<14)+(qa+1<<2)+8>>2]*-25793349777814.0e-18;g[a+(ja<<14)+(ta+50<<2)+8>>2]=+g[a+(ja<<14)+(La+5<<2)+8>>2]*3487291178316809.0e-20+ +g[a+(ja<<14)+(qa+2<<2)+8>>2]*-13441729606711306.0e-21;g[a+(ja<<14)+(ta+51<<2)+8>>2]=+g[a+(ja<<14)+(La+4<<2)+8>>2]*7567904958705185.0e-21+ +g[a+(ja<<14)+(qa+3<<2)+8>>2]*-14208179663910414.0e-22;ra=a+(ja<<14)+(La<<2)+8|0;g[a+(ja<<14)+(qa+48<<2)+8>>2]=+g[a+(ja<<14)+(Ma<<2)+8>>2]*.00034691180917434394- +g[ra>>2]*.00033653710852377117;Ia=a+(ja<<14)+(La+1<<2)+8|0;g[a+(ja<<14)+(qa+49<<2)+8>>2]=+g[a+(ja<<14)+(Ma+ -1<<2)+8>>2]*-14815849681326654.0e-21- +g[Ia>>2]*4.05132112746287e-7;xa=a+(ja<<14)+(La+2<<2)+8|0;g[a+(ja<<14)+(qa+50<<2)+8>>2]=+g[a+(ja<<14)+(Ma+ -2<<2)+8>>2]*-1682840047578793.0e-20- +g[xa>>2]*11298740218990133.0e-22;Ga=a+(ja<<14)+(La+3<<2)+8|0;g[a+(ja<<14)+(qa+51<<2)+8>>2]=+g[a+(ja<<14)+(Ma+ -3<<2)+8>>2]*-88936585598276.0e-19- +g[Ga>>2]*10323990409233375.0e-22;g[a+(ja<<14)+(ta+52<<2)+8>>2]=+g[Ga>>2]*-88936585598276.0e-19+ +g[a+(ja<<14)+(qa+4<<2)+8>>2]*10323990409233375.0e-22;g[a+(ja<<14)+(ta+53<<2)+8>>2]=+g[xa>>2]*-1682840047578793.0e-20+ +g[a+(ja<<14)+(qa+5<<2)+8>>2]*11298740218990133.0e-22;g[a+(ja<<14)+(ta+54<<2)+8>>2]=+g[Ia>>2]*-14815849681326654.0e-21+ +g[a+(ja<<14)+(qa+6<<2)+8>>2]*4.05132112746287e-7;g[a+(ja<<14)+(ta+55<<2)+8>>2]=+g[ra>>2]*.00034691180917434394+ +g[a+(ja<<14)+(qa+7<<2)+8>>2]*.00033653710852377117;qa=c[Ea>>2]|0;ra=c[Na>>2]|0;Na=c[Ha>>2]|0;g[a+(ja<<14)+(Na+52<<2)+8>>2]=+g[a+(ja<<14)+(qa+ -4<<2)+8>>2]*7567904958705185.0e-21- +g[a+(ja<<14)+(ra+4<<2)+8>>2]*-14208179663910414.0e-22;g[a+(ja<<14)+(Na+53<<2)+8>>2]=+g[a+(ja<<14)+(qa+ -5<<2)+8>>2]*3487291178316809.0e-20- +g[a+(ja<<14)+(ra+5<<2)+8>>2]*-13441729606711306.0e-21;g[a+(ja<<14)+(Na+54<<2)+8>>2]=+g[a+(ja<<14)+(qa+ -6<<2)+8>>2]*29348630050662905.0e-21- +g[a+(ja<<14)+(ra+6<<2)+8>>2]*-25793349777814.0e-18;g[a+(ja<<14)+(Na+55<<2)+8>>2]=+g[a+(ja<<14)+(qa+ -7<<2)+8>>2]*16725820387364365.0e-21- +g[a+(ja<<14)+(ra+7<<2)+8>>2]*-18667589756660163.0e-21;ra=c[na>>2]|0;qa=1688+(Ka+12<<2)|0;Ha=c[qa>>2]|0;ta=1688+(Ka+9<<2)|0;Ia=c[ta>>2]|0;xa=1688+(Ka+6<<2)|0;Ga=c[xa>>2]|0;La=0;do{wa=La*48|0;ya=wa+96|0;sa=La<<3;ma=wa+48|0;ua=ya+ra|0;g[a+(ja<<14)+(ua<<2)+8>>2]=+g[a+(ja<<14)+(ua+ -48<<2)+8>>2]+ +g[oa+(sa<<2)>>2]*+g[a+(ja<<14)+(ma+Ha<<2)+8>>2];ua=wa+97|0;Ja=ua+ra|0;g[a+(ja<<14)+(Ja<<2)+8>>2]=+g[a+(ja<<14)+(Ja+ -48<<2)+8>>2]+ +g[oa+((sa|1)<<2)>>2]*+g[a+(ja<<14)+(wa+47+Ha<<2)+8>>2];Ja=wa+98|0;xb=Ja+ra|0;g[a+(ja<<14)+(xb<<2)+8>>2]=+g[a+(ja<<14)+(xb+ -48<<2)+8>>2]+ +g[oa+((sa|2)<<2)>>2]*+g[a+(ja<<14)+(wa+46+Ha<<2)+8>>2];xb=wa+99|0;yb=xb+ra|0;g[a+(ja<<14)+(yb<<2)+8>>2]=+g[a+(ja<<14)+(yb+ -48<<2)+8>>2]+ +g[oa+((sa|3)<<2)>>2]*+g[a+(ja<<14)+(wa+45+Ha<<2)+8>>2];yb=sa|7;g[a+(ja<<14)+(ya+Na<<2)+8>>2]=+g[a+(ja<<14)+(ma+Ia<<2)+8>>2]*+g[oa+(yb<<2)>>2]- +g[a+(ja<<14)+(ma+Ga<<2)+8>>2];g[a+(ja<<14)+(ua+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+47+Ia<<2)+8>>2]*+g[oa+(yb+ -1<<2)>>2]- +g[a+(ja<<14)+(wa+49+Ga<<2)+8>>2];g[a+(ja<<14)+(Ja+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+46+Ia<<2)+8>>2]*+g[oa+(yb+ -2<<2)>>2]- +g[a+(ja<<14)+(wa+50+Ga<<2)+8>>2];g[a+(ja<<14)+(xb+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+45+Ia<<2)+8>>2]*+g[oa+(yb+ -3<<2)>>2]- +g[a+(ja<<14)+(wa+51+Ga<<2)+8>>2];yb=wa+52|0;xb=wa+44|0;Ja=wa+100|0;g[a+(ja<<14)+(Ja+ra<<2)+8>>2]=+g[a+(ja<<14)+(yb+ra<<2)+8>>2]+ +g[a+(ja<<14)+(xb+Ha<<2)+8>>2]*+g[oa+((sa|4)<<2)>>2];ua=wa+53|0;ma=wa+101|0;g[a+(ja<<14)+(ma+ra<<2)+8>>2]=+g[a+(ja<<14)+(ua+ra<<2)+8>>2]+ +g[a+(ja<<14)+(wa+43+Ha<<2)+8>>2]*+g[oa+((sa|5)<<2)>>2];ya=wa+54|0;zb=wa+102|0;g[a+(ja<<14)+(zb+ra<<2)+8>>2]=+g[a+(ja<<14)+(ya+ra<<2)+8>>2]+ +g[a+(ja<<14)+(wa+42+Ha<<2)+8>>2]*+g[oa+((sa|6)<<2)>>2];Ab=wa+55|0;Bb=wa+103|0;g[a+(ja<<14)+(Bb+ra<<2)+8>>2]=+g[a+(ja<<14)+(Ab+ra<<2)+8>>2]+ +g[a+(ja<<14)+(wa+41+Ha<<2)+8>>2]*+g[oa+((sa|7)<<2)>>2];Cb=sa|3;g[a+(ja<<14)+(Ja+Na<<2)+8>>2]=+g[a+(ja<<14)+(xb+Ia<<2)+8>>2]*+g[oa+(Cb<<2)>>2]- +g[a+(ja<<14)+(yb+Ga<<2)+8>>2];g[a+(ja<<14)+(ma+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+43+Ia<<2)+8>>2]*+g[oa+(Cb+ -1<<2)>>2]- +g[a+(ja<<14)+(ua+Ga<<2)+8>>2];g[a+(ja<<14)+(zb+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+42+Ia<<2)+8>>2]*+g[oa+(Cb+ -2<<2)>>2]- +g[a+(ja<<14)+(ya+Ga<<2)+8>>2];g[a+(ja<<14)+(Bb+Na<<2)+8>>2]=+g[a+(ja<<14)+(wa+41+Ia<<2)+8>>2]*+g[oa+(Cb+ -3<<2)>>2]- +g[a+(ja<<14)+(Ab+Ga<<2)+8>>2];La=La+1|0}while((La|0)!=10);La=c[qa>>2]|0;Ga=c[na>>2]|0;Ia=Fa<<4;Na=oa+320|0;g[a+(ja<<13)+(Ia<<2)+32776>>2]=+g[a+(ja<<14)+(La+528<<2)+8>>2]*+g[Na>>2]+ +g[a+(ja<<14)+(Ga+528<<2)+8>>2];Ha=oa+324|0;g[a+(ja<<13)+((Ia|1)<<2)+32776>>2]=+g[a+(ja<<14)+(La+527<<2)+8>>2]*+g[Ha>>2]+ +g[a+(ja<<14)+(Ga+529<<2)+8>>2];ra=oa+328|0;g[a+(ja<<13)+((Ia|2)<<2)+32776>>2]=+g[a+(ja<<14)+(La+526<<2)+8>>2]*+g[ra>>2]+ +g[a+(ja<<14)+(Ga+530<<2)+8>>2];Ka=oa+332|0;g[a+(ja<<13)+((Ia|3)<<2)+32776>>2]=+g[a+(ja<<14)+(La+525<<2)+8>>2]*+g[Ka>>2]+ +g[a+(ja<<14)+(Ga+531<<2)+8>>2];Ga=c[ta>>2]|0;La=c[xa>>2]|0;Ea=oa+348|0;g[a+(ja<<13)+((Ia|8)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+528<<2)+8>>2]*+g[Ea>>2]- +g[a+(ja<<14)+(La+528<<2)+8>>2];Ma=oa+344|0;g[a+(ja<<13)+((Ia|9)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+527<<2)+8>>2]*+g[Ma>>2]- +g[a+(ja<<14)+(La+529<<2)+8>>2];Ab=oa+340|0;g[a+(ja<<13)+((Ia|10)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+526<<2)+8>>2]*+g[Ab>>2]- +g[a+(ja<<14)+(La+530<<2)+8>>2];Cb=oa+336|0;g[a+(ja<<13)+((Ia|11)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+525<<2)+8>>2]*+g[Cb>>2]- +g[a+(ja<<14)+(La+531<<2)+8>>2];La=c[qa>>2]|0;Ga=c[na>>2]|0;g[a+(ja<<13)+((Ia|4)<<2)+32776>>2]=+g[a+(ja<<14)+(La+524<<2)+8>>2]*+g[Cb>>2]+ +g[a+(ja<<14)+(Ga+532<<2)+8>>2];g[a+(ja<<13)+((Ia|5)<<2)+32776>>2]=+g[a+(ja<<14)+(La+523<<2)+8>>2]*+g[Ab>>2]+ +g[a+(ja<<14)+(Ga+533<<2)+8>>2];g[a+(ja<<13)+((Ia|6)<<2)+32776>>2]=+g[a+(ja<<14)+(La+522<<2)+8>>2]*+g[Ma>>2]+ +g[a+(ja<<14)+(Ga+534<<2)+8>>2];g[a+(ja<<13)+((Ia|7)<<2)+32776>>2]=+g[a+(ja<<14)+(La+521<<2)+8>>2]*+g[Ea>>2]+ +g[a+(ja<<14)+(Ga+535<<2)+8>>2];Ga=c[ta>>2]|0;Ea=c[xa>>2]|0;g[a+(ja<<13)+((Ia|12)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+524<<2)+8>>2]*+g[Ka>>2]- +g[a+(ja<<14)+(Ea+532<<2)+8>>2];g[a+(ja<<13)+((Ia|13)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+523<<2)+8>>2]*+g[ra>>2]- +g[a+(ja<<14)+(Ea+533<<2)+8>>2];g[a+(ja<<13)+((Ia|14)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+522<<2)+8>>2]*+g[Ha>>2]- +g[a+(ja<<14)+(Ea+534<<2)+8>>2];g[a+(ja<<13)+((Ia|15)<<2)+32776>>2]=+g[a+(ja<<14)+(Ga+521<<2)+8>>2]*+g[Na>>2]- +g[a+(ja<<14)+(Ea+535<<2)+8>>2];Fa=Fa+1|0}while((Fa|0)!=128);ja=ja+1|0}while((ja|0)!=(d|0));ja=(c[t>>2]|0)+ -1|0;c[t>>2]=(ja|0)==0?3:ja;if(r){i=f;return 0}else{Db=0}do{r=a+(Db<<2)|0;ja=c[r>>2]|0;t=ja+8|0;ha=c[t>>2]|0;c[t>>2]=c[ja+12>>2];c[(c[r>>2]|0)+12>>2]=ha;ha=c[r>>2]|0;ja=ha+20|0;t=c[ja>>2]|0;c[ja>>2]=c[ha+16>>2];c[(c[r>>2]|0)+16>>2]=t;Db=Db+1|0}while((Db|0)!=(d|0));i=f;return 0}function Ob(a,c,d){a=a|0;c=c|0;d=d|0;var e=0,f=0,h=0;e=i;f=0;do{h=~~+g[a+(c<<13)+(f<<2)+32776>>2];do{if((h|0)<=32767){if((h|0)<-32768){b[d+(f<<1)>>1]=-32768;break}else{b[d+(f<<1)>>1]=h;break}}else{b[d+(f<<1)>>1]=32767}}while(0);f=f+1|0}while((f|0)!=2048);i=e;return 0}function Pb(a,b){a=a|0;b=b|0;var f=0,g=0,h=0;f=i;g=qb(b,d[a+16|0]|0,0)|0;h=d[(c[a+4>>2]|0)+g|0]|0;qb(b,e[(c[a>>2]|0)+((h<<1|1)<<1)>>1]|0,1)|0;i=f;return h|0}function Qb(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=b+8|0;g=f+64|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(g|0));f=qb(a,1,1)|0;c[b>>2]=f;if((f|0)==0){i=e;return 0}f=qb(a,1,1)|0;c[b+4>>2]=f;g=(d|0)==0;if((f|0)==0){if(g){i=e;return 0}else{h=0}do{c[b+(h<<2)+8>>2]=1;h=h+1|0}while((h|0)!=(d|0));i=e;return 0}else{if(g){i=e;return 0}else{j=0}do{c[b+(j<<2)+8>>2]=qb(a,1,1)|0;j=j+1|0}while((j|0)!=(d|0));i=e;return 0}return 0}function Rb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;d=i;e=c[b+164>>2]|0;if((e|0)==3){f=b+168|0;g=c[f>>2]|0;if((c[b>>2]|0)==0){h=b+4|0;j=b+172|0;if(g>>>0<((c[(c[h>>2]|0)+144>>2]|0)-(c[j>>2]|0)|0)>>>0){k=g}else{i=d;return 0}do{c[b+(k<<2)+188>>2]=1;k=k+1|0}while(k>>>0<((c[(c[h>>2]|0)+144>>2]|0)-(c[j>>2]|0)|0)>>>0);i=d;return 0}else{j=b+172|0;if(g>>>0<((c[j>>2]|0)+g|0)>>>0){l=g}else{i=d;return 0}do{c[b+(l<<2)+188>>2]=1;l=l+1|0}while(l>>>0<((c[j>>2]|0)+(c[f>>2]|0)|0)>>>0);i=d;return 0}}else if((e|0)==1){f=c[b+168>>2]|0;j=b+4|0;if(f>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0){m=f}else{i=d;return 0}do{c[b+(m<<2)+188>>2]=0;m=m+1|0}while(m>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0);i=d;return 0}else if((e|0)==2){e=c[b+168>>2]|0;j=b+4|0;m=e>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0;if((c[b>>2]|0)==0){if(m){n=e}else{i=d;return 0}do{c[b+(n<<2)+188>>2]=1;n=n+1|0}while(n>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0);i=d;return 0}else{if(m){o=e}else{i=d;return 0}do{c[b+(o<<2)+188>>2]=qb(a,1,1)|0;o=o+1|0}while(o>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0);i=d;return 0}}else{i=d;return 0}return 0}function Sb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;if((c[a>>2]|0)==0){e=0;do{c[b+(e<<2)>>2]=(c[a+(e<<2)+188>>2]|0)!=0;e=e+1|0}while((e|0)!=32);i=d;return 0}e=a+24|0;f=0;do{do{if((c[a+(f<<2)+188>>2]|0)==0){g=b+(f<<2)|0;if((c[(c[e>>2]|0)+(f<<2)+188>>2]|0)==0){c[g>>2]=0;break}else{c[g>>2]=2;break}}else{c[b+(f<<2)>>2]=1}}while(0);f=f+1|0}while((f|0)!=32);i=d;return 0}function Tb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=b+4|0;if((c[(c[e>>2]|0)+144>>2]|0)==0){i=d;return 0}else{f=0}do{c[b+(f<<2)+188>>2]=qb(a,3,1)|0;f=f+1|0}while(f>>>0<(c[(c[e>>2]|0)+144>>2]|0)>>>0);i=d;return 0}function Ub(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;e=i;f=b+160|0;c[f>>2]=qb(a,2,1)|0;g=qb(a,2,1)|0;h=b+164|0;c[h>>2]=g;j=b+4|0;k=b+168|0;c[k>>2]=c[(c[j>>2]|0)+144>>2];l=b+172|0;c[l>>2]=0;if((g|0)!=0){g=qb(a,5,1)|0;c[k>>2]=g;if(g>>>0>(c[(c[j>>2]|0)+144>>2]|0)>>>0){m=-5;i=e;return m|0}if((c[h>>2]|0)==3?(h=qb(a,2,1)|0,c[l>>2]=h+1,(c[b>>2]|0)!=0):0){c[l>>2]=h+3}}do{if((c[k>>2]|0)!=0){h=qb(a,5,1)|0;l=qb(a,2,1)|0;g=qb(a,3,1)|0;if((h|0)!=0){n=0;do{c[b+(n<<2)+188>>2]=qb(a,3,1)|0;n=n+1|0}while((n|0)!=(h|0))}n=h>>>0<(c[k>>2]|0)>>>0;if((l|0)==0){if(n){o=h}else{break}do{c[b+(o<<2)+188>>2]=g;o=o+1|0}while(o>>>0<(c[k>>2]|0)>>>0)}else{if(n){p=h}else{break}do{c[b+(p<<2)+188>>2]=(qb(a,l,1)|0)+g;p=p+1|0}while(p>>>0<(c[k>>2]|0)>>>0)}}}while(0);Rb(a,b)|0;a=c[f>>2]|0;if((a|0)==0){m=0;i=e;return m|0}if((c[(c[j>>2]|0)+144>>2]|0)==0){m=0;i=e;return m|0}k=a;a=0;while(1){p=b+(a<<2)+188|0;c[p>>2]=(c[p>>2]|0)+(d[296936+((((c[b>>2]|0)*3|0)+k<<5)+a)|0]|0);p=a+1|0;if(!(p>>>0<(c[(c[j>>2]|0)+144>>2]|0)>>>0)){m=0;break}k=c[f>>2]|0;a=p}i=e;return m|0}function Vb(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;f=i;i=i+128|0;g=f;h=qb(a,2,1)|0;j=b+164|0;c[j>>2]=h;k=b+4|0;l=b+168|0;c[l>>2]=c[(c[k>>2]|0)+144>>2];m=b+172|0;c[m>>2]=0;if((h|0)!=0){h=qb(a,5,1)|0;c[l>>2]=h;if(h>>>0>(c[(c[k>>2]|0)+144>>2]|0)>>>0){n=-5;i=f;return n|0}if((c[j>>2]|0)==3?(j=qb(a,2,1)|0,c[m>>2]=j+1,(c[b>>2]|0)!=0):0){c[m>>2]=j+3}}do{if((c[l>>2]|0)!=0){j=qb(a,1,1)|0;m=qb(a,1,1)|0;k=qb(a,3,1)|0;h=qb(a,4,1)|0;o=c[l>>2]|0;if((o|0)==0){p=0}else{c[g>>2]=k;q=(d[299144+(o+ -1)|0]|0)+1|0;if(q>>>0>1){o=(((k<<4)+h|0)*9|0)+ -1|0;h=1;while(1){c[g+(h<<2)>>2]=k-(d[297160+(o+h)|0]|0);r=h+1|0;if(r>>>0<q>>>0){h=r}else{s=0;break}}}else{s=0}while(1){c[b+(s<<2)+188>>2]=c[g+((d[299144+s|0]|0)<<2)>>2];h=s+1|0;q=c[l>>2]|0;if(h>>>0<q>>>0){s=h}else{p=q;break}}}q=2568+(m*24|0)|0;if((j|0)!=0){if(p>>>0<2){t=0;u=p}else{h=2584+(m*24|0)|0;o=2572+(m*24|0)|0;k=0;do{if((qb(a,1,1)|0)==0){r=qb(a,d[h]|0,0)|0;v=d[(c[o>>2]|0)+r|0]|0;qb(a,e[(c[q>>2]|0)+((v<<1|1)<<1)>>1]|0,1)|0;r=k<<1;w=b+(r<<2)+188|0;c[w>>2]=(c[w>>2]|0)+v;v=qb(a,d[h]|0,0)|0;w=d[(c[o>>2]|0)+v|0]|0;qb(a,e[(c[q>>2]|0)+((w<<1|1)<<1)>>1]|0,1)|0;v=b+((r|1)<<2)+188|0;c[v>>2]=(c[v>>2]|0)+w}k=k+1|0;x=c[l>>2]|0;y=x>>>1}while(k>>>0<y>>>0);t=y<<1;u=x}if(t>>>0<u>>>0){k=2584+(m*24|0)|0;o=2572+(m*24|0)|0;h=t;while(1){j=qb(a,d[k]|0,0)|0;w=d[(c[o>>2]|0)+j|0]|0;qb(a,e[(c[q>>2]|0)+((w<<1|1)<<1)>>1]|0,1)|0;j=b+(h<<2)+188|0;c[j>>2]=(c[j>>2]|0)+w;w=h+1|0;j=c[l>>2]|0;if(w>>>0<j>>>0){h=w}else{z=j;break}}}else{z=u}}else{if((p|0)==0){break}h=2584+(m*24|0)|0;o=2572+(m*24|0)|0;k=0;while(1){j=qb(a,d[h]|0,0)|0;w=d[(c[o>>2]|0)+j|0]|0;qb(a,e[(c[q>>2]|0)+((w<<1|1)<<1)>>1]|0,1)|0;j=b+(k<<2)+188|0;c[j>>2]=(c[j>>2]|0)+w;w=k+1|0;j=c[l>>2]|0;if(w>>>0<j>>>0){k=w}else{z=j;break}}}if((z|0)!=0){k=0;do{q=b+(k<<2)+188|0;c[q>>2]=c[q>>2]&7;k=k+1|0}while(k>>>0<(c[l>>2]|0)>>>0)}}}while(0);Rb(a,b)|0;n=0;i=f;return n|0}function Wb(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=b+160|0;c[g>>2]=qb(a,2,1)|0;h=qb(a,2,1)|0;j=b+164|0;c[j>>2]=h;k=b+4|0;l=b+168|0;c[l>>2]=c[(c[k>>2]|0)+144>>2];m=b+172|0;c[m>>2]=0;if((h|0)!=0){h=qb(a,5,1)|0;c[l>>2]=h;if(h>>>0>(c[(c[k>>2]|0)+144>>2]|0)>>>0){n=-5;i=f;return n|0}if((c[j>>2]|0)==3?(j=qb(a,2,1)|0,c[m>>2]=j+1,(c[b>>2]|0)!=0):0){c[m>>2]=j+3}}if((c[l>>2]|0)!=0?(j=qb(a,2,1)|0,m=qb(a,3,1)|0,c[b+188>>2]=m,(c[l>>2]|0)>>>0>1):0){h=2584+(j*24|0)|0;o=2572+(j*24|0)|0;p=2568+(j*24|0)|0;j=m;m=1;do{q=qb(a,d[h]|0,0)|0;r=d[(c[o>>2]|0)+q|0]|0;qb(a,e[(c[p>>2]|0)+((r<<1|1)<<1)>>1]|0,1)|0;j=r+j&7;c[b+(m<<2)+188>>2]=j;m=m+1|0}while(m>>>0<(c[l>>2]|0)>>>0)}Rb(a,b)|0;a=c[g>>2]|0;if((a|0)==0){n=0;i=f;return n|0}if((c[(c[k>>2]|0)+144>>2]|0)==0){n=0;i=f;return n|0}l=a;a=0;while(1){m=b+(a<<2)+188|0;c[m>>2]=(c[m>>2]|0)+(d[296936+((((c[b>>2]|0)*3|0)+l<<5)+a)|0]|0);m=a+1|0;if(!(m>>>0<(c[(c[k>>2]|0)+144>>2]|0)>>>0)){n=0;break}l=c[g>>2]|0;a=m}i=f;return n|0}function Xb(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;g=qb(a,2,1)|0;h=b+164|0;c[h>>2]=g;j=b+4|0;k=b+168|0;c[k>>2]=c[(c[j>>2]|0)+144>>2];l=b+172|0;c[l>>2]=0;if((g|0)!=0){g=qb(a,5,1)|0;c[k>>2]=g;if(g>>>0>(c[(c[j>>2]|0)+144>>2]|0)>>>0){m=-5;i=f;return m|0}if((c[h>>2]|0)==3?(h=qb(a,2,1)|0,c[l>>2]=h+1,(c[b>>2]|0)!=0):0){c[l>>2]=h+3}}if((c[k>>2]|0)!=0?(h=qb(a,2,1)|0,(c[k>>2]|0)!=0):0){l=b+24|0;j=2584+(h*24|0)|0;g=2572+(h*24|0)|0;n=2568+(h*24|0)|0;h=0;do{o=c[(c[l>>2]|0)+(h<<2)+188>>2]|0;p=qb(a,d[j]|0,0)|0;q=d[(c[g>>2]|0)+p|0]|0;qb(a,e[(c[n>>2]|0)+((q<<1|1)<<1)>>1]|0,1)|0;c[b+(h<<2)+188>>2]=q+o&7;h=h+1|0}while(h>>>0<(c[k>>2]|0)>>>0)}Rb(a,b)|0;m=0;i=f;return m|0}function Yb(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=qb(a,2,1)|0;h=b+164|0;c[h>>2]=g;j=b+4|0;k=b+168|0;c[k>>2]=c[(c[j>>2]|0)+144>>2];l=b+172|0;c[l>>2]=0;if((g|0)!=0){g=qb(a,5,1)|0;c[k>>2]=g;if(g>>>0>(c[(c[j>>2]|0)+144>>2]|0)>>>0){m=-5;i=f;return m|0}if((c[h>>2]|0)==3?(h=qb(a,2,1)|0,c[l>>2]=h+1,(c[b>>2]|0)!=0):0){c[l>>2]=h+3}}if((c[k>>2]|0)!=0?(h=qb(a,2,1)|0,l=b+24|0,j=c[(c[l>>2]|0)+188>>2]|0,g=2584+(h*24|0)|0,n=qb(a,d[g]|0,0)|0,o=2572+(h*24|0)|0,p=d[(c[o>>2]|0)+n|0]|0,n=2568+(h*24|0)|0,qb(a,e[(c[n>>2]|0)+((p<<1|1)<<1)>>1]|0,1)|0,h=p+j&7,c[b+188>>2]=h,(c[k>>2]|0)>>>0>1):0){j=h;h=1;do{p=c[l>>2]|0;q=(c[p+(h<<2)+188>>2]|0)-(c[p+(h+ -1<<2)+188>>2]|0)+j|0;p=qb(a,d[g]|0,0)|0;r=d[(c[o>>2]|0)+p|0]|0;qb(a,e[(c[n>>2]|0)+((r<<1|1)<<1)>>1]|0,1)|0;j=q+r&7;c[b+(h<<2)+188>>2]=j;h=h+1|0}while(h>>>0<(c[k>>2]|0)>>>0)}Rb(a,b)|0;m=0;i=f;return m|0}function Zb(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=b+4|0;if((c[(c[e>>2]|0)+148>>2]|0)==0){i=d;return 0}else{f=0}do{c[b+(f<<2)+316>>2]=qb(a,6,1)|0;f=f+1|0}while(f>>>0<(c[(c[e>>2]|0)+148>>2]|0)>>>0);i=d;return 0}function _b(a,b){a=a|0;b=b|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;e=i;i=i+128|0;f=e;g=qb(a,2,1)|0;if((g|0)!=3){h=qb(a,5,1)|0;j=qb(a,3,1)|0;k=qb(a,6,1)|0;if((h|0)!=0){l=0;do{c[b+(l<<2)+316>>2]=qb(a,6,1)|0;l=l+1|0}while((l|0)!=(h|0))}l=b+4|0;m=c[l>>2]|0;n=h>>>0<(c[m+148>>2]|0)>>>0;if((j|0)==0){if(n){o=h;while(1){c[b+(o<<2)+316>>2]=k;p=o+1|0;q=c[l>>2]|0;if(p>>>0<(c[q+148>>2]|0)>>>0){o=p}else{r=q;break}}}else{r=m}}else{if(n){n=h;while(1){c[b+(n<<2)+316>>2]=(qb(a,j,1)|0)+k;h=n+1|0;o=c[l>>2]|0;if(h>>>0<(c[o+148>>2]|0)>>>0){n=h}else{r=o;break}}}else{r=m}}if((g|0)==0){i=e;return 0}m=b+4|0;if((c[r+148>>2]|0)==0){i=e;return 0}r=(g<<5)+ -32|0;g=0;do{n=b+(g<<2)+316|0;c[n>>2]=(c[n>>2]|0)-(c[299824+(r+g<<2)>>2]|0);g=g+1|0}while(g>>>0<(c[(c[m>>2]|0)+148>>2]|0)>>>0);i=e;return 0}m=b+176|0;c[m>>2]=qb(a,6,1)|0;g=qb(a,6,1)|0;c[b+180>>2]=g;r=b+4|0;n=c[(c[r>>2]|0)+148>>2]|0;if((n|0)!=0){l=c[m>>2]|0;c[f>>2]=l;m=(d[299144+(n+ -1)|0]|0)+1|0;if(m>>>0>1){n=(g*9|0)+ -1|0;g=1;while(1){c[f+(g<<2)>>2]=l-(d[299184+(n+g)|0]|0);k=g+1|0;if((k|0)==(m|0)){s=0;break}else{g=k}}}else{s=0}do{c[b+(s<<2)+316>>2]=c[f+((d[299144+s|0]|0)<<2)>>2];s=s+1|0}while(s>>>0<(c[(c[r>>2]|0)+148>>2]|0)>>>0)}s=qb(a,5,1)|0;f=qb(a,2,1)|0;g=(qb(a,4,1)|0)+ -7|0;if((s|0)!=0){m=0;do{n=(qb(a,4,1)|0)+ -7|0;l=b+(m<<2)+316|0;c[l>>2]=n+(c[l>>2]|0);m=m+1|0}while((m|0)!=(s|0))}m=c[r>>2]|0;if((f|0)!=0?s>>>0<(c[m+148>>2]|0)>>>0:0){l=s;while(1){n=qb(a,f,1)|0;k=b+(l<<2)+316|0;c[k>>2]=(c[k>>2]|0)+n;n=l+1|0;k=c[r>>2]|0;if(n>>>0<(c[k+148>>2]|0)>>>0){l=n}else{t=k;break}}}else{t=m}m=c[t+148>>2]|0;if(s>>>0<m>>>0){t=s;while(1){s=b+(t<<2)+316|0;c[s>>2]=g+(c[s>>2]|0);s=t+1|0;l=c[(c[r>>2]|0)+148>>2]|0;if(s>>>0<l>>>0){t=s}else{u=l;break}}}else{u=m}if((u|0)==0){i=e;return 0}else{v=0}do{u=b+(v<<2)+316|0;c[u>>2]=c[u>>2]&63;v=v+1|0}while(v>>>0<(c[(c[r>>2]|0)+148>>2]|0)>>>0);i=e;return 0}function $b(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;i=i+128|0;g=f;h=qb(a,2,1)|0;j=b+176|0;c[j>>2]=qb(a,6,1)|0;k=qb(a,6,1)|0;c[b+180>>2]=k;l=b+4|0;m=c[(c[l>>2]|0)+148>>2]|0;if((m|0)==0){i=f;return 0}n=c[j>>2]|0;c[g>>2]=n;j=(d[299144+(m+ -1)|0]|0)+1|0;if(j>>>0>1){m=(k*9|0)+ -1|0;k=1;while(1){c[g+(k<<2)>>2]=n-(d[299184+(m+k)|0]|0);o=k+1|0;if((o|0)==(j|0)){p=0;break}else{k=o}}}else{p=0}do{c[b+(p<<2)+316>>2]=c[g+((d[299144+p|0]|0)<<2)>>2];p=p+1|0;q=c[(c[l>>2]|0)+148>>2]|0}while(p>>>0<q>>>0);if((q|0)==0){i=f;return 0}q=6488+(h*24|0)|0;p=6476+(h*24|0)|0;g=6472+(h*24|0)|0;h=0;do{k=qb(a,d[q]|0,0)|0;j=d[(c[p>>2]|0)+k|0]|0;qb(a,e[(c[g>>2]|0)+((j<<1|1)<<1)>>1]|0,1)|0;k=b+(h<<2)+316|0;c[k>>2]=(c[k>>2]|0)+((j&8|0)==0?j&15:j|48)&63;h=h+1|0}while(h>>>0<(c[(c[l>>2]|0)+148>>2]|0)>>>0);i=f;return 0}function ac(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0;f=i;i=i+384|0;g=f+256|0;h=f;j=qb(a,2,1)|0;k=qb(a,2,1)|0;l=qb(a,6,1)|0;if((j|0)!=3){c[b+316>>2]=l;m=b+4|0;n=c[(c[m>>2]|0)+148>>2]|0;if(n>>>0>1){o=6392+(k*24|0)|0;p=6380+(k*24|0)|0;q=6376+(k*24|0)|0;r=l;s=1;while(1){t=qb(a,d[o]|0,0)|0;u=d[(c[p>>2]|0)+t|0]|0;qb(a,e[(c[q>>2]|0)+((u<<1|1)<<1)>>1]|0,1)|0;t=u+r&63;c[b+(s<<2)+316>>2]=t;u=s+1|0;v=c[(c[m>>2]|0)+148>>2]|0;if(u>>>0<v>>>0){r=t;s=u}else{w=v;break}}}else{w=n}if((j|0)==0|(w|0)==0){i=f;return 0}w=(j<<5)+ -32|0;j=0;do{n=b+(j<<2)+316|0;c[n>>2]=(c[n>>2]|0)-(c[299824+(w+j<<2)>>2]|0);j=j+1|0}while(j>>>0<(c[(c[m>>2]|0)+148>>2]|0)>>>0);i=f;return 0}m=b+176|0;c[m>>2]=l;l=qb(a,6,1)|0;c[b+180>>2]=l;j=b+4|0;w=c[(c[j>>2]|0)+148>>2]|0;if((w|0)!=0){n=c[m>>2]|0;c[g>>2]=n;m=(d[299144+(w+ -1)|0]|0)+1|0;if(m>>>0>1){w=(l*9|0)+ -1|0;l=1;while(1){c[g+(l<<2)>>2]=n-(d[299184+(w+l)|0]|0);s=l+1|0;if((s|0)==(m|0)){x=0;break}else{l=s}}}else{x=0}do{c[b+(x<<2)+316>>2]=c[g+((d[299144+x|0]|0)<<2)>>2];x=x+1|0}while(x>>>0<(c[(c[j>>2]|0)+148>>2]|0)>>>0)}x=(qb(a,4,1)|0)+56&63;c[h>>2]=x;g=c[(c[j>>2]|0)+148>>2]|0;if(g>>>0>1){l=6488+(k*24|0)|0;m=6476+(k*24|0)|0;w=6472+(k*24|0)|0;k=x;x=1;while(1){n=qb(a,d[l]|0,0)|0;s=d[(c[m>>2]|0)+n|0]|0;qb(a,e[(c[w>>2]|0)+((s<<1|1)<<1)>>1]|0,1)|0;n=k+((s&8|0)==0?s&15:s|48)&63;c[h+(x<<2)>>2]=n;s=x+1|0;r=c[(c[j>>2]|0)+148>>2]|0;if(s>>>0<r>>>0){k=n;x=s}else{y=r;break}}}else{y=g}if((y|0)==0){i=f;return 0}else{z=0}do{y=b+(z<<2)+316|0;c[y>>2]=(c[y>>2]|0)+(c[h+(z<<2)>>2]|0)&63;z=z+1|0}while(z>>>0<(c[(c[j>>2]|0)+148>>2]|0)>>>0);i=f;return 0}function bc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=qb(a,2,1)|0;h=b+4|0;if((c[(c[h>>2]|0)+148>>2]|0)==0){i=f;return 0}j=6392+(g*24|0)|0;k=6380+(g*24|0)|0;l=6376+(g*24|0)|0;g=b+24|0;m=0;do{n=qb(a,d[j]|0,0)|0;o=d[(c[k>>2]|0)+n|0]|0;qb(a,e[(c[l>>2]|0)+((o<<1|1)<<1)>>1]|0,1)|0;n=b+(m<<2)+316|0;c[n>>2]=o;c[n>>2]=(c[(c[g>>2]|0)+(m<<2)+316>>2]|0)+o&63;m=m+1|0}while(m>>>0<(c[(c[h>>2]|0)+148>>2]|0)>>>0);i=f;return 0}function cc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;g=qb(a,2,1)|0;h=b+24|0;j=c[(c[h>>2]|0)+316>>2]|0;k=6392+(g*24|0)|0;l=qb(a,d[k]|0,0)|0;m=6380+(g*24|0)|0;n=d[(c[m>>2]|0)+l|0]|0;l=6376+(g*24|0)|0;qb(a,e[(c[l>>2]|0)+((n<<1|1)<<1)>>1]|0,1)|0;c[b+316>>2]=n+j&63;j=b+4|0;if((c[(c[j>>2]|0)+148>>2]|0)>>>0>1){o=1}else{i=f;return 0}do{n=qb(a,d[k]|0,0)|0;g=d[(c[m>>2]|0)+n|0]|0;qb(a,e[(c[l>>2]|0)+((g<<1|1)<<1)>>1]|0,1)|0;n=b+(o<<2)+316|0;c[n>>2]=g;p=c[h>>2]|0;q=o+ -1|0;c[n>>2]=(c[p+(o<<2)+316>>2]|0)+g-(c[p+(q<<2)+316>>2]|0)+(c[b+(q<<2)+316>>2]|0)&63;o=o+1|0}while(o>>>0<(c[(c[j>>2]|0)+148>>2]|0)>>>0);i=f;return 0}function dc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;a=i;d=b+4|0;if((c[(c[d>>2]|0)+148>>2]|0)==0){i=a;return 0}e=b+24|0;f=0;do{c[b+(f<<2)+316>>2]=c[(c[e>>2]|0)+(f<<2)+316>>2];f=f+1|0}while(f>>>0<(c[(c[d>>2]|0)+148>>2]|0)>>>0);i=a;return 0}function ec(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=b+4|0;f=c[(c[e>>2]|0)+148>>2]|0;if((qb(a,1,1)|0)==0){g=f}else{g=qb(a,5,1)|0}if((g|0)==0){h=0;i=d;return h|0}else{j=0}while(1){f=c[b+(j<<2)+32>>2]|0;if((f|0)==2){c[b+(j<<2)+444>>2]=qb(a,1,1)|0}else if((f|0)==0){c[b+(j<<2)+444>>2]=0}else if((f|0)==1){c[b+(j<<2)+444>>2]=qb(a,(c[(c[e>>2]|0)+168>>2]|0)!=0?3:2,1)|0}else{h=-12;k=9;break}f=j+1|0;if(f>>>0<g>>>0){j=f}else{h=0;k=9;break}}if((k|0)==9){i=d;return h|0}return 0}function fc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;g=b+4|0;h=c[(c[g>>2]|0)+148>>2]|0;if((qb(a,1,1)|0)==0){j=h}else{j=qb(a,5,1)|0}if((j|0)==0){k=0;i=f;return k|0}else{l=0}while(1){h=c[b+(l<<2)+32>>2]|0;if((h|0)==2){c[b+(l<<2)+444>>2]=qb(a,1,1)|0}else if((h|0)==0){c[b+(l<<2)+444>>2]=0}else if((h|0)==1){h=c[(c[g>>2]|0)+168>>2]|0;m=qb(a,d[6752+(h*24|0)|0]|0,0)|0;n=d[(c[6740+(h*24|0)>>2]|0)+m|0]|0;qb(a,e[(c[6736+(h*24|0)>>2]|0)+((n<<1|1)<<1)>>1]|0,1)|0;c[b+(l<<2)+444>>2]=n}else{k=-13;o=9;break}n=l+1|0;if(n>>>0<j>>>0){l=n}else{k=0;o=9;break}}if((o|0)==9){i=f;return k|0}return 0}function gc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;f=i;g=b+4|0;h=c[(c[g>>2]|0)+148>>2]|0;if((qb(a,1,1)|0)==0){j=h}else{j=qb(a,5,1)|0}h=(c[(c[g>>2]|0)+168>>2]|0)==0;g=h?6736:6760|0;k=h?6736:6784|0;if((j|0)==0){l=0;i=f;return l|0}h=c[b+32>>2]|0;if((h|0)==0){c[b+444>>2]=0;m=0}else if((h|0)==1){n=qb(a,d[g+16|0]|0,0)|0;o=d[(c[g+4>>2]|0)+n|0]|0;qb(a,e[(c[g>>2]|0)+((o<<1|1)<<1)>>1]|0,1)|0;c[b+444>>2]=o;m=o}else if((h|0)==2){c[b+444>>2]=qb(a,1,1)|0;m=0}else{l=-14;i=f;return l|0}if(!(j>>>0>1)){l=0;i=f;return l|0}h=k+16|0;o=k+4|0;g=k+22|0;n=1;p=m;while(1){m=c[b+(n<<2)+32>>2]|0;if((m|0)==2){c[b+(n<<2)+444>>2]=qb(a,1,1)|0;q=p}else if((m|0)==1){r=qb(a,d[h]|0,0)|0;s=d[(c[o>>2]|0)+r|0]|0;qb(a,e[(c[k>>2]|0)+((s<<1|1)<<1)>>1]|0,1)|0;r=b+(n<<2)+444|0;t=s+p|0;c[r>>2]=t;s=(d[g]|0)&t;c[r>>2]=s;q=s}else if((m|0)==0){c[b+(n<<2)+444>>2]=0;q=p}else{l=-15;u=15;break}m=n+1|0;if(m>>>0<j>>>0){n=m;p=q}else{l=0;u=15;break}}if((u|0)==15){i=f;return l|0}return 0}function hc(a,b){a=a|0;b=b|0;var d=0,e=0;a=i;d=b+4|0;if((c[(c[d>>2]|0)+148>>2]|0)==0){i=a;return 0}else{e=0}do{c[b+(e<<2)+444>>2]=0;e=e+1|0}while(e>>>0<(c[(c[d>>2]|0)+148>>2]|0)>>>0);i=a;return 0}function ic(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;f=i;g=b+4|0;h=c[(c[g>>2]|0)+148>>2]|0;if((qb(a,1,1)|0)==0){j=h}else{j=qb(a,5,1)|0}if((j|0)==0){k=0;i=f;return k|0}h=b+24|0;l=0;while(1){m=c[b+(l<<2)+32>>2]|0;if((m|0)==0){c[b+(l<<2)+444>>2]=0}else if((m|0)==1){n=c[(c[g>>2]|0)+168>>2]|0;o=qb(a,d[6824+(n*24|0)|0]|0,0)|0;p=d[(c[6812+(n*24|0)>>2]|0)+o|0]|0;qb(a,e[(c[6808+(n*24|0)>>2]|0)+((p<<1|1)<<1)>>1]|0,1)|0;n=b+(l<<2)+444|0;c[n>>2]=p;o=(c[(c[h>>2]|0)+(l<<2)+444>>2]|0)+p|0;c[n>>2]=o;c[n>>2]=(d[6830+((c[(c[g>>2]|0)+168>>2]|0)*24|0)|0]|0)&o}else if((m|0)==2){c[b+(l<<2)+444>>2]=qb(a,1,1)|0}else{k=-17;q=10;break}m=l+1|0;if(m>>>0<j>>>0){l=m}else{k=0;q=10;break}}if((q|0)==10){i=f;return k|0}return 0}function jc(f,g,h,j){f=f|0;g=g|0;h=h|0;j=j|0;var k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0;k=i;l=j+18|0;m=a[l]|0;if(m<<24>>24==1){n=j+19|0;if((h>>>(d[n]|0)|0)==0){o=0;i=k;return o|0}p=j+16|0;q=j+4|0;r=j+17|0;s=j+21|0;t=j+22|0;u=j+20|0;v=0;w=0;while(1){x=qb(f,d[p]|0,0)|0;y=d[(c[q>>2]|0)+x|0]|0;qb(f,e[(c[j>>2]|0)+((y<<1|1)<<1)>>1]|0,1)|0;x=a[r]|0;if(x<<24>>24==0){z=w}else{A=x&255;x=0;B=w;while(1){C=d[s]|0;D=y>>>(aa(C,A+~x|0)|0);E=D&d[t];do{if((a[u]|0)==0){if((E&1<<C+ -1|0)==0){b[g+(B<<1)>>1]=E;break}else{b[g+(B<<1)>>1]=E|-1<<C;break}}else{if((E|0)!=0?(qb(f,1,1)|0)!=0:0){b[g+(B<<1)>>1]=0-E;break}b[g+(B<<1)>>1]=E}}while(0);E=B+1|0;C=x+1|0;D=d[r]|0;if(C>>>0<D>>>0){A=D;x=C;B=E}else{z=E;break}}}B=v+1|0;if(B>>>0<h>>>(d[n]|0)>>>0){v=B;w=z}else{o=0;break}}i=k;return o|0}if(!((m&255)>1)){o=-20;i=k;return o|0}m=j+19|0;if((h>>>(d[m]|0)|0)==0){o=0;i=k;return o|0}z=j+16|0;w=j+4|0;v=j+17|0;n=j+21|0;r=j+22|0;u=j+20|0;t=0;s=0;while(1){q=(qb(f,1,1)|0)==0;p=a[l]|0;if(q){if((aa(d[v]|0,p&255)|0)==0){F=p;G=s}else{q=0;B=s;while(1){x=B+1|0;b[g+(B<<1)>>1]=0;A=q+1|0;y=a[l]|0;if(A>>>0<(aa(d[v]|0,y&255)|0)>>>0){q=A;B=x}else{F=y;G=x;break}}}}else{if(p<<24>>24==0){F=0;G=s}else{B=0;q=s;while(1){x=qb(f,d[z]|0,0)|0;y=d[(c[w>>2]|0)+x|0]|0;qb(f,e[(c[j>>2]|0)+((y<<1|1)<<1)>>1]|0,1)|0;x=a[v]|0;if(x<<24>>24==0){H=q}else{A=x&255;x=0;E=q;while(1){C=d[n]|0;D=y>>>(aa(C,A+~x|0)|0);I=D&d[r];do{if((a[u]|0)==0){if((I&1<<C+ -1|0)==0){b[g+(E<<1)>>1]=I;break}else{b[g+(E<<1)>>1]=I|-1<<C;break}}else{if((I|0)!=0?(qb(f,1,1)|0)!=0:0){b[g+(E<<1)>>1]=0-I;break}b[g+(E<<1)>>1]=I}}while(0);I=E+1|0;C=x+1|0;D=d[v]|0;if(C>>>0<D>>>0){A=D;x=C;E=I}else{H=I;break}}}E=B+1|0;x=a[l]|0;if(E>>>0<(x&255)>>>0){B=E;q=H}else{F=x;G=H;break}}}}q=(F&255)+t|0;if(q>>>0<h>>>(d[m]|0)>>>0){t=q;s=G}else{o=0;break}}i=k;return o|0}function kc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=b+184|0;if((c[e>>2]|0)==0){i=d;return 0}f=b+8|0;b=0;do{g=qb(a,3,1)|0;c[(c[f>>2]|0)+(b*152|0)>>2]=g;b=b+1|0}while(b>>>0<(c[e>>2]|0)>>>0);i=d;return 0}function lc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0;f=i;g=b+184|0;if((c[g>>2]|0)==0){i=f;return 0}h=b+8|0;b=0;do{j=qb(a,d[277576|0]|0,0)|0;k=d[(c[277564>>2]|0)+j|0]|0;qb(a,e[(c[69390]|0)+((k<<1|1)<<1)>>1]|0,1)|0;c[(c[h>>2]|0)+(b*152|0)>>2]=k;b=b+1|0}while(b>>>0<(c[g>>2]|0)>>>0);i=f;return 0}function mc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;g=qb(a,d[277576|0]|0,0)|0;h=d[(c[277564>>2]|0)+g|0]|0;qb(a,e[(c[69390]|0)+((h<<1|1)<<1)>>1]|0,1)|0;g=b+8|0;c[c[g>>2]>>2]=h;j=b+184|0;if((c[j>>2]|0)>>>0>1){k=h;l=1}else{i=f;return 0}do{h=qb(a,d[277600|0]|0,0)|0;b=d[(c[277588>>2]|0)+h|0]|0;qb(a,e[(c[69396]|0)+((b<<1|1)<<1)>>1]|0,1)|0;k=b+k&7;c[(c[g>>2]|0)+(l*152|0)>>2]=k;l=l+1|0}while(l>>>0<(c[j>>2]|0)>>>0);i=f;return 0}function nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=qb(a,2,1)|0;f=qb(a,3,1)|0;g=b+184|0;h=(c[g>>2]|0)==0;if((e|0)==0){if(h){i=d;return 0}j=c[b+8>>2]|0;k=0;do{c[j+(k*152|0)>>2]=f;k=k+1|0}while(k>>>0<(c[g>>2]|0)>>>0);i=d;return 0}else{if(h){i=d;return 0}h=b+8|0;b=0;do{k=(qb(a,e,1)|0)+f|0;c[(c[h>>2]|0)+(b*152|0)>>2]=k;b=b+1|0}while(b>>>0<(c[g>>2]|0)>>>0);i=d;return 0}return 0}function oc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=b+184|0;if((c[g>>2]|0)==0){i=f;return 0}h=b+24|0;j=b+8|0;b=0;do{k=c[(c[(c[h>>2]|0)+8>>2]|0)+(b*152|0)>>2]|0;l=qb(a,d[277600|0]|0,0)|0;m=d[(c[277588>>2]|0)+l|0]|0;qb(a,e[(c[69396]|0)+((m<<1|1)<<1)>>1]|0,1)|0;c[(c[j>>2]|0)+(b*152|0)>>2]=m+k&7;b=b+1|0}while(b>>>0<(c[g>>2]|0)>>>0);i=f;return 0}function pc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;a=i;d=b+184|0;if((c[d>>2]|0)==0){i=a;return 0}e=c[(c[b+24>>2]|0)+8>>2]|0;f=c[b+8>>2]|0;b=0;do{c[f+(b*152|0)>>2]=c[e+(b*152|0)>>2];b=b+1|0}while(b>>>0<(c[d>>2]|0)>>>0);i=a;return 0}function qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=c[b>>2]<<2;Ta[c[300144+(e+(qb(a,2,1)|0)<<2)>>2]&63](a,b)|0;a=c[b+8>>2]|0;b=0;while(1){e=b+1|0;if((c[a+(b*152|0)>>2]|0)>7){f=-21;g=4;break}if(e>>>0<16){b=e}else{f=0;g=4;break}}if((g|0)==4){i=d;return f|0}return 0}function rc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=b+184|0;f=c[e>>2]|0;if((f|0)==0){i=d;return 0}g=b+8|0;b=f;f=c[g>>2]|0;h=0;while(1){if((c[f+(h*152|0)>>2]|0)==0){j=b;k=f}else{l=0;do{m=qb(a,4,1)|0;n=c[g>>2]|0;c[n+(h*152|0)+(l<<2)+32>>2]=m;l=l+1|0}while(l>>>0<(c[n+(h*152|0)>>2]|0)>>>0);j=c[e>>2]|0;k=n}h=h+1|0;if(!(h>>>0<j>>>0)){break}else{b=j;f=k}}i=d;return 0}function sc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;f=i;g=b+184|0;h=c[g>>2]|0;if((h|0)==0){i=f;return 0}j=b+8|0;b=c[j>>2]|0;k=h;h=0;while(1){if((c[b+(h*152|0)>>2]|0)==0){l=k;m=b}else{n=qb(a,d[277624|0]|0,0)|0;o=d[(c[277612>>2]|0)+n|0]|0;qb(a,e[(c[69402]|0)+((o<<1|1)<<1)>>1]|0,1)|0;n=c[j>>2]|0;c[n+(h*152|0)+32>>2]=o;if((c[n+(h*152|0)>>2]|0)>>>0>1){p=o;o=1;while(1){q=qb(a,d[277648|0]|0,0)|0;r=d[(c[277636>>2]|0)+q|0]|0;qb(a,e[(c[69408]|0)+((r<<1|1)<<1)>>1]|0,1)|0;q=c[j>>2]|0;s=r+p&15;c[q+(h*152|0)+(o<<2)+32>>2]=s;r=o+1|0;if(r>>>0<(c[q+(h*152|0)>>2]|0)>>>0){p=s;o=r}else{t=q;break}}}else{t=n}l=c[g>>2]|0;m=t}h=h+1|0;if(!(h>>>0<l>>>0)){break}else{b=m;k=l}}i=f;return 0}function tc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;f=i;g=b+8|0;h=c[g>>2]|0;if((c[h>>2]|0)!=0){j=qb(a,d[277624|0]|0,0)|0;k=d[(c[277612>>2]|0)+j|0]|0;qb(a,e[(c[69402]|0)+((k<<1|1)<<1)>>1]|0,1)|0;j=c[g>>2]|0;c[j+32>>2]=k;if((c[j>>2]|0)>>>0>1){l=k;k=1;while(1){m=qb(a,d[277648|0]|0,0)|0;n=d[(c[277636>>2]|0)+m|0]|0;qb(a,e[(c[69408]|0)+((n<<1|1)<<1)>>1]|0,1)|0;m=c[g>>2]|0;o=n+l&15;c[m+(k<<2)+32>>2]=o;n=k+1|0;if(n>>>0<(c[m>>2]|0)>>>0){l=o;k=n}else{p=m;break}}}else{p=j}}else{p=h}h=b+184|0;b=c[h>>2]|0;if(b>>>0>1){q=p;r=b;s=1}else{i=f;return 0}while(1){if((c[q+(s*152|0)>>2]|0)==0){t=q;u=r}else{b=s+ -1|0;p=q;j=0;while(1){if(j>>>0<(c[p+(b*152|0)>>2]|0)>>>0){k=c[p+(b*152|0)+(j<<2)+32>>2]|0;l=qb(a,d[277672|0]|0,0)|0;m=d[(c[277660>>2]|0)+l|0]|0;qb(a,e[(c[69414]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[g>>2]|0;c[l+(s*152|0)+(j<<2)+32>>2]=m+k&15;v=l}else{l=qb(a,d[277672|0]|0,0)|0;k=d[(c[277660>>2]|0)+l|0]|0;qb(a,e[(c[69414]|0)+((k<<1|1)<<1)>>1]|0,1)|0;l=c[g>>2]|0;c[l+(s*152|0)+(j<<2)+32>>2]=k+7&15;v=l}j=j+1|0;if(!(j>>>0<(c[v+(s*152|0)>>2]|0)>>>0)){break}else{p=v}}t=v;u=c[h>>2]|0}s=s+1|0;if(!(s>>>0<u>>>0)){break}else{q=t;r=u}}i=f;return 0}function uc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;d=i;e=qb(a,2,1)|0;f=qb(a,4,1)|0;g=b+184|0;h=c[g>>2]|0;j=(h|0)==0;if((e|0)==0){if(j){i=d;return 0}k=c[b+8>>2]|0;l=h;m=0;while(1){n=k+(m*152|0)|0;if((c[n>>2]|0)==0){o=l}else{p=0;do{c[k+(m*152|0)+(p<<2)+32>>2]=f;p=p+1|0}while(p>>>0<(c[n>>2]|0)>>>0);o=c[g>>2]|0}m=m+1|0;if(!(m>>>0<o>>>0)){break}else{l=o}}i=d;return 0}else{if(j){i=d;return 0}j=b+8|0;b=c[j>>2]|0;o=h;h=0;while(1){if((c[b+(h*152|0)>>2]|0)==0){q=o;r=b}else{l=0;do{m=(qb(a,e,1)|0)+f|0;s=c[j>>2]|0;c[s+(h*152|0)+(l<<2)+32>>2]=m;l=l+1|0}while(l>>>0<(c[s+(h*152|0)>>2]|0)>>>0);q=c[g>>2]|0;r=s}h=h+1|0;if(!(h>>>0<q>>>0)){break}else{b=r;o=q}}i=d;return 0}return 0}function vc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=b+184|0;h=c[g>>2]|0;if((h|0)==0){i=f;return 0}j=b+8|0;k=b+24|0;b=h;h=c[j>>2]|0;l=0;while(1){if((c[h+(l*152|0)>>2]|0)==0){m=b;n=h}else{o=0;do{p=c[(c[k>>2]|0)+8>>2]|0;if(o>>>0<(c[p+(l*152|0)>>2]|0)>>>0){q=c[p+(l*152|0)+(o<<2)+32>>2]|0;p=qb(a,d[277696|0]|0,0)|0;r=d[(c[277684>>2]|0)+p|0]|0;qb(a,e[(c[69420]|0)+((r<<1|1)<<1)>>1]|0,1)|0;p=c[j>>2]|0;c[p+(l*152|0)+(o<<2)+32>>2]=r+q&15;s=p}else{p=qb(a,d[277696|0]|0,0)|0;q=d[(c[277684>>2]|0)+p|0]|0;qb(a,e[(c[69420]|0)+((q<<1|1)<<1)>>1]|0,1)|0;p=c[j>>2]|0;c[p+(l*152|0)+(o<<2)+32>>2]=q+7&15;s=p}o=o+1|0}while(o>>>0<(c[s+(l*152|0)>>2]|0)>>>0);m=c[g>>2]|0;n=s}l=l+1|0;if(!(l>>>0<m>>>0)){break}else{b=m;h=n}}i=f;return 0}function wc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;f=i;g=b+184|0;if((c[g>>2]|0)==0){i=f;return 0}h=b+8|0;j=b+24|0;b=c[h>>2]|0;k=0;while(1){a:do{if((c[b+(k*152|0)>>2]|0)!=0){if((qb(a,1,1)|0)!=0){l=qb(a,d[277624|0]|0,0)|0;m=d[(c[277612>>2]|0)+l|0]|0;qb(a,e[(c[69402]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[h>>2]|0;c[l+(k*152|0)+32>>2]=m;if((c[l+(k*152|0)>>2]|0)>>>0>1){n=m;o=1}else{p=l;break}while(1){l=qb(a,d[277648|0]|0,0)|0;m=d[(c[277636>>2]|0)+l|0]|0;qb(a,e[(c[69408]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[h>>2]|0;q=m+n&15;c[l+(k*152|0)+(o<<2)+32>>2]=q;m=o+1|0;if(m>>>0<(c[l+(k*152|0)>>2]|0)>>>0){n=q;o=m}else{p=l;break a}}}l=c[h>>2]|0;m=l+(k*152|0)|0;if((c[m>>2]|0)==0){p=l}else{q=c[(c[j>>2]|0)+8>>2]|0;r=q+(k*152|0)|0;s=0;while(1){if(s>>>0<(c[r>>2]|0)>>>0){c[l+(k*152|0)+(s<<2)+32>>2]=c[q+(k*152|0)+(s<<2)+32>>2]}else{c[l+(k*152|0)+(s<<2)+32>>2]=7}t=s+1|0;if(t>>>0<(c[m>>2]|0)>>>0){s=t}else{p=l;break}}}}else{p=b}}while(0);k=k+1|0;if(!(k>>>0<(c[g>>2]|0)>>>0)){break}else{b=p}}i=f;return 0}function xc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;a=i;d=b+184|0;e=c[d>>2]|0;if((e|0)==0){i=a;return 0}f=c[b+8>>2]|0;g=b+24|0;b=e;e=0;while(1){h=f+(e*152|0)|0;if((c[h>>2]|0)==0){j=b}else{k=c[(c[g>>2]|0)+8>>2]|0;l=k+(e*152|0)|0;m=0;do{if(m>>>0<(c[l>>2]|0)>>>0){c[f+(e*152|0)+(m<<2)+32>>2]=c[k+(e*152|0)+(m<<2)+32>>2]}else{c[f+(e*152|0)+(m<<2)+32>>2]=7}m=m+1|0}while(m>>>0<(c[h>>2]|0)>>>0);j=c[d>>2]|0}e=e+1|0;if(!(e>>>0<j>>>0)){break}else{b=j}}i=a;return 0}function yc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b>>2]<<2;Ta[c[300176+(e+(qb(a,2,1)|0)<<2)>>2]&63](a,b)|0;a=c[b+8>>2]|0;b=0;a:while(1){e=0;while(1){f=e+1|0;if((c[a+(b*152|0)+(e<<2)+32>>2]|0)>>>0>15){g=-1;h=9;break a}if((f|0)<7){e=f}else{break}}e=(c[a+(b*152|0)>>2]|0)+ -1|0;f=0;while(1){if((f|0)>=(e|0)){break}j=f+1|0;if((c[a+(b*152|0)+(f<<2)+32>>2]|0)==(c[a+(b*152|0)+(j<<2)+32>>2]|0)){g=-1;h=9;break a}else{f=j}}f=b+1|0;if((f|0)<16){b=f}else{g=0;h=9;break}}if((h|0)==9){i=d;return g|0}return 0}function zc(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0;f=i;if((b|0)==0){g=qb(d,5,1)|0;c[(c[e+8>>2]|0)+(a*152|0)+4>>2]=g;i=f;return 0}g=e+8|0;e=c[g>>2]|0;h=c[e+(a*152|0)+(b+ -1<<2)+4>>2]|0;if(h>>>0<15){j=qb(d,5,1)|0;c[(c[g>>2]|0)+(a*152|0)+(b<<2)+4>>2]=j;i=f;return 0}if(h>>>0<23){j=h+1+(qb(d,4,1)|0)|0;c[(c[g>>2]|0)+(a*152|0)+(b<<2)+4>>2]=j;i=f;return 0}if(h>>>0<27){j=h+1+(qb(d,3,1)|0)|0;c[(c[g>>2]|0)+(a*152|0)+(b<<2)+4>>2]=j;i=f;return 0}if(h>>>0<29){j=h+1+(qb(d,2,1)|0)|0;c[(c[g>>2]|0)+(a*152|0)+(b<<2)+4>>2]=j;i=f;return 0}if((h|0)==29){j=(qb(d,1,1)|0)+30|0;c[(c[g>>2]|0)+(a*152|0)+(b<<2)+4>>2]=j;i=f;return 0}else if((h|0)==30){c[e+(a*152|0)+(b<<2)+4>>2]=31;i=f;return 0}else{i=f;return 0}return 0}function Ac(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=b+184|0;f=c[e>>2]|0;if((f|0)==0){i=d;return 0}g=b+8|0;h=f;f=c[g>>2]|0;j=0;while(1){if((c[f+(j*152|0)>>2]|0)==0){k=h;l=f}else{m=0;do{zc(j,m,a,b)|0;m=m+1|0;n=c[g>>2]|0}while(m>>>0<(c[n+(j*152|0)>>2]|0)>>>0);k=c[e>>2]|0;l=n}j=j+1|0;if(!(j>>>0<k>>>0)){break}else{h=k;f=l}}i=d;return 0}function Bc(a,b,f){a=a|0;b=b|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;h=f+8|0;if((c[(c[h>>2]|0)+(a*152|0)>>2]|0)==0){i=g;return 0}f=qb(b,5,1)|0;j=c[h>>2]|0;c[j+(a*152|0)+4>>2]=f;if((c[j+(a*152|0)>>2]|0)>>>0>1){k=j;l=f;m=1}else{i=g;return 0}do{f=((c[k+(a*152|0)+(m<<2)+32>>2]|0)-(c[k+(a*152|0)+(m+ -1<<2)+32>>2]|0)|0)<1?277704:277728;j=qb(b,d[f+16|0]|0,0)|0;n=d[(c[f+4>>2]|0)+j|0]|0;qb(b,e[(c[f>>2]|0)+((n<<1|1)<<1)>>1]|0,1)|0;l=n+l|0;k=c[h>>2]|0;c[k+(a*152|0)+(m<<2)+4>>2]=l;m=m+1|0}while(m>>>0<(c[k+(a*152|0)>>2]|0)>>>0);i=g;return 0}function Cc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=b+184|0;if((c[e>>2]|0)==0){i=d;return 0}else{f=0}do{Bc(f,a,b)|0;f=f+1|0}while(f>>>0<(c[e>>2]|0)>>>0);i=d;return 0}function Dc(a,b,f){a=a|0;b=b|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;g=i;h=f+8|0;f=c[h>>2]|0;if((c[f+(a*152|0)>>2]|0)==0){i=g;return 0}j=a+ -1|0;if((c[f+(j*152|0)>>2]|0)==0){k=qb(b,d[277768|0]|0,0)|0;l=d[(c[277756>>2]|0)+k|0]|0;qb(b,e[(c[69438]|0)+((l<<1|1)<<1)>>1]|0,1)|0;k=c[h>>2]|0;c[k+(a*152|0)+4>>2]=l;m=k}else{k=c[f+(j*152|0)+4>>2]|0;f=qb(b,d[277768|0]|0,0)|0;l=d[(c[277756>>2]|0)+f|0]|0;qb(b,e[(c[69438]|0)+((l<<1|1)<<1)>>1]|0,1)|0;f=c[h>>2]|0;c[f+(a*152|0)+4>>2]=l+k&31;m=f}if((c[m+(a*152|0)>>2]|0)>>>0>1){n=m;o=1}else{i=g;return 0}while(1){m=o>>>0>=(c[n+(j*152|0)>>2]|0)>>>0;f=o+ -1|0;if(((c[n+(a*152|0)+(o<<2)+32>>2]|0)-(c[n+(a*152|0)+(f<<2)+32>>2]|0)|0)<1){p=m?277704:277752}else{p=m?277728:277776}if(m){m=c[n+(a*152|0)+(f<<2)+4>>2]|0;f=qb(b,d[p+16|0]|0,0)|0;k=d[(c[p+4>>2]|0)+f|0]|0;qb(b,e[(c[p>>2]|0)+((k<<1|1)<<1)>>1]|0,1)|0;f=c[h>>2]|0;c[f+(a*152|0)+(o<<2)+4>>2]=k+m;q=f}else{f=c[n+(j*152|0)+(o<<2)+4>>2]|0;m=qb(b,d[p+16|0]|0,0)|0;k=d[(c[p+4>>2]|0)+m|0]|0;qb(b,e[(c[p>>2]|0)+((k<<1|1)<<1)>>1]|0,1)|0;m=c[h>>2]|0;c[m+(a*152|0)+(o<<2)+4>>2]=k+f&31;q=m}o=o+1|0;if(!(o>>>0<(c[q+(a*152|0)>>2]|0)>>>0)){break}else{n=q}}i=g;return 0}function Ec(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=b+8|0;if((c[c[e>>2]>>2]|0)!=0){f=0;do{zc(0,f,a,b)|0;f=f+1|0}while(f>>>0<(c[c[e>>2]>>2]|0)>>>0)}e=b+184|0;if((c[e>>2]|0)>>>0>1){g=1}else{i=d;return 0}do{Dc(g,a,b)|0;g=g+1|0}while(g>>>0<(c[e>>2]|0)>>>0);i=d;return 0}function Fc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;d=i;e=(qb(a,2,1)|0)+1|0;f=qb(a,5,1)|0;g=b+184|0;h=c[g>>2]|0;if((h|0)==0){i=d;return 0}j=b+8|0;b=h;h=c[j>>2]|0;k=0;while(1){if((c[h+(k*152|0)>>2]|0)==0){l=b;m=h}else{n=0;do{o=n+f+(qb(a,e,1)|0)|0;p=c[j>>2]|0;c[p+(k*152|0)+(n<<2)+4>>2]=o;n=n+1|0}while(n>>>0<(c[p+(k*152|0)>>2]|0)>>>0);l=c[g>>2]|0;m=p}k=k+1|0;if(!(k>>>0<l>>>0)){break}else{b=l;h=m}}i=d;return 0}function Gc(a,b,f){a=a|0;b=b|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0;g=i;h=f+8|0;if((c[(c[h>>2]|0)+(a*152|0)>>2]|0)==0){i=g;return 0}j=f+24|0;k=c[(c[j>>2]|0)+8>>2]|0;if((c[k+(a*152|0)>>2]|0)==0){l=qb(b,d[277816|0]|0,0)|0;m=d[(c[277804>>2]|0)+l|0]|0;qb(b,e[(c[69450]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[h>>2]|0;c[l+(a*152|0)+4>>2]=m;n=l}else{l=c[k+(a*152|0)+4>>2]|0;k=qb(b,d[277816|0]|0,0)|0;m=d[(c[277804>>2]|0)+k|0]|0;qb(b,e[(c[69450]|0)+((m<<1|1)<<1)>>1]|0,1)|0;k=c[h>>2]|0;c[k+(a*152|0)+4>>2]=m+l&31;n=k}if((c[n+(a*152|0)>>2]|0)>>>0>1){o=n;p=1}else{i=g;return 0}while(1){n=c[(c[j>>2]|0)+8>>2]|0;k=p>>>0<(c[n+(a*152|0)>>2]|0)>>>0;l=p+ -1|0;do{if(((c[o+(a*152|0)+(p<<2)+32>>2]|0)-(c[o+(a*152|0)+(l<<2)+32>>2]|0)|0)<1){m=k?277800:277704;if(k){q=c[n+(a*152|0)+(p<<2)+4>>2]|0;r=qb(b,d[m+16|0]|0,0)|0;s=d[(c[m+4>>2]|0)+r|0]|0;qb(b,e[(c[m>>2]|0)+((s<<1|1)<<1)>>1]|0,1)|0;r=c[h>>2]|0;c[r+(a*152|0)+(p<<2)+4>>2]=s+q&31;t=r;break}else{r=c[o+(a*152|0)+(l<<2)+4>>2]|0;q=qb(b,d[m+16|0]|0,0)|0;s=d[(c[m+4>>2]|0)+q|0]|0;qb(b,e[(c[m>>2]|0)+((s<<1|1)<<1)>>1]|0,1)|0;m=c[h>>2]|0;c[m+(a*152|0)+(p<<2)+4>>2]=s+r;t=m;break}}else{if(!k){m=c[o+(a*152|0)+(l<<2)+4>>2]|0;r=qb(b,d[277744|0]|0,0)|0;s=d[(c[277732>>2]|0)+r|0]|0;qb(b,e[(c[69432]|0)+((s<<1|1)<<1)>>1]|0,1)|0;r=c[h>>2]|0;c[r+(a*152|0)+(p<<2)+4>>2]=s+m;t=r;break}if((qb(b,1,1)|0)==0){r=c[h>>2]|0;c[r+(a*152|0)+(p<<2)+4>>2]=c[(c[(c[j>>2]|0)+8>>2]|0)+(a*152|0)+(p<<2)+4>>2];t=r;break}else{zc(a,p,b,f)|0;t=c[h>>2]|0;break}}}while(0);p=p+1|0;if(!(p>>>0<(c[t+(a*152|0)>>2]|0)>>>0)){break}else{o=t}}i=g;return 0}function Hc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;e=b+184|0;if((c[e>>2]|0)==0){i=d;return 0}else{f=0}do{Gc(f,a,b)|0;f=f+1|0}while(f>>>0<(c[e>>2]|0)>>>0);i=d;return 0}function Ic(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;d=i;e=b+184|0;if((c[e>>2]|0)==0){i=d;return 0}f=b+8|0;g=b+24|0;h=0;do{j=c[(c[f>>2]|0)+(h*152|0)>>2]|0;a:do{if((j|0)!=0){if(!(j>>>0>(c[(c[(c[g>>2]|0)+8>>2]|0)+(h*152|0)>>2]|0)>>>0)?(qb(a,1,1)|0)==0:0){k=c[f>>2]|0;l=k+(h*152|0)|0;if((c[l>>2]|0)==0){break}m=c[(c[g>>2]|0)+8>>2]|0;n=0;while(1){c[k+(h*152|0)+(n<<2)+4>>2]=c[m+(h*152|0)+(n<<2)+4>>2];n=n+1|0;if(!(n>>>0<(c[l>>2]|0)>>>0)){break a}}}Bc(h,a,b)|0}}while(0);h=h+1|0}while(h>>>0<(c[e>>2]|0)>>>0);i=d;return 0}function Jc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;e=b+184|0;f=c[e>>2]|0;if((f|0)==0){i=d;return 0}g=b+8|0;h=b+24|0;j=f;f=c[g>>2]|0;k=0;while(1){if((c[f+(k*152|0)>>2]|0)==0){l=j;m=f}else{n=f;o=0;while(1){p=c[(c[h>>2]|0)+8>>2]|0;if(o>>>0<(c[p+(k*152|0)>>2]|0)>>>0){c[n+(k*152|0)+(o<<2)+4>>2]=c[p+(k*152|0)+(o<<2)+4>>2];q=n}else{zc(k,o,a,b)|0;q=c[g>>2]|0}o=o+1|0;if(!(o>>>0<(c[q+(k*152|0)>>2]|0)>>>0)){break}else{n=q}}l=c[e>>2]|0;m=q}k=k+1|0;if(!(k>>>0<l>>>0)){break}else{j=l;f=m}}i=d;return 0}function Kc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[b>>2]<<2;Ta[c[300208+(e+(qb(a,2,1)|0)<<2)>>2]&63](a,b)|0;a=c[b+8>>2]|0;b=0;a:while(1){e=0;while(1){f=e+1|0;if((c[a+(b*152|0)+(e<<2)+4>>2]|0)>>>0>31){g=-1;h=9;break a}if((f|0)<7){e=f}else{break}}e=(c[a+(b*152|0)>>2]|0)+ -1|0;f=0;while(1){if((f|0)>=(e|0)){break}j=f+1|0;if((c[a+(b*152|0)+(f<<2)+4>>2]|0)<(c[a+(b*152|0)+(j<<2)+4>>2]|0)){f=j}else{g=-1;h=9;break a}}f=b+1|0;if((f|0)<16){b=f}else{g=0;h=9;break}}if((h|0)==9){i=d;return g|0}return 0}function Lc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=b+20|0;f=c[e>>2]|0;if((c[(c[f>>2]|0)+8>>2]|0)==0){i=d;return 0}else{g=f;h=0}while(1){do{if((c[b+(h<<2)+4732>>2]|0)!=0){f=qb(a,1,1)|0;j=c[e>>2]|0;c[j+(h*40|0)+20>>2]=f;if((f|0)==0){c[j+(h*40|0)+28>>2]=-1}else{j=qb(a,5,1)|0;c[(c[e>>2]|0)+(h*40|0)+28>>2]=j}j=qb(a,1,1)|0;f=c[e>>2]|0;c[f+(h*40|0)+24>>2]=j;if((j|0)==0){c[f+(h*40|0)+32>>2]=32;k=f;break}else{f=qb(a,5,1)|0;j=c[e>>2]|0;c[j+(h*40|0)+32>>2]=f;k=j;break}}else{k=g}}while(0);h=h+1|0;if(!(h>>>0<(c[(c[k>>2]|0)+8>>2]|0)>>>0)){break}else{g=k}}i=d;return 0}function Mc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;a=i;d=c[b+20>>2]|0;e=(c[d>>2]|0)+8|0;f=c[e>>2]|0;if((f|0)==0){i=a;return 0}g=b+24|0;h=f;f=0;while(1){if((c[b+(f<<2)+4732>>2]|0)==0){j=h}else{k=c[(c[g>>2]|0)+20>>2]|0;c[d+(f*40|0)+20>>2]=c[k+(f*40|0)+20>>2];c[d+(f*40|0)+24>>2]=c[k+(f*40|0)+24>>2];c[d+(f*40|0)+28>>2]=c[k+(f*40|0)+28>>2];c[d+(f*40|0)+32>>2]=c[k+(f*40|0)+32>>2];j=c[e>>2]|0}f=f+1|0;if(!(f>>>0<j>>>0)){break}else{h=j}}i=a;return 0}function Nc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=b+20|0;f=c[e>>2]|0;if((c[(c[f>>2]|0)+8>>2]|0)==0){i=d;return 0}else{g=f;h=0}while(1){if((c[b+(h<<2)+4732>>2]|0)==0){j=g}else{f=qb(a,4,1)|0;k=c[e>>2]|0;c[k+(h*40|0)+36>>2]=f;j=k}h=h+1|0;if(!(h>>>0<(c[(c[j>>2]|0)+8>>2]|0)>>>0)){break}else{g=j}}i=d;return 0}function Oc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;g=b+20|0;h=c[g>>2]|0;if((c[(c[h>>2]|0)+8>>2]|0)==0){i=f;return 0}else{j=h;k=0}while(1){if((c[b+(k<<2)+4732>>2]|0)==0){l=j}else{h=qb(a,d[277864|0]|0,0)|0;m=d[(c[277852>>2]|0)+h|0]|0;qb(a,e[(c[69462]|0)+((m<<1|1)<<1)>>1]|0,1)|0;h=c[g>>2]|0;c[h+(k*40|0)+36>>2]=m;l=h}k=k+1|0;if(!(k>>>0<(c[(c[l>>2]|0)+8>>2]|0)>>>0)){break}else{j=l}}i=f;return 0}function Pc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;g=b+20|0;h=c[g>>2]|0;if((c[(c[h>>2]|0)+8>>2]|0)==0){i=f;return 0}j=b+24|0;k=h;h=0;while(1){if((c[b+(h<<2)+4732>>2]|0)==0){l=k}else{m=qb(a,d[277888|0]|0,0)|0;n=d[(c[277876>>2]|0)+m|0]|0;qb(a,e[(c[69468]|0)+((n<<1|1)<<1)>>1]|0,1)|0;m=c[g>>2]|0;c[m+(h*40|0)+36>>2]=(c[(c[(c[j>>2]|0)+20>>2]|0)+(h*40|0)+36>>2]|0)+((n&4|0)==0?n&7:n|8)&15;l=m}h=h+1|0;if(!(h>>>0<(c[(c[l>>2]|0)+8>>2]|0)>>>0)){break}else{k=l}}i=f;return 0}function Qc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;a=i;d=c[b+20>>2]|0;e=(c[d>>2]|0)+8|0;f=c[e>>2]|0;if((f|0)==0){i=a;return 0}g=b+24|0;h=f;f=0;while(1){if((c[b+(f<<2)+4732>>2]|0)==0){j=h}else{c[d+(f*40|0)+36>>2]=c[(c[(c[g>>2]|0)+20>>2]|0)+(f*40|0)+36>>2];j=c[e>>2]|0}f=f+1|0;if(!(f>>>0<j>>>0)){break}else{h=j}}i=a;return 0}function Rc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+32|0;if((c[e>>2]|0)<=0){i=d;return 0}f=a+36|0;a=0;do{do{if((a|0)!=0){g=c[(c[f>>2]|0)+(a+ -1<<4)+12>>2]|0;if((g|0)<512){h=qb(b,10,1)|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<768){h=(qb(b,9,1)|0)+512|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<896){h=(qb(b,8,1)|0)+768|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<960){h=(qb(b,7,1)|0)+896|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<992){h=(qb(b,6,1)|0)+960|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<1008){h=(qb(b,5,1)|0)+992|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<1016){h=(qb(b,4,1)|0)+1008|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<1020){h=(qb(b,3,1)|0)+1016|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=h;break}if((g|0)<1022){g=(qb(b,2,1)|0)+1020|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=g;break}else{g=(qb(b,1,1)|0)+1022|0;c[(c[f>>2]|0)+(a<<4)+12>>2]=g;break}}else{g=qb(b,10,1)|0;c[(c[f>>2]|0)+12>>2]=g}}while(0);a=a+1|0}while((a|0)<(c[e>>2]|0));i=d;return 0}function Sc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0;d=i;e=a+32|0;f=c[e>>2]|0;if((f|0)<=0){i=d;return 0}g=a+36|0;a=f;h=f;while(1){f=h+ -1|0;do{if((h|0)!=(a|0)){j=c[(c[g>>2]|0)+(h<<4)+12>>2]|0;if((j|0)<2){k=qb(b,1,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<4){k=qb(b,2,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<8){k=qb(b,3,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<16){k=qb(b,4,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<32){k=qb(b,5,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<64){k=qb(b,6,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<128){k=qb(b,7,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<256){k=qb(b,8,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=k;break}if((j|0)<512){j=qb(b,9,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=j;break}else{j=qb(b,10,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=j;break}}else{j=qb(b,10,1)|0;c[(c[g>>2]|0)+(f<<4)+12>>2]=j}}while(0);if((f|0)<=0){break}a=c[e>>2]|0;h=f}i=d;return 0}function Tc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=b+20|0;f=c[e>>2]|0;if((c[(c[f>>2]|0)+8>>2]|0)==0){i=d;return 0}else{g=f;h=0}do{do{if((c[b+(h<<2)+4732>>2]|0)!=0){if((c[g+(h*40|0)+36>>2]|0)>>>0<2){Rc(g+(h*40|0)+4|0,a)|0;break}f=(qb(a,1,1)|0)==0;j=(c[e>>2]|0)+(h*40|0)+4|0;if(f){Rc(j,a)|0;break}else{Sc(j,a)|0;break}}}while(0);h=h+1|0;g=c[e>>2]|0}while(h>>>0<(c[(c[g>>2]|0)+8>>2]|0)>>>0);i=d;return 0}function Uc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;g=b+20|0;h=c[g>>2]|0;if((c[(c[h>>2]|0)+8>>2]|0)==0){i=f;return 0}j=b+24|0;k=h;h=0;while(1){if((c[b+(h<<2)+4732>>2]|0)!=0?(c[k+(h*40|0)+36>>2]|0)!=0:0){l=0;while(1){m=qb(a,d[277912|0]|0,0)|0;n=d[(c[277900>>2]|0)+m|0]|0;qb(a,e[(c[69474]|0)+((n<<1|1)<<1)>>1]|0,1)|0;m=(n&128|0)==0?n:n|-256;n=c[(c[j>>2]|0)+20>>2]|0;o=c[n+(h*40|0)+36>>2]|0;do{if(!(l>>>0<o>>>0)){if((o|0)<1){p=c[g>>2]|0;c[(c[p+(h*40|0)+40>>2]|0)+(l<<4)+12>>2]=m&1023;q=p;break}else{p=c[g>>2]|0;c[(c[p+(h*40|0)+40>>2]|0)+(l<<4)+12>>2]=(c[(c[n+(h*40|0)+40>>2]|0)+(o+ -1<<4)+12>>2]|0)+m&1023;q=p;break}}else{p=c[g>>2]|0;c[(c[p+(h*40|0)+40>>2]|0)+(l<<4)+12>>2]=(c[(c[n+(h*40|0)+40>>2]|0)+(l<<4)+12>>2]|0)+m&1023;q=p}}while(0);m=l+1|0;if(m>>>0<(c[q+(h*40|0)+36>>2]|0)>>>0){l=m}else{r=q;break}}}else{r=k}h=h+1|0;if(!(h>>>0<(c[(c[r>>2]|0)+8>>2]|0)>>>0)){break}else{k=r}}i=f;return 0}function Vc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;a=i;i=i+512|0;d=a;e=c[b+20>>2]|0;f=(c[e>>2]|0)+8|0;g=c[f>>2]|0;if((g|0)==0){i=a;return 0}h=b+24|0;j=b+4|0;k=g;g=0;l=0;while(1){do{if((c[b+(g<<2)+4732>>2]|0)!=0?(m=e+(g*40|0)+36|0,(c[m>>2]|0)>0):0){n=c[(c[h>>2]|0)+20>>2]|0;o=n+(g*40|0)+36|0;p=c[o>>2]|0;if((p|0)>0){q=c[n+(g*40|0)+40>>2]|0;n=0;do{c[d+(n<<2)>>2]=c[q+(n<<4)+12>>2];n=n+1|0}while((n|0)<(p|0));if((c[m>>2]|0)<=0){r=k;s=l;break}}n=c[e+(g*40|0)+40>>2]|0;q=p;t=0;u=l;while(1){v=c[n+(t<<4)+12>>2]|0;do{if((q|0)>0){w=0;x=1024;y=0;do{z=v-(c[d+(w<<2)>>2]|0)|0;A=(z|0)<0?0-z|0:z;z=(x|0)>(A|0);x=z?A:x;y=z?w:y;w=w+1|0}while((w|0)<(q|0));if((x|0)<8){c[(c[j>>2]|0)+(u<<2)+188>>2]=y;break}w=(c[j>>2]|0)+(u<<2)+188|0;if((t|0)<(q|0)){c[w>>2]=t;break}else{c[w>>2]=-1;break}}else{w=(c[j>>2]|0)+(u<<2)+188|0;if((t|0)<(q|0)){c[w>>2]=t;break}else{c[w>>2]=-1;break}}}while(0);B=u+1|0;v=t+1|0;if((v|0)>=(c[m>>2]|0)){break}q=c[o>>2]|0;t=v;u=B}r=c[f>>2]|0;s=B}else{r=k;s=l}}while(0);g=g+1|0;if(!(g>>>0<r>>>0)){break}else{k=r;l=s}}i=a;return 0}function Wc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0;d=i;e=b+20|0;f=c[e>>2]|0;g=c[f>>2]|0;h=(c[g+8>>2]|0)==0;if((c[g+4>>2]|0)!=0){if(h){i=d;return 0}else{j=f;k=0}while(1){if((c[b+(k<<2)+4732>>2]|0)!=0?(c[j+(k*40|0)+36>>2]|0)>0:0){g=0;while(1){l=qb(a,6,1)|0;m=c[e>>2]|0;c[(c[m+(k*40|0)+40>>2]|0)+(g<<4)>>2]=l;l=g+1|0;if((l|0)<(c[m+(k*40|0)+36>>2]|0)){g=l}else{n=m;break}}}else{n=j}k=k+1|0;if(!(k>>>0<(c[(c[n>>2]|0)+8>>2]|0)>>>0)){break}else{j=n}}i=d;return 0}if(h){i=d;return 0}else{o=f;p=0}while(1){if((c[b+(p<<2)+4732>>2]|0)!=0?(c[o+(p*40|0)+36>>2]|0)!=0:0){f=qb(a,6,1)|0;h=c[e>>2]|0;n=c[h+(p*40|0)+40>>2]|0;c[n>>2]=f;j=h+(p*40|0)+36|0;if((c[j>>2]|0)>1){k=1;while(1){c[n+(k<<4)>>2]=f;g=k+1|0;if((g|0)<(c[j>>2]|0)){k=g}else{q=h;break}}}else{q=h}}else{q=o}p=p+1|0;if(!(p>>>0<(c[(c[q>>2]|0)+8>>2]|0)>>>0)){break}else{o=q}}i=d;return 0}function Xc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0;f=i;g=b+20|0;h=c[g>>2]|0;j=c[h>>2]|0;k=(c[j+8>>2]|0)==0;if((c[j+4>>2]|0)!=0){if(k){i=f;return 0}else{l=h;m=0}while(1){if((c[b+(m<<2)+4732>>2]|0)!=0?(c[l+(m*40|0)+36>>2]|0)>0:0){j=0;while(1){n=qb(a,d[277960|0]|0,0)|0;o=d[(c[277948>>2]|0)+n|0]|0;qb(a,e[(c[69486]|0)+((o<<1|1)<<1)>>1]|0,1)|0;n=c[g>>2]|0;c[(c[n+(m*40|0)+40>>2]|0)+(j<<4)>>2]=o+20;o=j+1|0;if((o|0)<(c[n+(m*40|0)+36>>2]|0)){j=o}else{p=n;break}}}else{p=l}m=m+1|0;if(!(m>>>0<(c[(c[p>>2]|0)+8>>2]|0)>>>0)){break}else{l=p}}i=f;return 0}if(k){i=f;return 0}else{q=h;r=0}while(1){if((c[b+(r<<2)+4732>>2]|0)!=0?(c[q+(r*40|0)+36>>2]|0)!=0:0){h=qb(a,d[277936|0]|0,0)|0;k=d[(c[277924>>2]|0)+h|0]|0;qb(a,e[(c[69480]|0)+((k<<1|1)<<1)>>1]|0,1)|0;h=k+24|0;k=c[g>>2]|0;p=c[k+(r*40|0)+40>>2]|0;c[p>>2]=h;l=k+(r*40|0)+36|0;if((c[l>>2]|0)>1){m=1;while(1){c[p+(m<<4)>>2]=h;j=m+1|0;if((j|0)<(c[l>>2]|0)){m=j}else{s=k;break}}}else{s=k}}else{s=q}r=r+1|0;if(!(r>>>0<(c[(c[s>>2]|0)+8>>2]|0)>>>0)){break}else{q=s}}i=f;return 0}function Yc(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0;f=i;g=b+20|0;h=c[g>>2]|0;j=c[h>>2]|0;k=(c[j+8>>2]|0)==0;if((c[j+4>>2]|0)==0){if(k){i=f;return 0}j=b+24|0;l=h;m=0;while(1){if((c[b+(m<<2)+4732>>2]|0)!=0?(c[l+(m*40|0)+36>>2]|0)>0:0){n=qb(a,d[277984|0]|0,0)|0;o=d[(c[277972>>2]|0)+n|0]|0;qb(a,e[(c[69492]|0)+((o<<1|1)<<1)>>1]|0,1)|0;n=(o&16|0)==0?o&31:o|-32;o=c[(c[j>>2]|0)+20>>2]|0;if((c[o+(m*40|0)+36>>2]|0)>0){p=(c[c[o+(m*40|0)+40>>2]>>2]|0)+n|0;o=c[g>>2]|0;q=c[o+(m*40|0)+40>>2]|0;c[q>>2]=p;r=p;s=q;t=o}else{o=n+44|0;n=c[g>>2]|0;q=c[n+(m*40|0)+40>>2]|0;c[q>>2]=o;r=o;s=q;t=n}n=r&63;c[s>>2]=n;q=t+(m*40|0)+36|0;if((c[q>>2]|0)>1){o=1;while(1){c[s+(o<<4)>>2]=n;p=o+1|0;if((p|0)<(c[q>>2]|0)){o=p}else{u=t;break}}}else{u=t}}else{u=l}m=m+1|0;if(!(m>>>0<(c[(c[u>>2]|0)+8>>2]|0)>>>0)){break}else{l=u}}i=f;return 0}else{if(k){i=f;return 0}k=b+4|0;u=b+24|0;l=h;h=0;m=0;while(1){if((c[b+(h<<2)+4732>>2]|0)==0){v=l;w=m}else{t=c[l+(h*40|0)+36>>2]|0;if((t|0)>0){s=0;while(1){r=qb(a,d[277984|0]|0,0)|0;j=d[(c[277972>>2]|0)+r|0]|0;qb(a,e[(c[69492]|0)+((j<<1|1)<<1)>>1]|0,1)|0;r=(j&16|0)==0?j&31:j|-32;j=c[(c[k>>2]|0)+(s+m<<2)+188>>2]|0;if((j|0)>-1){o=(c[(c[(c[(c[u>>2]|0)+20>>2]|0)+(h*40|0)+40>>2]|0)+(j<<4)>>2]|0)+r|0;j=c[g>>2]|0;q=c[j+(h*40|0)+40>>2]|0;c[q+(s<<4)>>2]=o;x=q;y=o;z=j}else{j=r+34|0;r=c[g>>2]|0;o=c[r+(h*40|0)+40>>2]|0;c[o+(s<<4)>>2]=j;x=o;y=j;z=r}c[x+(s<<4)>>2]=y&63;r=s+1|0;j=c[z+(h*40|0)+36>>2]|0;if((r|0)<(j|0)){s=r}else{A=j;B=z;break}}}else{A=t;B=l}v=B;w=A+m|0}h=h+1|0;if(!(h>>>0<(c[(c[v>>2]|0)+8>>2]|0)>>>0)){break}else{l=v;m=w}}i=f;return 0}return 0}function Zc(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0;a=i;d=c[b+20>>2]|0;e=c[d>>2]|0;f=e+8|0;g=c[f>>2]|0;h=(g|0)==0;if((c[e+4>>2]|0)==0){if(h){i=a;return 0}e=b+24|0;j=g;k=0;while(1){if((c[b+(k<<2)+4732>>2]|0)!=0?(l=d+(k*40|0)+36|0,(c[l>>2]|0)>0):0){m=c[(c[e>>2]|0)+20>>2]|0;if((c[m+(k*40|0)+36>>2]|0)>0){n=c[c[m+(k*40|0)+40>>2]>>2]|0;m=c[d+(k*40|0)+40>>2]|0;c[m>>2]=n;o=n;p=m}else{m=c[d+(k*40|0)+40>>2]|0;c[m>>2]=49;o=49;p=m}if((c[l>>2]|0)>1){m=1;do{c[p+(m<<4)>>2]=o;m=m+1|0}while((m|0)<(c[l>>2]|0))}q=c[f>>2]|0}else{q=j}k=k+1|0;if(!(k>>>0<q>>>0)){break}else{j=q}}i=a;return 0}if(h){i=a;return 0}h=b+4|0;q=b+24|0;j=g;g=0;k=0;while(1){if((c[b+(g<<2)+4732>>2]|0)==0){r=j;s=k}else{o=d+(g*40|0)+36|0;p=c[o>>2]|0;if((p|0)>0){e=c[h>>2]|0;l=0;do{m=c[e+(l+k<<2)+188>>2]|0;if((m|0)>-1){c[(c[d+(g*40|0)+40>>2]|0)+(l<<4)>>2]=c[(c[(c[(c[q>>2]|0)+20>>2]|0)+(g*40|0)+40>>2]|0)+(m<<4)>>2]}else{c[(c[d+(g*40|0)+40>>2]|0)+(l<<4)>>2]=32}l=l+1|0;t=c[o>>2]|0}while((l|0)<(t|0));u=t;v=c[f>>2]|0}else{u=p;v=j}r=v;s=u+k|0}g=g+1|0;if(!(g>>>0<r>>>0)){break}else{j=r;k=s}}i=a;return 0}function _c(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;d=i;e=b+20|0;f=c[e>>2]|0;if((c[(c[f>>2]|0)+8>>2]|0)==0){i=d;return 0}else{g=f;h=0}while(1){if((c[b+(h<<2)+4732>>2]|0)!=0?(c[g+(h*40|0)+36>>2]|0)>0:0){f=0;while(1){j=qb(a,4,1)|0;k=c[e>>2]|0;c[(c[k+(h*40|0)+40>>2]|0)+(f<<4)+4>>2]=j;j=f+1|0;if((j|0)<(c[k+(h*40|0)+36>>2]|0)){f=j}else{l=k;break}}}else{l=g}h=h+1|0;if(!(h>>>0<(c[(c[l>>2]|0)+8>>2]|0)>>>0)){break}else{g=l}}i=d;return 0}function $c(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;g=b+20|0;h=c[g>>2]|0;if((c[(c[h>>2]|0)+8>>2]|0)==0){i=f;return 0}else{j=h;k=0}while(1){do{if((c[b+(k<<2)+4732>>2]|0)!=0){h=c[j+(k*40|0)+36>>2]|0;if((h|0)==1){l=qb(a,d[278008|0]|0,0)|0;m=d[(c[277996>>2]|0)+l|0]|0;qb(a,e[(c[69498]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[g>>2]|0;c[(c[l+(k*40|0)+40>>2]|0)+4>>2]=m;n=l;break}if((h|0)>0){h=0;while(1){l=qb(a,d[278032|0]|0,0)|0;m=d[(c[278020>>2]|0)+l|0]|0;qb(a,e[(c[69504]|0)+((m<<1|1)<<1)>>1]|0,1)|0;l=c[g>>2]|0;c[(c[l+(k*40|0)+40>>2]|0)+(h<<4)+4>>2]=m;m=h+1|0;if((m|0)<(c[l+(k*40|0)+36>>2]|0)){h=m}else{n=l;break}}}else{n=j}}else{n=j}}while(0);k=k+1|0;if(!(k>>>0<(c[(c[n>>2]|0)+8>>2]|0)>>>0)){break}else{j=n}}i=f;return 0}function ad(a,b){a=a|0;b=b|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;f=i;g=b+20|0;h=c[g>>2]|0;if((c[(c[h>>2]|0)+8>>2]|0)==0){i=f;return 0}j=b+4|0;k=b+24|0;l=h;h=0;m=0;while(1){if((c[b+(h<<2)+4732>>2]|0)==0){n=l;o=m}else{p=c[l+(h*40|0)+36>>2]|0;if((p|0)>0){q=0;while(1){r=qb(a,d[278056|0]|0,0)|0;s=d[(c[278044>>2]|0)+r|0]|0;qb(a,e[(c[69510]|0)+((s<<1|1)<<1)>>1]|0,1)|0;r=(s&4|0)==0?s&7:s|-8;s=c[(c[j>>2]|0)+(q+m<<2)+188>>2]|0;if((s|0)>-1){t=c[g>>2]|0;c[(c[t+(h*40|0)+40>>2]|0)+(q<<4)+4>>2]=(c[(c[(c[(c[k>>2]|0)+20>>2]|0)+(h*40|0)+40>>2]|0)+(s<<4)+4>>2]|0)+r&15;u=t}else{t=c[g>>2]|0;c[(c[t+(h*40|0)+40>>2]|0)+(q<<4)+4>>2]=r+12&15;u=t}t=q+1|0;r=c[u+(h*40|0)+36>>2]|0;if((t|0)<(r|0)){q=t}else{v=r;w=u;break}}}else{v=p;w=l}n=w;o=v+m|0}h=h+1|0;if(!(h>>>0<(c[(c[n>>2]|0)+8>>2]|0)>>>0)){break}else{l=n;m=o}}i=f;return 0}function bd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;a=i;d=c[b+20>>2]|0;e=(c[d>>2]|0)+8|0;f=c[e>>2]|0;if((f|0)==0){i=a;return 0}g=b+4|0;h=b+24|0;j=f;f=0;k=0;while(1){if((c[b+(f<<2)+4732>>2]|0)==0){l=j;m=k}else{n=d+(f*40|0)+36|0;o=c[n>>2]|0;if((o|0)>0){p=c[g>>2]|0;q=0;do{r=c[p+(q+k<<2)+188>>2]|0;if((r|0)>-1){c[(c[d+(f*40|0)+40>>2]|0)+(q<<4)+4>>2]=c[(c[(c[(c[h>>2]|0)+20>>2]|0)+(f*40|0)+40>>2]|0)+(r<<4)+4>>2]}else{c[(c[d+(f*40|0)+40>>2]|0)+(q<<4)+4>>2]=14}q=q+1|0;s=c[n>>2]|0}while((q|0)<(s|0));t=s;u=c[e>>2]|0}else{t=o;u=j}l=u;m=t+k|0}f=f+1|0;if(!(f>>>0<l>>>0)){break}else{j=l;k=m}}i=a;return 0}function cd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;d=i;e=b+20|0;f=c[e>>2]|0;g=c[f>>2]|0;h=g+780|0;j=c[h>>2]|0;if((c[g+8>>2]|0)==0){k=h;l=j}else{h=j;j=f;f=0;g=0;while(1){c[j+(f*40|0)+40>>2]=h;m=c[e>>2]|0;n=(c[m+(f*40|0)+36>>2]|0)+g|0;o=f+1|0;p=c[m>>2]|0;q=p+780|0;r=(c[q>>2]|0)+(n<<4)|0;if(o>>>0<(c[p+8>>2]|0)>>>0){h=r;j=m;f=o;g=n}else{k=q;l=r;break}}}c[k>>2]=l;if((c[b>>2]|0)==1){s=qb(a,1,1)|0}else{s=0}Ta[c[300264+(s<<2)>>2]&63](a,b)|0;s=c[b>>2]|0;if((s|0)==1){Vc(0,b)|0;t=c[b>>2]|0}else{t=s}Ta[c[300272+((qb(a,t+1|0,1)|0)<<2)>>2]&63](a,b)|0;t=c[e>>2]|0;s=c[t>>2]|0;if((c[s+4>>2]|0)==0){Ta[c[300288+((qb(a,(c[b>>2]|0)+1|0,1)|0)<<2)>>2]&63](a,b)|0;l=c[e>>2]|0;u=c[l>>2]|0;v=l}else{u=s;v=t}if((c[u+8>>2]|0)==0){i=d;return 0}else{w=v;x=0}while(1){if((c[b+(x<<2)+4732>>2]|0)!=0?(c[w+(x*40|0)+36>>2]|0)>0:0){v=0;while(1){u=qb(a,5,1)|0;t=c[e>>2]|0;c[(c[t+(x*40|0)+40>>2]|0)+(v<<4)+8>>2]=u;u=v+1|0;if((u|0)<(c[t+(x*40|0)+36>>2]|0)){v=u}else{y=t;break}}}else{y=w}x=x+1|0;if(!(x>>>0<(c[(c[y>>2]|0)+8>>2]|0)>>>0)){break}else{w=y}}i=d;return 0}function dd(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;d=i;e=c[c[b+20>>2]>>2]|0;f=e+8|0;g=(c[f>>2]|0)==0;if((c[b>>2]|0)==0){if(!g){h=0;do{c[b+(h<<2)+4732>>2]=1;h=h+1|0}while(h>>>0<(c[f>>2]|0)>>>0)}}else{if(!g){g=0;do{c[b+(g<<2)+4732>>2]=(c[e+(g<<2)+792>>2]|0)==0;g=g+1|0}while(g>>>0<(c[f>>2]|0)>>>0)}}if((c[b>>2]|0)==1){j=qb(a,1,1)|0}else{j=0}Ta[c[300240+(j<<2)>>2]&63](a,b)|0;Ta[c[300248+((qb(a,(c[b>>2]|0)+1|0,1)|0)<<2)>>2]&63](a,b)|0;cd(a,b)|0;i=d;return 0}function ed(a){a=a|0;var b=0;b=i;jb(a+131140|0);c[a+131136>>2]=0;Bb(a,0,64)|0;i=b;return}function fd(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=0;do{e=a+(d<<2)|0;f=c[e>>2]|0;if((f|0)!=0){Db(f);Dd(f);c[e>>2]=0}d=d+1|0}while((d|0)<16);i=b;return}function gd(a,d,e,f,g){a=a|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;h=i;i=i+16|0;j=h;k=Cd(40)|0;mb(k,e+16|0,0);pb(k,d,e)|0;Bb(j,0,16)|0;pb(k,j,16)|0;j=(qb(k,1,1)|0)!=0;if(!j){e=0;d=0;while(1){l=qb(k,2,1)|0;if((l|0)==3){m=0;break}else if((l|0)==0){n=1;o=0}else if((l|0)==1){n=2;o=1}else{n=0;o=0}l=a+(d<<2)|0;p=c[l>>2]|0;if((p|0)==0){q=Cd(65556)|0;Cb(q);c[l>>2]=q;r=q}else{r=p}p=Eb(r,k,n,o)|0;if((p|0)!=0){m=p;break}p=Nb(c[l>>2]|0,n)|0;if((p|0)!=0){m=p;break}if((n|0)==0){s=e}else{p=0;q=e;while(1){Ob(c[l>>2]|0,p,a+(q<<11<<1)+65600|0)|0;p=p+1|0;if((p|0)==(n|0)){break}else{q=q+1|0}}s=n+e|0}e=s;d=d+1|0}if((e|0)>0){d=0;while(1){s=aa(d,e)|0;n=0;do{b[a+(n+s<<1)+64>>1]=b[a+((n<<11)+d<<1)+65600>>1]|0;n=n+1|0}while((n|0)!=(e|0));n=d+1|0;if((n|0)==2048){t=e;u=m;break}else{d=n}}}else{t=e;u=m}}else{t=0;u=j<<31>>31}if((k|0)!=0){ob(k);Dd(k)}if((f|0)!=0){c[f>>2]=t}if((g|0)==0){i=h;return u|0}c[g>>2]=a+64;i=h;return u|0}function hd(){var a=0,b=0;a=i;b=Cd(131148)|0;ed(b);i=a;return b|0}function id(a){a=a|0;var b=0;b=i;if((a|0)==0){i=b;return}fd(a);Dd(a);i=b;return}function jd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;c[f>>2]=-1;g=(gd(a,b,d,f,0)|0)==0;i=e;return(g?c[f>>2]|0:-1)|0}function kd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0;e=i;i=i+16|0;f=e;c[f>>2]=-1;g=(gd(a,b,d,f,0)|0)==0;i=e;return(g?c[f>>2]<<12:-4096)|0}function ld(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=0;gd(a,b,d,0,f)|0;i=e;return c[f>>2]|0}function md(a){a=a|0;return}function nd(a){a=a|0;return}function od(a){a=a|0;return}function pd(a){a=a|0;return}function qd(a){a=a|0;var b=0;b=i;Dd(a);i=b;return}function rd(a){a=a|0;var b=0;b=i;Dd(a);i=b;return}function sd(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){g=1;i=e;return g|0}if((b|0)==0){g=0;i=e;return g|0}h=vd(b,300368,300424,0)|0;if((h|0)==0){g=0;i=e;return g|0}b=f+0|0;j=b+56|0;do{c[b>>2]=0;b=b+4|0}while((b|0)<(j|0));c[f>>2]=h;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;Ua[c[(c[h>>2]|0)+28>>2]&3](h,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){g=0;i=e;return g|0}c[d>>2]=c[f+16>>2];g=1;i=e;return g|0}function td(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((c[d+8>>2]|0)!=(b|0)){i=g;return}b=d+16|0;h=c[b>>2]|0;if((h|0)==0){c[b>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function ud(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;if((b|0)!=(c[d+8>>2]|0)){h=c[b+8>>2]|0;Ua[c[(c[h>>2]|0)+28>>2]&3](h,d,e,f);i=g;return}h=d+16|0;b=c[h>>2]|0;if((b|0)==0){c[h>>2]=e;c[d+24>>2]=f;c[d+36>>2]=1;i=g;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;c[d+24>>2]=2;a[d+54|0]=1;i=g;return}e=d+24|0;if((c[e>>2]|0)!=2){i=g;return}c[e>>2]=f;i=g;return}function vd(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;h=i;i=i+64|0;j=h;k=c[d>>2]|0;l=d+(c[k+ -8>>2]|0)|0;m=c[k+ -4>>2]|0;c[j>>2]=f;c[j+4>>2]=d;c[j+8>>2]=e;c[j+12>>2]=g;g=j+16|0;e=j+20|0;d=j+24|0;k=j+28|0;n=j+32|0;o=j+40|0;p=(m|0)==(f|0);f=g+0|0;q=f+36|0;do{c[f>>2]=0;f=f+4|0}while((f|0)<(q|0));b[g+36>>1]=0;a[g+38|0]=0;if(p){c[j+48>>2]=1;Sa[c[(c[m>>2]|0)+20>>2]&3](m,j,l,l,1,0);r=(c[d>>2]|0)==1?l:0;i=h;return r|0}Oa[c[(c[m>>2]|0)+24>>2]&3](m,j,l,1,0);l=c[j+36>>2]|0;if((l|0)==0){if((c[o>>2]|0)!=1){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}r=(c[n>>2]|0)==1?c[e>>2]|0:0;i=h;return r|0}else if((l|0)==1){if((c[d>>2]|0)!=1){if((c[o>>2]|0)!=0){r=0;i=h;return r|0}if((c[k>>2]|0)!=1){r=0;i=h;return r|0}if((c[n>>2]|0)!=1){r=0;i=h;return r|0}}r=c[g>>2]|0;i=h;return r|0}else{r=0;i=h;return r|0}return 0}function wd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){j=c[b+8>>2]|0;Oa[c[(c[j>>2]|0)+24>>2]&3](j,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;k=d+44|0;if((c[k>>2]|0)==4){i=h;return}l=d+52|0;a[l]=0;m=d+53|0;a[m]=0;n=c[b+8>>2]|0;Sa[c[(c[n>>2]|0)+20>>2]&3](n,d,e,e,1,g);if((a[m]|0)!=0){if((a[l]|0)==0){o=1;p=13}}else{o=0;p=13}do{if((p|0)==13){c[j>>2]=e;l=d+40|0;c[l>>2]=(c[l>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54|0]=1;if(o){break}}else{p=16}if((p|0)==16?o:0){break}c[k>>2]=4;i=h;return}}while(0);c[k>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function xd(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}h=d+28|0;if((c[h>>2]|0)==1){i=g;return}c[h>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(b=d+20|0,(c[b>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[b>>2]=e;e=d+40|0;c[e>>2]=(c[e>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54|0]=1}c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function yd(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0;j=i;if((b|0)!=(c[d+8>>2]|0)){k=c[b+8>>2]|0;Sa[c[(c[k>>2]|0)+20>>2]&3](k,d,e,f,g,h);i=j;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=j;return}a[d+52|0]=1;f=d+16|0;h=c[f>>2]|0;if((h|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}if((h|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=j;return}e=d+24|0;h=c[e>>2]|0;if((h|0)==2){c[e>>2]=g;l=g}else{l=h}if(!((c[d+48>>2]|0)==1&(l|0)==1)){i=j;return}a[d+54|0]=1;i=j;return}function zd(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0;h=i;if((c[d+8>>2]|0)!=(b|0)){i=h;return}a[d+53|0]=1;if((c[d+4>>2]|0)!=(f|0)){i=h;return}a[d+52|0]=1;f=d+16|0;b=c[f>>2]|0;if((b|0)==0){c[f>>2]=e;c[d+24>>2]=g;c[d+36>>2]=1;if(!((c[d+48>>2]|0)==1&(g|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}if((b|0)!=(e|0)){e=d+36|0;c[e>>2]=(c[e>>2]|0)+1;a[d+54|0]=1;i=h;return}e=d+24|0;b=c[e>>2]|0;if((b|0)==2){c[e>>2]=g;j=g}else{j=b}if(!((c[d+48>>2]|0)==1&(j|0)==1)){i=h;return}a[d+54|0]=1;i=h;return}function Ad(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ua=0,wa=0,xa=0,ya=0,za=0,Ba=0,Ca=0,Ea=0,Fa=0,Ga=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0;b=i;do{if(a>>>0<245){if(a>>>0<11){d=16}else{d=a+11&-8}e=d>>>3;f=c[75144]|0;g=f>>>e;if((g&3|0)!=0){h=(g&1^1)+e|0;j=h<<1;k=300616+(j<<2)|0;l=300616+(j+2<<2)|0;j=c[l>>2]|0;m=j+8|0;n=c[m>>2]|0;do{if((k|0)!=(n|0)){if(n>>>0<(c[300592>>2]|0)>>>0){Ha()}o=n+12|0;if((c[o>>2]|0)==(j|0)){c[o>>2]=k;c[l>>2]=n;break}else{Ha()}}else{c[75144]=f&~(1<<h)}}while(0);n=h<<3;c[j+4>>2]=n|3;l=j+(n|4)|0;c[l>>2]=c[l>>2]|1;p=m;i=b;return p|0}if(d>>>0>(c[300584>>2]|0)>>>0){if((g|0)!=0){l=2<<e;n=g<<e&(l|0-l);l=(n&0-n)+ -1|0;n=l>>>12&16;k=l>>>n;l=k>>>5&8;o=k>>>l;k=o>>>2&4;q=o>>>k;o=q>>>1&2;r=q>>>o;q=r>>>1&1;s=(l|n|k|o|q)+(r>>>q)|0;q=s<<1;r=300616+(q<<2)|0;o=300616+(q+2<<2)|0;q=c[o>>2]|0;k=q+8|0;n=c[k>>2]|0;do{if((r|0)!=(n|0)){if(n>>>0<(c[300592>>2]|0)>>>0){Ha()}l=n+12|0;if((c[l>>2]|0)==(q|0)){c[l>>2]=r;c[o>>2]=n;break}else{Ha()}}else{c[75144]=f&~(1<<s)}}while(0);f=s<<3;n=f-d|0;c[q+4>>2]=d|3;o=q+d|0;c[q+(d|4)>>2]=n|1;c[q+f>>2]=n;f=c[300584>>2]|0;if((f|0)!=0){r=c[300596>>2]|0;e=f>>>3;f=e<<1;g=300616+(f<<2)|0;m=c[75144]|0;j=1<<e;if((m&j|0)!=0){e=300616+(f+2<<2)|0;h=c[e>>2]|0;if(h>>>0<(c[300592>>2]|0)>>>0){Ha()}else{t=e;u=h}}else{c[75144]=m|j;t=300616+(f+2<<2)|0;u=g}c[t>>2]=r;c[u+12>>2]=r;c[r+8>>2]=u;c[r+12>>2]=g}c[300584>>2]=n;c[300596>>2]=o;p=k;i=b;return p|0}o=c[300580>>2]|0;if((o|0)!=0){n=(o&0-o)+ -1|0;o=n>>>12&16;g=n>>>o;n=g>>>5&8;r=g>>>n;g=r>>>2&4;f=r>>>g;r=f>>>1&2;j=f>>>r;f=j>>>1&1;m=c[300880+((n|o|g|r|f)+(j>>>f)<<2)>>2]|0;f=(c[m+4>>2]&-8)-d|0;j=m;r=m;while(1){m=c[j+16>>2]|0;if((m|0)==0){g=c[j+20>>2]|0;if((g|0)==0){break}else{v=g}}else{v=m}m=(c[v+4>>2]&-8)-d|0;g=m>>>0<f>>>0;f=g?m:f;j=v;r=g?v:r}j=c[300592>>2]|0;if(r>>>0<j>>>0){Ha()}k=r+d|0;if(!(r>>>0<k>>>0)){Ha()}q=c[r+24>>2]|0;s=c[r+12>>2]|0;do{if((s|0)==(r|0)){g=r+20|0;m=c[g>>2]|0;if((m|0)==0){o=r+16|0;n=c[o>>2]|0;if((n|0)==0){w=0;break}else{x=n;y=o}}else{x=m;y=g}while(1){g=x+20|0;m=c[g>>2]|0;if((m|0)!=0){x=m;y=g;continue}g=x+16|0;m=c[g>>2]|0;if((m|0)==0){break}else{x=m;y=g}}if(y>>>0<j>>>0){Ha()}else{c[y>>2]=0;w=x;break}}else{g=c[r+8>>2]|0;if(g>>>0<j>>>0){Ha()}m=g+12|0;if((c[m>>2]|0)!=(r|0)){Ha()}o=s+8|0;if((c[o>>2]|0)==(r|0)){c[m>>2]=s;c[o>>2]=g;w=s;break}else{Ha()}}}while(0);do{if((q|0)!=0){s=c[r+28>>2]|0;j=300880+(s<<2)|0;if((r|0)==(c[j>>2]|0)){c[j>>2]=w;if((w|0)==0){c[300580>>2]=c[300580>>2]&~(1<<s);break}}else{if(q>>>0<(c[300592>>2]|0)>>>0){Ha()}s=q+16|0;if((c[s>>2]|0)==(r|0)){c[s>>2]=w}else{c[q+20>>2]=w}if((w|0)==0){break}}if(w>>>0<(c[300592>>2]|0)>>>0){Ha()}c[w+24>>2]=q;s=c[r+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[w+16>>2]=s;c[s+24>>2]=w;break}}}while(0);s=c[r+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[w+20>>2]=s;c[s+24>>2]=w;break}}}}while(0);if(f>>>0<16){q=f+d|0;c[r+4>>2]=q|3;s=r+(q+4)|0;c[s>>2]=c[s>>2]|1}else{c[r+4>>2]=d|3;c[r+(d|4)>>2]=f|1;c[r+(f+d)>>2]=f;s=c[300584>>2]|0;if((s|0)!=0){q=c[300596>>2]|0;j=s>>>3;s=j<<1;g=300616+(s<<2)|0;o=c[75144]|0;m=1<<j;if((o&m|0)!=0){j=300616+(s+2<<2)|0;n=c[j>>2]|0;if(n>>>0<(c[300592>>2]|0)>>>0){Ha()}else{z=j;A=n}}else{c[75144]=o|m;z=300616+(s+2<<2)|0;A=g}c[z>>2]=q;c[A+12>>2]=q;c[q+8>>2]=A;c[q+12>>2]=g}c[300584>>2]=f;c[300596>>2]=k}p=r+8|0;i=b;return p|0}else{B=d}}else{B=d}}else{if(!(a>>>0>4294967231)){g=a+11|0;q=g&-8;s=c[300580>>2]|0;if((s|0)!=0){m=0-q|0;o=g>>>8;if((o|0)!=0){if(q>>>0>16777215){C=31}else{g=(o+1048320|0)>>>16&8;n=o<<g;o=(n+520192|0)>>>16&4;j=n<<o;n=(j+245760|0)>>>16&2;h=14-(o|g|n)+(j<<n>>>15)|0;C=q>>>(h+7|0)&1|h<<1}}else{C=0}h=c[300880+(C<<2)>>2]|0;a:do{if((h|0)==0){D=m;E=0;F=0}else{if((C|0)==31){G=0}else{G=25-(C>>>1)|0}n=m;j=0;g=q<<G;o=h;e=0;while(1){l=c[o+4>>2]&-8;H=l-q|0;if(H>>>0<n>>>0){if((l|0)==(q|0)){D=H;E=o;F=o;break a}else{I=H;J=o}}else{I=n;J=e}H=c[o+20>>2]|0;l=c[o+(g>>>31<<2)+16>>2]|0;K=(H|0)==0|(H|0)==(l|0)?j:H;if((l|0)==0){D=I;E=K;F=J;break}else{n=I;j=K;g=g<<1;o=l;e=J}}}}while(0);if((E|0)==0&(F|0)==0){h=2<<C;m=s&(h|0-h);if((m|0)==0){B=q;break}h=(m&0-m)+ -1|0;m=h>>>12&16;r=h>>>m;h=r>>>5&8;k=r>>>h;r=k>>>2&4;f=k>>>r;k=f>>>1&2;e=f>>>k;f=e>>>1&1;L=c[300880+((h|m|r|k|f)+(e>>>f)<<2)>>2]|0}else{L=E}if((L|0)==0){M=D;N=F}else{f=D;e=L;k=F;while(1){r=(c[e+4>>2]&-8)-q|0;m=r>>>0<f>>>0;h=m?r:f;r=m?e:k;m=c[e+16>>2]|0;if((m|0)!=0){f=h;e=m;k=r;continue}m=c[e+20>>2]|0;if((m|0)==0){M=h;N=r;break}else{f=h;e=m;k=r}}}if((N|0)!=0?M>>>0<((c[300584>>2]|0)-q|0)>>>0:0){k=c[300592>>2]|0;if(N>>>0<k>>>0){Ha()}e=N+q|0;if(!(N>>>0<e>>>0)){Ha()}f=c[N+24>>2]|0;s=c[N+12>>2]|0;do{if((s|0)==(N|0)){r=N+20|0;m=c[r>>2]|0;if((m|0)==0){h=N+16|0;o=c[h>>2]|0;if((o|0)==0){O=0;break}else{P=o;Q=h}}else{P=m;Q=r}while(1){r=P+20|0;m=c[r>>2]|0;if((m|0)!=0){P=m;Q=r;continue}r=P+16|0;m=c[r>>2]|0;if((m|0)==0){break}else{P=m;Q=r}}if(Q>>>0<k>>>0){Ha()}else{c[Q>>2]=0;O=P;break}}else{r=c[N+8>>2]|0;if(r>>>0<k>>>0){Ha()}m=r+12|0;if((c[m>>2]|0)!=(N|0)){Ha()}h=s+8|0;if((c[h>>2]|0)==(N|0)){c[m>>2]=s;c[h>>2]=r;O=s;break}else{Ha()}}}while(0);do{if((f|0)!=0){s=c[N+28>>2]|0;k=300880+(s<<2)|0;if((N|0)==(c[k>>2]|0)){c[k>>2]=O;if((O|0)==0){c[300580>>2]=c[300580>>2]&~(1<<s);break}}else{if(f>>>0<(c[300592>>2]|0)>>>0){Ha()}s=f+16|0;if((c[s>>2]|0)==(N|0)){c[s>>2]=O}else{c[f+20>>2]=O}if((O|0)==0){break}}if(O>>>0<(c[300592>>2]|0)>>>0){Ha()}c[O+24>>2]=f;s=c[N+16>>2]|0;do{if((s|0)!=0){if(s>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[O+16>>2]=s;c[s+24>>2]=O;break}}}while(0);s=c[N+20>>2]|0;if((s|0)!=0){if(s>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[O+20>>2]=s;c[s+24>>2]=O;break}}}}while(0);b:do{if(!(M>>>0<16)){c[N+4>>2]=q|3;c[N+(q|4)>>2]=M|1;c[N+(M+q)>>2]=M;f=M>>>3;if(M>>>0<256){s=f<<1;k=300616+(s<<2)|0;r=c[75144]|0;h=1<<f;if((r&h|0)!=0){f=300616+(s+2<<2)|0;m=c[f>>2]|0;if(m>>>0<(c[300592>>2]|0)>>>0){Ha()}else{R=f;S=m}}else{c[75144]=r|h;R=300616+(s+2<<2)|0;S=k}c[R>>2]=e;c[S+12>>2]=e;c[N+(q+8)>>2]=S;c[N+(q+12)>>2]=k;break}k=M>>>8;if((k|0)!=0){if(M>>>0>16777215){T=31}else{s=(k+1048320|0)>>>16&8;h=k<<s;k=(h+520192|0)>>>16&4;r=h<<k;h=(r+245760|0)>>>16&2;m=14-(k|s|h)+(r<<h>>>15)|0;T=M>>>(m+7|0)&1|m<<1}}else{T=0}m=300880+(T<<2)|0;c[N+(q+28)>>2]=T;c[N+(q+20)>>2]=0;c[N+(q+16)>>2]=0;h=c[300580>>2]|0;r=1<<T;if((h&r|0)==0){c[300580>>2]=h|r;c[m>>2]=e;c[N+(q+24)>>2]=m;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break}r=c[m>>2]|0;if((T|0)==31){U=0}else{U=25-(T>>>1)|0}c:do{if((c[r+4>>2]&-8|0)!=(M|0)){m=M<<U;h=r;while(1){V=h+(m>>>31<<2)+16|0;s=c[V>>2]|0;if((s|0)==0){break}if((c[s+4>>2]&-8|0)==(M|0)){W=s;break c}else{m=m<<1;h=s}}if(V>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[V>>2]=e;c[N+(q+24)>>2]=h;c[N+(q+12)>>2]=e;c[N+(q+8)>>2]=e;break b}}else{W=r}}while(0);r=W+8|0;m=c[r>>2]|0;s=c[300592>>2]|0;if(W>>>0<s>>>0){Ha()}if(m>>>0<s>>>0){Ha()}else{c[m+12>>2]=e;c[r>>2]=e;c[N+(q+8)>>2]=m;c[N+(q+12)>>2]=W;c[N+(q+24)>>2]=0;break}}else{m=M+q|0;c[N+4>>2]=m|3;r=N+(m+4)|0;c[r>>2]=c[r>>2]|1}}while(0);p=N+8|0;i=b;return p|0}else{B=q}}else{B=q}}else{B=-1}}}while(0);N=c[300584>>2]|0;if(!(B>>>0>N>>>0)){M=N-B|0;W=c[300596>>2]|0;if(M>>>0>15){c[300596>>2]=W+B;c[300584>>2]=M;c[W+(B+4)>>2]=M|1;c[W+N>>2]=M;c[W+4>>2]=B|3}else{c[300584>>2]=0;c[300596>>2]=0;c[W+4>>2]=N|3;M=W+(N+4)|0;c[M>>2]=c[M>>2]|1}p=W+8|0;i=b;return p|0}W=c[300588>>2]|0;if(B>>>0<W>>>0){M=W-B|0;c[300588>>2]=M;W=c[300600>>2]|0;c[300600>>2]=W+B;c[W+(B+4)>>2]=M|1;c[W+4>>2]=B|3;p=W+8|0;i=b;return p|0}do{if((c[75262]|0)==0){W=Aa(30)|0;if((W+ -1&W|0)==0){c[301056>>2]=W;c[301052>>2]=W;c[301060>>2]=-1;c[301064>>2]=-1;c[301068>>2]=0;c[301020>>2]=0;c[75262]=(ta(0)|0)&-16^1431655768;break}else{Ha()}}}while(0);W=B+48|0;M=c[301056>>2]|0;N=B+47|0;V=M+N|0;U=0-M|0;M=V&U;if(!(M>>>0>B>>>0)){p=0;i=b;return p|0}T=c[301016>>2]|0;if((T|0)!=0?(S=c[301008>>2]|0,R=S+M|0,R>>>0<=S>>>0|R>>>0>T>>>0):0){p=0;i=b;return p|0}d:do{if((c[301020>>2]&4|0)==0){T=c[300600>>2]|0;e:do{if((T|0)!=0){R=301024|0;while(1){S=c[R>>2]|0;if(!(S>>>0>T>>>0)?(X=R+4|0,(S+(c[X>>2]|0)|0)>>>0>T>>>0):0){break}S=c[R+8>>2]|0;if((S|0)==0){Y=182;break e}else{R=S}}if((R|0)!=0){S=V-(c[300588>>2]|0)&U;if(S>>>0<2147483647){O=va(S|0)|0;P=(O|0)==((c[R>>2]|0)+(c[X>>2]|0)|0);Z=O;_=S;$=P?O:-1;aa=P?S:0;Y=191}else{ba=0}}else{Y=182}}else{Y=182}}while(0);do{if((Y|0)==182){T=va(0)|0;if((T|0)!=(-1|0)){q=T;S=c[301052>>2]|0;P=S+ -1|0;if((P&q|0)==0){ca=M}else{ca=M-q+(P+q&0-S)|0}S=c[301008>>2]|0;q=S+ca|0;if(ca>>>0>B>>>0&ca>>>0<2147483647){P=c[301016>>2]|0;if((P|0)!=0?q>>>0<=S>>>0|q>>>0>P>>>0:0){ba=0;break}P=va(ca|0)|0;q=(P|0)==(T|0);Z=P;_=ca;$=q?T:-1;aa=q?ca:0;Y=191}else{ba=0}}else{ba=0}}}while(0);f:do{if((Y|0)==191){q=0-_|0;if(($|0)!=(-1|0)){da=$;ea=aa;Y=202;break d}do{if((Z|0)!=(-1|0)&_>>>0<2147483647&_>>>0<W>>>0?(T=c[301056>>2]|0,P=N-_+T&0-T,P>>>0<2147483647):0){if((va(P|0)|0)==(-1|0)){va(q|0)|0;ba=aa;break f}else{fa=P+_|0;break}}else{fa=_}}while(0);if((Z|0)==(-1|0)){ba=aa}else{da=Z;ea=fa;Y=202;break d}}}while(0);c[301020>>2]=c[301020>>2]|4;ga=ba;Y=199}else{ga=0;Y=199}}while(0);if((((Y|0)==199?M>>>0<2147483647:0)?(ba=va(M|0)|0,M=va(0)|0,(M|0)!=(-1|0)&(ba|0)!=(-1|0)&ba>>>0<M>>>0):0)?(fa=M-ba|0,M=fa>>>0>(B+40|0)>>>0,M):0){da=ba;ea=M?fa:ga;Y=202}if((Y|0)==202){ga=(c[301008>>2]|0)+ea|0;c[301008>>2]=ga;if(ga>>>0>(c[301012>>2]|0)>>>0){c[301012>>2]=ga}ga=c[300600>>2]|0;g:do{if((ga|0)!=0){fa=301024|0;while(1){ha=c[fa>>2]|0;ia=fa+4|0;ja=c[ia>>2]|0;if((da|0)==(ha+ja|0)){Y=214;break}M=c[fa+8>>2]|0;if((M|0)==0){break}else{fa=M}}if(((Y|0)==214?(c[fa+12>>2]&8|0)==0:0)?ga>>>0>=ha>>>0&ga>>>0<da>>>0:0){c[ia>>2]=ja+ea;M=(c[300588>>2]|0)+ea|0;ba=ga+8|0;if((ba&7|0)==0){ka=0}else{ka=0-ba&7}ba=M-ka|0;c[300600>>2]=ga+ka;c[300588>>2]=ba;c[ga+(ka+4)>>2]=ba|1;c[ga+(M+4)>>2]=40;c[300604>>2]=c[301064>>2];break}if(da>>>0<(c[300592>>2]|0)>>>0){c[300592>>2]=da}M=da+ea|0;ba=301024|0;while(1){if((c[ba>>2]|0)==(M|0)){Y=224;break}Z=c[ba+8>>2]|0;if((Z|0)==0){break}else{ba=Z}}if((Y|0)==224?(c[ba+12>>2]&8|0)==0:0){c[ba>>2]=da;M=ba+4|0;c[M>>2]=(c[M>>2]|0)+ea;M=da+8|0;if((M&7|0)==0){la=0}else{la=0-M&7}M=da+(ea+8)|0;if((M&7|0)==0){ma=0}else{ma=0-M&7}M=da+(ma+ea)|0;fa=la+B|0;Z=da+fa|0;aa=M-(da+la)-B|0;c[da+(la+4)>>2]=B|3;h:do{if((M|0)!=(c[300600>>2]|0)){if((M|0)==(c[300596>>2]|0)){_=(c[300584>>2]|0)+aa|0;c[300584>>2]=_;c[300596>>2]=Z;c[da+(fa+4)>>2]=_|1;c[da+(_+fa)>>2]=_;break}_=ea+4|0;N=c[da+(_+ma)>>2]|0;if((N&3|0)==1){W=N&-8;$=N>>>3;do{if(!(N>>>0<256)){ca=c[da+((ma|24)+ea)>>2]|0;X=c[da+(ea+12+ma)>>2]|0;do{if((X|0)==(M|0)){U=ma|16;V=da+(_+U)|0;q=c[V>>2]|0;if((q|0)==0){R=da+(U+ea)|0;U=c[R>>2]|0;if((U|0)==0){na=0;break}else{oa=U;pa=R}}else{oa=q;pa=V}while(1){V=oa+20|0;q=c[V>>2]|0;if((q|0)!=0){oa=q;pa=V;continue}V=oa+16|0;q=c[V>>2]|0;if((q|0)==0){break}else{oa=q;pa=V}}if(pa>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[pa>>2]=0;na=oa;break}}else{V=c[da+((ma|8)+ea)>>2]|0;if(V>>>0<(c[300592>>2]|0)>>>0){Ha()}q=V+12|0;if((c[q>>2]|0)!=(M|0)){Ha()}R=X+8|0;if((c[R>>2]|0)==(M|0)){c[q>>2]=X;c[R>>2]=V;na=X;break}else{Ha()}}}while(0);if((ca|0)!=0){X=c[da+(ea+28+ma)>>2]|0;h=300880+(X<<2)|0;if((M|0)==(c[h>>2]|0)){c[h>>2]=na;if((na|0)==0){c[300580>>2]=c[300580>>2]&~(1<<X);break}}else{if(ca>>>0<(c[300592>>2]|0)>>>0){Ha()}X=ca+16|0;if((c[X>>2]|0)==(M|0)){c[X>>2]=na}else{c[ca+20>>2]=na}if((na|0)==0){break}}if(na>>>0<(c[300592>>2]|0)>>>0){Ha()}c[na+24>>2]=ca;X=ma|16;h=c[da+(X+ea)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[na+16>>2]=h;c[h+24>>2]=na;break}}}while(0);h=c[da+(_+X)>>2]|0;if((h|0)!=0){if(h>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[na+20>>2]=h;c[h+24>>2]=na;break}}}}else{h=c[da+((ma|8)+ea)>>2]|0;ca=c[da+(ea+12+ma)>>2]|0;V=300616+($<<1<<2)|0;if((h|0)!=(V|0)){if(h>>>0<(c[300592>>2]|0)>>>0){Ha()}if((c[h+12>>2]|0)!=(M|0)){Ha()}}if((ca|0)==(h|0)){c[75144]=c[75144]&~(1<<$);break}if((ca|0)!=(V|0)){if(ca>>>0<(c[300592>>2]|0)>>>0){Ha()}V=ca+8|0;if((c[V>>2]|0)==(M|0)){qa=V}else{Ha()}}else{qa=ca+8|0}c[h+12>>2]=ca;c[qa>>2]=h}}while(0);ra=da+((W|ma)+ea)|0;sa=W+aa|0}else{ra=M;sa=aa}$=ra+4|0;c[$>>2]=c[$>>2]&-2;c[da+(fa+4)>>2]=sa|1;c[da+(sa+fa)>>2]=sa;$=sa>>>3;if(sa>>>0<256){_=$<<1;N=300616+(_<<2)|0;h=c[75144]|0;ca=1<<$;if((h&ca|0)!=0){$=300616+(_+2<<2)|0;V=c[$>>2]|0;if(V>>>0<(c[300592>>2]|0)>>>0){Ha()}else{ua=$;wa=V}}else{c[75144]=h|ca;ua=300616+(_+2<<2)|0;wa=N}c[ua>>2]=Z;c[wa+12>>2]=Z;c[da+(fa+8)>>2]=wa;c[da+(fa+12)>>2]=N;break}N=sa>>>8;if((N|0)!=0){if(sa>>>0>16777215){xa=31}else{_=(N+1048320|0)>>>16&8;ca=N<<_;N=(ca+520192|0)>>>16&4;h=ca<<N;ca=(h+245760|0)>>>16&2;V=14-(N|_|ca)+(h<<ca>>>15)|0;xa=sa>>>(V+7|0)&1|V<<1}}else{xa=0}V=300880+(xa<<2)|0;c[da+(fa+28)>>2]=xa;c[da+(fa+20)>>2]=0;c[da+(fa+16)>>2]=0;ca=c[300580>>2]|0;h=1<<xa;if((ca&h|0)==0){c[300580>>2]=ca|h;c[V>>2]=Z;c[da+(fa+24)>>2]=V;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break}h=c[V>>2]|0;if((xa|0)==31){ya=0}else{ya=25-(xa>>>1)|0}i:do{if((c[h+4>>2]&-8|0)!=(sa|0)){V=sa<<ya;ca=h;while(1){za=ca+(V>>>31<<2)+16|0;_=c[za>>2]|0;if((_|0)==0){break}if((c[_+4>>2]&-8|0)==(sa|0)){Ba=_;break i}else{V=V<<1;ca=_}}if(za>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[za>>2]=Z;c[da+(fa+24)>>2]=ca;c[da+(fa+12)>>2]=Z;c[da+(fa+8)>>2]=Z;break h}}else{Ba=h}}while(0);h=Ba+8|0;W=c[h>>2]|0;V=c[300592>>2]|0;if(Ba>>>0<V>>>0){Ha()}if(W>>>0<V>>>0){Ha()}else{c[W+12>>2]=Z;c[h>>2]=Z;c[da+(fa+8)>>2]=W;c[da+(fa+12)>>2]=Ba;c[da+(fa+24)>>2]=0;break}}else{W=(c[300588>>2]|0)+aa|0;c[300588>>2]=W;c[300600>>2]=Z;c[da+(fa+4)>>2]=W|1}}while(0);p=da+(la|8)|0;i=b;return p|0}fa=301024|0;while(1){Ca=c[fa>>2]|0;if(!(Ca>>>0>ga>>>0)?(Ea=c[fa+4>>2]|0,Fa=Ca+Ea|0,Fa>>>0>ga>>>0):0){break}fa=c[fa+8>>2]|0}fa=Ca+(Ea+ -39)|0;if((fa&7|0)==0){Ga=0}else{Ga=0-fa&7}fa=Ca+(Ea+ -47+Ga)|0;Z=fa>>>0<(ga+16|0)>>>0?ga:fa;fa=Z+8|0;aa=da+8|0;if((aa&7|0)==0){Ia=0}else{Ia=0-aa&7}aa=ea+ -40-Ia|0;c[300600>>2]=da+Ia;c[300588>>2]=aa;c[da+(Ia+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[300604>>2]=c[301064>>2];c[Z+4>>2]=27;c[fa+0>>2]=c[301024>>2];c[fa+4>>2]=c[301028>>2];c[fa+8>>2]=c[301032>>2];c[fa+12>>2]=c[301036>>2];c[301024>>2]=da;c[301028>>2]=ea;c[301036>>2]=0;c[301032>>2]=fa;fa=Z+28|0;c[fa>>2]=7;if((Z+32|0)>>>0<Fa>>>0){aa=fa;while(1){fa=aa+4|0;c[fa>>2]=7;if((aa+8|0)>>>0<Fa>>>0){aa=fa}else{break}}}if((Z|0)!=(ga|0)){aa=Z-ga|0;fa=ga+(aa+4)|0;c[fa>>2]=c[fa>>2]&-2;c[ga+4>>2]=aa|1;c[ga+aa>>2]=aa;fa=aa>>>3;if(aa>>>0<256){M=fa<<1;ba=300616+(M<<2)|0;W=c[75144]|0;h=1<<fa;if((W&h|0)!=0){fa=300616+(M+2<<2)|0;V=c[fa>>2]|0;if(V>>>0<(c[300592>>2]|0)>>>0){Ha()}else{Ja=fa;Ka=V}}else{c[75144]=W|h;Ja=300616+(M+2<<2)|0;Ka=ba}c[Ja>>2]=ga;c[Ka+12>>2]=ga;c[ga+8>>2]=Ka;c[ga+12>>2]=ba;break}ba=aa>>>8;if((ba|0)!=0){if(aa>>>0>16777215){La=31}else{M=(ba+1048320|0)>>>16&8;h=ba<<M;ba=(h+520192|0)>>>16&4;W=h<<ba;h=(W+245760|0)>>>16&2;V=14-(ba|M|h)+(W<<h>>>15)|0;La=aa>>>(V+7|0)&1|V<<1}}else{La=0}V=300880+(La<<2)|0;c[ga+28>>2]=La;c[ga+20>>2]=0;c[ga+16>>2]=0;h=c[300580>>2]|0;W=1<<La;if((h&W|0)==0){c[300580>>2]=h|W;c[V>>2]=ga;c[ga+24>>2]=V;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break}W=c[V>>2]|0;if((La|0)==31){Ma=0}else{Ma=25-(La>>>1)|0}j:do{if((c[W+4>>2]&-8|0)!=(aa|0)){V=aa<<Ma;h=W;while(1){Na=h+(V>>>31<<2)+16|0;M=c[Na>>2]|0;if((M|0)==0){break}if((c[M+4>>2]&-8|0)==(aa|0)){Oa=M;break j}else{V=V<<1;h=M}}if(Na>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[Na>>2]=ga;c[ga+24>>2]=h;c[ga+12>>2]=ga;c[ga+8>>2]=ga;break g}}else{Oa=W}}while(0);W=Oa+8|0;aa=c[W>>2]|0;Z=c[300592>>2]|0;if(Oa>>>0<Z>>>0){Ha()}if(aa>>>0<Z>>>0){Ha()}else{c[aa+12>>2]=ga;c[W>>2]=ga;c[ga+8>>2]=aa;c[ga+12>>2]=Oa;c[ga+24>>2]=0;break}}}else{aa=c[300592>>2]|0;if((aa|0)==0|da>>>0<aa>>>0){c[300592>>2]=da}c[301024>>2]=da;c[301028>>2]=ea;c[301036>>2]=0;c[300612>>2]=c[75262];c[300608>>2]=-1;aa=0;do{W=aa<<1;Z=300616+(W<<2)|0;c[300616+(W+3<<2)>>2]=Z;c[300616+(W+2<<2)>>2]=Z;aa=aa+1|0}while((aa|0)!=32);aa=da+8|0;if((aa&7|0)==0){Pa=0}else{Pa=0-aa&7}aa=ea+ -40-Pa|0;c[300600>>2]=da+Pa;c[300588>>2]=aa;c[da+(Pa+4)>>2]=aa|1;c[da+(ea+ -36)>>2]=40;c[300604>>2]=c[301064>>2]}}while(0);ea=c[300588>>2]|0;if(ea>>>0>B>>>0){da=ea-B|0;c[300588>>2]=da;ea=c[300600>>2]|0;c[300600>>2]=ea+B;c[ea+(B+4)>>2]=da|1;c[ea+4>>2]=B|3;p=ea+8|0;i=b;return p|0}}c[(Da()|0)>>2]=12;p=0;i=b;return p|0}function Bd(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0;b=i;if((a|0)==0){i=b;return}d=a+ -8|0;e=c[300592>>2]|0;if(d>>>0<e>>>0){Ha()}f=c[a+ -4>>2]|0;g=f&3;if((g|0)==1){Ha()}h=f&-8;j=a+(h+ -8)|0;do{if((f&1|0)==0){k=c[d>>2]|0;if((g|0)==0){i=b;return}l=-8-k|0;m=a+l|0;n=k+h|0;if(m>>>0<e>>>0){Ha()}if((m|0)==(c[300596>>2]|0)){o=a+(h+ -4)|0;if((c[o>>2]&3|0)!=3){p=m;q=n;break}c[300584>>2]=n;c[o>>2]=c[o>>2]&-2;c[a+(l+4)>>2]=n|1;c[j>>2]=n;i=b;return}o=k>>>3;if(k>>>0<256){k=c[a+(l+8)>>2]|0;r=c[a+(l+12)>>2]|0;s=300616+(o<<1<<2)|0;if((k|0)!=(s|0)){if(k>>>0<e>>>0){Ha()}if((c[k+12>>2]|0)!=(m|0)){Ha()}}if((r|0)==(k|0)){c[75144]=c[75144]&~(1<<o);p=m;q=n;break}if((r|0)!=(s|0)){if(r>>>0<e>>>0){Ha()}s=r+8|0;if((c[s>>2]|0)==(m|0)){t=s}else{Ha()}}else{t=r+8|0}c[k+12>>2]=r;c[t>>2]=k;p=m;q=n;break}k=c[a+(l+24)>>2]|0;r=c[a+(l+12)>>2]|0;do{if((r|0)==(m|0)){s=a+(l+20)|0;o=c[s>>2]|0;if((o|0)==0){u=a+(l+16)|0;v=c[u>>2]|0;if((v|0)==0){w=0;break}else{x=v;y=u}}else{x=o;y=s}while(1){s=x+20|0;o=c[s>>2]|0;if((o|0)!=0){x=o;y=s;continue}s=x+16|0;o=c[s>>2]|0;if((o|0)==0){break}else{x=o;y=s}}if(y>>>0<e>>>0){Ha()}else{c[y>>2]=0;w=x;break}}else{s=c[a+(l+8)>>2]|0;if(s>>>0<e>>>0){Ha()}o=s+12|0;if((c[o>>2]|0)!=(m|0)){Ha()}u=r+8|0;if((c[u>>2]|0)==(m|0)){c[o>>2]=r;c[u>>2]=s;w=r;break}else{Ha()}}}while(0);if((k|0)!=0){r=c[a+(l+28)>>2]|0;s=300880+(r<<2)|0;if((m|0)==(c[s>>2]|0)){c[s>>2]=w;if((w|0)==0){c[300580>>2]=c[300580>>2]&~(1<<r);p=m;q=n;break}}else{if(k>>>0<(c[300592>>2]|0)>>>0){Ha()}r=k+16|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=w}else{c[k+20>>2]=w}if((w|0)==0){p=m;q=n;break}}if(w>>>0<(c[300592>>2]|0)>>>0){Ha()}c[w+24>>2]=k;r=c[a+(l+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[w+16>>2]=r;c[r+24>>2]=w;break}}}while(0);r=c[a+(l+20)>>2]|0;if((r|0)!=0){if(r>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[w+20>>2]=r;c[r+24>>2]=w;p=m;q=n;break}}else{p=m;q=n}}else{p=m;q=n}}else{p=d;q=h}}while(0);if(!(p>>>0<j>>>0)){Ha()}d=a+(h+ -4)|0;w=c[d>>2]|0;if((w&1|0)==0){Ha()}if((w&2|0)==0){if((j|0)==(c[300600>>2]|0)){e=(c[300588>>2]|0)+q|0;c[300588>>2]=e;c[300600>>2]=p;c[p+4>>2]=e|1;if((p|0)!=(c[300596>>2]|0)){i=b;return}c[300596>>2]=0;c[300584>>2]=0;i=b;return}if((j|0)==(c[300596>>2]|0)){e=(c[300584>>2]|0)+q|0;c[300584>>2]=e;c[300596>>2]=p;c[p+4>>2]=e|1;c[p+e>>2]=e;i=b;return}e=(w&-8)+q|0;x=w>>>3;do{if(!(w>>>0<256)){y=c[a+(h+16)>>2]|0;t=c[a+(h|4)>>2]|0;do{if((t|0)==(j|0)){g=a+(h+12)|0;f=c[g>>2]|0;if((f|0)==0){r=a+(h+8)|0;k=c[r>>2]|0;if((k|0)==0){z=0;break}else{A=k;B=r}}else{A=f;B=g}while(1){g=A+20|0;f=c[g>>2]|0;if((f|0)!=0){A=f;B=g;continue}g=A+16|0;f=c[g>>2]|0;if((f|0)==0){break}else{A=f;B=g}}if(B>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[B>>2]=0;z=A;break}}else{g=c[a+h>>2]|0;if(g>>>0<(c[300592>>2]|0)>>>0){Ha()}f=g+12|0;if((c[f>>2]|0)!=(j|0)){Ha()}r=t+8|0;if((c[r>>2]|0)==(j|0)){c[f>>2]=t;c[r>>2]=g;z=t;break}else{Ha()}}}while(0);if((y|0)!=0){t=c[a+(h+20)>>2]|0;n=300880+(t<<2)|0;if((j|0)==(c[n>>2]|0)){c[n>>2]=z;if((z|0)==0){c[300580>>2]=c[300580>>2]&~(1<<t);break}}else{if(y>>>0<(c[300592>>2]|0)>>>0){Ha()}t=y+16|0;if((c[t>>2]|0)==(j|0)){c[t>>2]=z}else{c[y+20>>2]=z}if((z|0)==0){break}}if(z>>>0<(c[300592>>2]|0)>>>0){Ha()}c[z+24>>2]=y;t=c[a+(h+8)>>2]|0;do{if((t|0)!=0){if(t>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[z+16>>2]=t;c[t+24>>2]=z;break}}}while(0);t=c[a+(h+12)>>2]|0;if((t|0)!=0){if(t>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[z+20>>2]=t;c[t+24>>2]=z;break}}}}else{t=c[a+h>>2]|0;y=c[a+(h|4)>>2]|0;n=300616+(x<<1<<2)|0;if((t|0)!=(n|0)){if(t>>>0<(c[300592>>2]|0)>>>0){Ha()}if((c[t+12>>2]|0)!=(j|0)){Ha()}}if((y|0)==(t|0)){c[75144]=c[75144]&~(1<<x);break}if((y|0)!=(n|0)){if(y>>>0<(c[300592>>2]|0)>>>0){Ha()}n=y+8|0;if((c[n>>2]|0)==(j|0)){C=n}else{Ha()}}else{C=y+8|0}c[t+12>>2]=y;c[C>>2]=t}}while(0);c[p+4>>2]=e|1;c[p+e>>2]=e;if((p|0)==(c[300596>>2]|0)){c[300584>>2]=e;i=b;return}else{D=e}}else{c[d>>2]=w&-2;c[p+4>>2]=q|1;c[p+q>>2]=q;D=q}q=D>>>3;if(D>>>0<256){w=q<<1;d=300616+(w<<2)|0;e=c[75144]|0;C=1<<q;if((e&C|0)!=0){q=300616+(w+2<<2)|0;j=c[q>>2]|0;if(j>>>0<(c[300592>>2]|0)>>>0){Ha()}else{E=q;F=j}}else{c[75144]=e|C;E=300616+(w+2<<2)|0;F=d}c[E>>2]=p;c[F+12>>2]=p;c[p+8>>2]=F;c[p+12>>2]=d;i=b;return}d=D>>>8;if((d|0)!=0){if(D>>>0>16777215){G=31}else{F=(d+1048320|0)>>>16&8;E=d<<F;d=(E+520192|0)>>>16&4;w=E<<d;E=(w+245760|0)>>>16&2;C=14-(d|F|E)+(w<<E>>>15)|0;G=D>>>(C+7|0)&1|C<<1}}else{G=0}C=300880+(G<<2)|0;c[p+28>>2]=G;c[p+20>>2]=0;c[p+16>>2]=0;E=c[300580>>2]|0;w=1<<G;a:do{if((E&w|0)!=0){F=c[C>>2]|0;if((G|0)==31){H=0}else{H=25-(G>>>1)|0}b:do{if((c[F+4>>2]&-8|0)!=(D|0)){d=D<<H;e=F;while(1){I=e+(d>>>31<<2)+16|0;j=c[I>>2]|0;if((j|0)==0){break}if((c[j+4>>2]&-8|0)==(D|0)){J=j;break b}else{d=d<<1;e=j}}if(I>>>0<(c[300592>>2]|0)>>>0){Ha()}else{c[I>>2]=p;c[p+24>>2]=e;c[p+12>>2]=p;c[p+8>>2]=p;break a}}else{J=F}}while(0);F=J+8|0;d=c[F>>2]|0;j=c[300592>>2]|0;if(J>>>0<j>>>0){Ha()}if(d>>>0<j>>>0){Ha()}else{c[d+12>>2]=p;c[F>>2]=p;c[p+8>>2]=d;c[p+12>>2]=J;c[p+24>>2]=0;break}}else{c[300580>>2]=E|w;c[C>>2]=p;c[p+24>>2]=C;c[p+12>>2]=p;c[p+8>>2]=p}}while(0);p=(c[300608>>2]|0)+ -1|0;c[300608>>2]=p;if((p|0)==0){K=301032|0}else{i=b;return}while(1){p=c[K>>2]|0;if((p|0)==0){break}else{K=p+8|0}}c[300608>>2]=-1;i=b;return}function Cd(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;d=(a|0)==0?1:a;while(1){e=Ad(d)|0;if((e|0)!=0){f=6;break}a=c[75268]|0;c[75268]=a+0;if((a|0)==0){f=5;break}Ra[a&0]()}if((f|0)==5){d=qa(4)|0;c[d>>2]=301088;Fa(d|0,301136,6)}else if((f|0)==6){i=b;return e|0}return 0}function Dd(a){a=a|0;var b=0;b=i;if((a|0)!=0){Bd(a)}i=b;return}function Ed(a){a=a|0;var b=0;b=i;Ea(a|0);Dd(a);i=b;return}function Fd(a){a=a|0;var b=0;b=i;Ea(a|0);i=b;return}function Gd(a){a=a|0;return 301104}function Hd(){c[75286]=o}function Id(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;g=b&3;h=d|d<<8|d<<16|d<<24;i=f&~3;if(g){g=b+4-g|0;while((b|0)<(g|0)){a[b]=d;b=b+1|0}}while((b|0)<(i|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function Jd(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=0;return b>>>c-32|0}function Kd(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function Ld(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return xa(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function Md(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=a+c>>>0;return(E=b+d+(e>>>0<a>>>0|0)>>>0,e|0)|0}function Nd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=b-d>>>0;e=b-d-(c>>>0>a>>>0|0)>>>0;return(E=e,a-c>>>0|0)|0}function Od(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b<<c|(a&(1<<c)-1<<32-c)>>>32-c;return a<<c}E=a<<c-32;return 0}function Pd(a,b,c){a=a|0;b=b|0;c=c|0;if((c|0)<32){E=b>>c;return a>>>c|(b&(1<<c)-1)<<32-c}E=(b|0)<0?-1:0;return b>>c-32|0}function Qd(b){b=b|0;var c=0;c=a[n+(b>>>24)|0]|0;if((c|0)<8)return c|0;c=a[n+(b>>16&255)|0]|0;if((c|0)<8)return c+8|0;c=a[n+(b>>8&255)|0]|0;if((c|0)<8)return c+16|0;return(a[n+(b&255)|0]|0)+24|0}function Rd(b){b=b|0;var c=0;c=a[m+(b&255)|0]|0;if((c|0)<8)return c|0;c=a[m+(b>>8&255)|0]|0;if((c|0)<8)return c+8|0;c=a[m+(b>>16&255)|0]|0;if((c|0)<8)return c+16|0;return(a[m+(b>>>24)|0]|0)+24|0}function Sd(a,b){a=a|0;b=b|0;var c=0,d=0,e=0,f=0;c=a&65535;d=b&65535;e=aa(d,c)|0;f=a>>>16;a=(e>>>16)+(aa(d,f)|0)|0;d=b>>>16;b=aa(d,c)|0;return(E=(a>>>16)+(aa(d,f)|0)+(((a&65535)+b|0)>>>16)|0,a+b<<16|e&65535|0)|0}function Td(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0,g=0,h=0,i=0;e=b>>31|((b|0)<0?-1:0)<<1;f=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;g=d>>31|((d|0)<0?-1:0)<<1;h=((d|0)<0?-1:0)>>31|((d|0)<0?-1:0)<<1;i=Nd(e^a,f^b,e,f)|0;b=E;a=g^e;e=h^f;f=Nd((Yd(i,b,Nd(g^c,h^d,g,h)|0,E,0)|0)^a,E^e,a,e)|0;return f|0}function Ud(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0;f=i;i=i+8|0;g=f|0;h=b>>31|((b|0)<0?-1:0)<<1;j=((b|0)<0?-1:0)>>31|((b|0)<0?-1:0)<<1;k=e>>31|((e|0)<0?-1:0)<<1;l=((e|0)<0?-1:0)>>31|((e|0)<0?-1:0)<<1;m=Nd(h^a,j^b,h,j)|0;b=E;Yd(m,b,Nd(k^d,l^e,k,l)|0,E,g)|0;l=Nd(c[g>>2]^h,c[g+4>>2]^j,h,j)|0;j=E;i=f;return(E=j,l)|0}function Vd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0,f=0;e=a;a=c;c=Sd(e,a)|0;f=E;return(E=(aa(b,a)|0)+(aa(d,e)|0)+f|f&0,c|0|0)|0}function Wd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=Yd(a,b,c,d,0)|0;return e|0}function Xd(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;i=i+8|0;g=f|0;Yd(a,b,d,e,g)|0;i=f;return(E=c[g+4>>2]|0,c[g>>2]|0)|0}function Yd(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0;g=a;h=b;i=h;j=d;k=e;l=k;if((i|0)==0){m=(f|0)!=0;if((l|0)==0){if(m){c[f>>2]=(g>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(g>>>0)/(j>>>0)>>>0;return(E=n,o)|0}else{if(!m){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=b&0;n=0;o=0;return(E=n,o)|0}}m=(l|0)==0;do{if((j|0)!=0){if(!m){p=(Qd(l|0)|0)-(Qd(i|0)|0)|0;if(p>>>0<=31){q=p+1|0;r=31-p|0;s=p-31>>31;t=q;u=g>>>(q>>>0)&s|i<<r;v=i>>>(q>>>0)&s;w=0;x=g<<r;break}if((f|0)==0){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(E=n,o)|0}r=j-1|0;if((r&j|0)!=0){s=(Qd(j|0)|0)+33-(Qd(i|0)|0)|0;q=64-s|0;p=32-s|0;y=p>>31;z=s-32|0;A=z>>31;t=s;u=p-1>>31&i>>>(z>>>0)|(i<<p|g>>>(s>>>0))&A;v=A&i>>>(s>>>0);w=g<<q&y;x=(i<<q|g>>>(z>>>0))&y|g<<p&s-33>>31;break}if((f|0)!=0){c[f>>2]=r&g;c[f+4>>2]=0}if((j|0)==1){n=h|b&0;o=a|0|0;return(E=n,o)|0}else{r=Rd(j|0)|0;n=i>>>(r>>>0)|0;o=i<<32-r|g>>>(r>>>0)|0;return(E=n,o)|0}}else{if(m){if((f|0)!=0){c[f>>2]=(i>>>0)%(j>>>0);c[f+4>>2]=0}n=0;o=(i>>>0)/(j>>>0)>>>0;return(E=n,o)|0}if((g|0)==0){if((f|0)!=0){c[f>>2]=0;c[f+4>>2]=(i>>>0)%(l>>>0)}n=0;o=(i>>>0)/(l>>>0)>>>0;return(E=n,o)|0}r=l-1|0;if((r&l|0)==0){if((f|0)!=0){c[f>>2]=a|0;c[f+4>>2]=r&i|b&0}n=0;o=i>>>((Rd(l|0)|0)>>>0);return(E=n,o)|0}r=(Qd(l|0)|0)-(Qd(i|0)|0)|0;if(r>>>0<=30){s=r+1|0;p=31-r|0;t=s;u=i<<p|g>>>(s>>>0);v=i>>>(s>>>0);w=0;x=g<<p;break}if((f|0)==0){n=0;o=0;return(E=n,o)|0}c[f>>2]=a|0;c[f+4>>2]=h|b&0;n=0;o=0;return(E=n,o)|0}}while(0);if((t|0)==0){B=x;C=w;D=v;F=u;G=0;H=0}else{b=d|0|0;d=k|e&0;e=Md(b,d,-1,-1)|0;k=E;h=x;x=w;w=v;v=u;u=t;t=0;while(1){I=x>>>31|h<<1;J=t|x<<1;a=v<<1|h>>>31|0;g=v>>>31|w<<1|0;Nd(e,k,a,g)|0;i=E;l=i>>31|((i|0)<0?-1:0)<<1;K=l&1;L=Nd(a,g,l&b,(((i|0)<0?-1:0)>>31|((i|0)<0?-1:0)<<1)&d)|0;M=E;i=u-1|0;if((i|0)==0){break}else{h=I;x=J;w=M;v=L;u=i;t=K}}B=I;C=J;D=M;F=L;G=0;H=K}K=C;C=0;if((f|0)!=0){c[f>>2]=F;c[f+4>>2]=D}n=(K|0)>>>31|(B|C)<<1|(C<<1|K>>>31)&0|G;o=(K<<1|0>>>31)&-2|H;return(E=n,o)|0}function Zd(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return Na[a&1](b|0,c|0,d|0)|0}function _d(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;Oa[a&3](b|0,c|0,d|0,e|0,f|0)}function $d(a,b){a=a|0;b=b|0;Pa[a&7](b|0)}function ae(a,b){a=a|0;b=b|0;return Qa[a&1](b|0)|0}function be(a){a=a|0;Ra[a&0]()}function ce(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;Sa[a&3](b|0,c|0,d|0,e|0,f|0,g|0)}function de(a,b,c){a=a|0;b=b|0;c=c|0;return Ta[a&63](b|0,c|0)|0}function ee(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;Ua[a&3](b|0,c|0,d|0,e|0)}function fe(a,b,c){a=a|0;b=b|0;c=c|0;ba(0);return 0}function ge(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ba(1)}function he(a){a=a|0;ba(2)}function ie(a){a=a|0;ba(3);return 0}function je(){ba(4)}function ke(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ba(5)}function le(a,b){a=a|0;b=b|0;ba(6);return 0}function me(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ba(7)}




// EMSCRIPTEN_END_FUNCS
var Na=[fe,sd];var Oa=[ge,xd,wd,ge];var Pa=[he,nd,qd,od,pd,rd,Fd,Ed];var Qa=[ie,Gd];var Ra=[je];var Sa=[ke,zd,yd,ke];var Ta=[le,Tb,Ub,Vb,Wb,Xb,Yb,Zb,_b,$b,ac,bc,cc,dc,ec,fc,gc,hc,ic,kc,lc,mc,nc,oc,pc,rc,sc,tc,uc,vc,wc,xc,Ac,Cc,Ec,Fc,Hc,Ic,Jc,Lc,Mc,Nc,Oc,Pc,Qc,Tc,Uc,Wc,Xc,Yc,Zc,_c,$c,ad,bd,le,le,le,le,le,le,le,le,le];var Ua=[me,td,ud,me];return{_malloc:Ad,_strlen:Kd,_atrac3_create_decoder:hd,_free:Bd,_memset:Id,_atrac3_get_decoded_samples:kd,_memcpy:Ld,_atrac3_decode:ld,_atrac3_delete_decoder:id,_bitshift64Lshr:Jd,_atrac3_get_channels:jd,runPostSets:Hd,stackAlloc:Va,stackSave:Wa,stackRestore:Xa,setThrew:Ya,setTempRet0:$a,setTempRet1:ab,setTempRet2:bb,setTempRet3:cb,setTempRet4:db,setTempRet5:eb,setTempRet6:fb,setTempRet7:gb,setTempRet8:hb,setTempRet9:ib,dynCall_iiii:Zd,dynCall_viiiii:_d,dynCall_vi:$d,dynCall_ii:ae,dynCall_v:be,dynCall_viiiiii:ce,dynCall_iii:de,dynCall_viiii:ee}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_ii": invoke_ii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "__ZSt9terminatev": __ZSt9terminatev, "___cxa_is_number_type": ___cxa_is_number_type, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_fflush": _fflush, "_time": _time, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "_pthread_mutex_destroy": _pthread_mutex_destroy, "_pthread_mutex_unlock": _pthread_mutex_unlock, "___errno_location": ___errno_location, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_throw": ___cxa_throw, "__exit": __exit, "_abort": _abort, "___cxa_does_inherit": ___cxa_does_inherit, "_pthread_mutex_lock": _pthread_mutex_lock, "_pthread_mutex_init": _pthread_mutex_init, "_exit": _exit, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception }, buffer);
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _atrac3_create_decoder = Module["_atrac3_create_decoder"] = asm["_atrac3_create_decoder"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _atrac3_get_decoded_samples = Module["_atrac3_get_decoded_samples"] = asm["_atrac3_get_decoded_samples"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _atrac3_decode = Module["_atrac3_decode"] = asm["_atrac3_decode"];
var _atrac3_delete_decoder = Module["_atrac3_delete_decoder"] = asm["_atrac3_delete_decoder"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _atrac3_get_channels = Module["_atrac3_get_channels"] = asm["_atrac3_get_channels"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}





	var Atrac3Decoder = (function () {
		function Atrac3Decoder() {
			this.decoder = _atrac3_create_decoder();
			this.channels = -1;
			this.decodedSamples = -1;
		};

		function allocAndWrite(data) {
			var ptr = _malloc(data.length);
			HEAPU8.set(data, ptr);
			return ptr;
		}

		function free(ptr) {
			_free(ptr);
		}

		Atrac3Decoder.prototype.destroy = function () {
			_atrac3_delete_decoder(this.decoder);
		};

		Atrac3Decoder.prototype.initWithHeader = function (buffer) {
			var ptr = allocAndWrite(buffer);
			var channels = _atrac3_get_channels(this.decoder, ptr, buffer.length);
			free(ptr);
			this.channels = channels;
			this.decodedSamples = 0x800 * this.channels;
		};

		Atrac3Decoder.prototype.decode = function (buffer) {
			var out = new Int16Array(this.decodedSamples);
			var ptrIn = allocAndWrite(buffer);
			var ptrOut = _atrac3_decode(this.decoder, ptrIn, buffer.length);
			out.set(HEAP16.subarray((ptrOut >> 1), (ptrOut >> 1) + out.length));
			free(ptrIn);
			return out;
		};

		return Atrac3Decoder;
	})();
	
	Module['Atrac3Decoder'] = Atrac3Decoder;

	return Module;
})(); // MediaEngine.post.js

var ENVIRONMENT_IS_WEB = typeof window === 'object';

if (ENVIRONMENT_IS_WEB) window['MediaEngine'] = MediaEngine;

